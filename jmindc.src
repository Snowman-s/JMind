「uniencode.src」を　コンパイル。
「unidecode.src」を　コンパイル。
「sutf8rap.src」を　コンパイル。
「utility\sbytecomposition.src」を　コンパイル。
「utility\sruntimefieldmanager.src」を　コンパイル。
「sopecode.src」を　コンパイル。
「scompiler.src」を　コンパイル。

出力先は　ファイル。
ソースコードは　ファイル。

（・－＞・）
エラー処理とは
    エラー？　ならば
        エラー文字列を　一行表示し、
        出力先を　クローズして、
        ソースコードを　クローズして、
        重大エラーにする
    つぎに。

（繰り返し数・バイト数　－＞　・）
バイト数指定で書き込みとは
    受け取り数は　変数
    繰り返し数は　変数
    操作桁数は　変数
    マスク値は　変数

    繰り返し数に　入れ
    受け取り数に　入れ、
    繰り返し数を　回数指定して
        回数を　繰り返し数から　引いて、８ビットを　掛けて、　操作桁数に　入れ、
    
        操作桁数ぶんだけ、１を　左シフトしたものを　マスク値に　入れ、

        ７を　回数指定して
            マスク値を　１つだけ　左シフトしたものと、マスク値の　ＯＲを　マスク値に　入れることを
        繰り返す

        マスク値と　受け取り数の　ＡＮＤを　操作桁数だけ　右シフトし　出力先に　一文字書き込みして、
    繰り返し、
    エラー処理すること。

（情報　－＞　・）
バイト１書き込みとは
    １バイトで、バイト数指定で書き込みすること。

（情報　－＞　・）
バイト２書き込みとは
    ２バイトで、バイト数指定で書き込みすること。

（情報　－＞　・）
バイト４書き込みとは
    ４バイトで、バイト数指定で書き込みすること。

（文字列　－＞　・）
ファイル書き込みとは
    出力先に　書き込み、エラー処理すること。

（文字列・文字列・文字列...・文字列個数 -＞　・）
個数指定でアクセス修飾子のデータを書き込むとは
    カウンタは　変数
    カウンタを　クリアし
    回数指定し
        文字列事例をとる
            「Ｐｕｂｌｉｃ」なら　０１Ｈだけ
            「Ｐｒｉｖａｔｅ」なら　０２Ｈだけ
            「Ｐｒｏｔｅｃｔｅｄ」なら　０４Ｈだけ
            「Ｓｔａｔｉｃ」なら　０８Ｈだけ
            「Ｆｉｎａｌ」なら　１０Ｈだけ 
            「Ｓｙｎｃｒｏｎｉｚｅｄ」なら　０２０Ｈだけ
            「Ｖｏｒａｔｉｌｅ」なら　０４０Ｈだけ
            「Ｂｒｉｄｇｅ」なら　０４０Ｈだけ
            「Ｔｒａｎｓｉｅｎｔ」なら　０８０Ｈだけ
            「Ｖａｒａｒｇｓ」なら　０８０Ｈだけ
            「Ｎａｔｉｖｅ」なら　０１００Ｈだけ
            「Ａｂｓｔｒｕｃｔ」なら　０４００Ｈだけ
            「Ｓｔｒｉｃｔ」なら　０８００Ｈだけ
            「Ｓｙｎｔｈｅｔｉｃ」なら　０１０００Ｈだけ
            「Ｅｎｕｍ」なら　０４０００Ｈだけ
            例外なら　００Ｈだけ
        事例終わり、
        カウンタを　増加させ、
    繰り返し
    カウンタを　バイト２書き込みすること。

（文字列　－＞　・）
文字列とバイト数をＵＴＦ８で書き込むとは
    ＵＴＦ８へ変換して
    複写し、　バイト数を　バイト２書き込みし、
    ファイル書き込みすること。

メインとは
    ソースコード名は　文字列実体　長さ　１００桁
    関数定義文字列は　文字列実体　長さ　６００桁
    関数認識構造体は　構造体　関数認識情報

    ランタイム定数フィールドバイナリ集計は　文字列実体　長さ　５００バイト
    ランタイム定数フィールド数集計は　変数

    継承クラスランタイム定数フィールドインデックスは　変数
    実クラスランタイム定数フィールドインデックスは　変数
    
    Ｃｏｄｅランタイム定数フィールドインデックスは　変数

    ※ＴＯＤＯいつか構造体に
    メソッド名ランタイム定数フィールドインデックスは　変数
    メソッド型ランタイム定数フィールドインデックスは　変数
    メソッドオペコードは　文字列実体　長さ　１００バイト
    メソッドローカル変数個数は　変数

    読み出し文字列ＵＴＦ８を得るとは
        読み出し文字列を　ＳＪＩＳへ変換

    本体とは
    ソースコード名を　クリアし
    カレントディレクトリと　起動引数（１個目）で　絶対パスと相対パスをマージし　複写して　一行表示したのち　ソースコード名に　追加し
    関数定義文字列を　クリアし

    動的単語情報を初期化し、

    起動引数個数が　０に　等しい　ならば
        「起動引数を与えて下さい」を　一行表示し、
        実行終わり、
    つぎに

    ランタイム定数フィールドバイナリ集計を　クリアし
    ランタイム定数フィールド数集計を　クリアし

    ソースコード名で　ソースコードを　オープンし、
    エラー処理し、

    ソースコード名の　主ファイル名を得て、
    「.class」を　合成したもので　出力先を　新規オープンし、
    エラー処理し、
    
    ※Magic Number
    ｛ＣＡ　ＦＥ　ＢＡ　ＢＥ｝を　ファイル書き込みし、

    関数認識構造体を　クリアし
    デフォルトのランタイム定数フィールドを得て
    ランタイム定数フィールド数集計に　入れ
    ランタイム定数フィールドバイナリ集計に　追加し

    「ソースコード読み出し前」で　このメッセージでスタック検査し
    
    ここから
        関数認識構造体を　クリアし
        関数認識構造体の　ランタイム定数フィールド数に　ランタイム定数フィールド数集計を　入れ
        ソースコードから　一行読み出し、捨て
        データ終り？　ならば
            打ち切り
        つぎに
        関数定義文字列が　空列？　でなければ
            「　」を　関数定義文字列に　追加し　読み出し文字列ＵＴＦ８を得て　関数定義文字列に　追加し、
            読み出し文字列ＵＴＦ８を得て　右端文字が　’。’に　等しい　ならば
                関数定義文字列をつかい　関数認識構造体で　関数認識し、
                関数認識構造体の　ランタイム定数フィールドを　ランタイム定数フィールドバイナリ集計に　追加し
                関数認識構造体の　ランタイム定数フィールド数を　ランタイム定数フィールド数集計に　入れ

                関数認識構造体の　認識された関数名を　ＵＴＦ８へ変換して
                ＵＴＦ８のランタイム定数フィールドを得て　　
                ランタイム定数フィールドバイナリ集計に　追加し
                ランタイム定数フィールド数集計を　一つ増加させ、

                メソッド名ランタイム定数フィールドインデックスに　ランタイム定数フィールド数集計を　入れ
                
                関数認識構造体の　認識された関数型を　ＵＴＦ８へ変換して
                ＵＴＦ８のランタイム定数フィールドを得て　
                ランタイム定数フィールドバイナリ集計に　追加し
                ランタイム定数フィールド数集計を　一つ増加させ

                メソッド型ランタイム定数フィールドインデックスに　ランタイム定数フィールド数集計を　入れ

                関数認識構造体の　オペコードと引数のデータのバイナリを　メソッドオペコードに　入れ

                関数認識構造体の　ローカル変数数を　メソッドローカル変数個数に　入れ
                関数定義文字列を　クリアし
            つぎに
        つぎに
        読み出し文字列ＵＴＦ８を得て　右端文字が　’は’に　等しい　ならば
            読み出し文字列ＵＴＦ８を得て　関数定義文字列に　追加し、
        つぎに
    繰り返し

    ソースコード名を　４文字だけ　右側削除し、ソースコード名の　純ファイル名を得て
    ランタイム定数フィールド数集計で　クラスのランタイム定数フィールドを取得し
    ランタイム定数フィールド数集計に　入れ
    ランタイム定数フィールドバイナリ集計に　追加し
    
    ランタイム定数フィールド数集計から　３つ　引いたものを　継承クラスランタイム定数フィールドインデックスに　入れ
    ランタイム定数フィールド数集計を　一つ引いたものを　実クラスランタイム定数フィールドインデックスに　入れ
    
    「Code」を　ＵＴＦ８へ変換して　ＵＴＦ８のランタイム定数フィールドを得て
    ランタイム定数フィールドバイナリ集計に　追加し
    ランタイム定数フィールド数集計を　一つ増加させ
    Ｃｏｄｅランタイム定数フィールドインデックスに　ランタイム定数フィールド数集計を　入れ

    ランタイム定数フィールド数集計を　一つ増加させ、
    
    ※マイナーバージョン
    ０を　バイト２書き込みし、

    ※メジャーバージョン
    ５２を　バイト２書き込みし、

    ランタイム定数フィールド数集計を　バイト２書き込みし
    ランタイム定数フィールドバイナリ集計を　ファイル書き込みし

    ※クラスのアクセス修飾子　（Ｐｕｂｌｉｃ）
    「Ｐｕｂｌｉｃ」を　１個　個数指定でアクセス修飾子のデータを書き込み、

    ※このクラスの情報
    実クラスランタイム定数フィールドインデックスを　バイト２書き込みし、

    ※親クラスの情報（Object）
    継承クラスランタイム定数フィールドインデックスを　バイト２書き込みし、

    ※インターフェース個数
    ０を　バイト２書き込みし、

    ※クラスフィールドの数
    ０を　バイト２書き込みし、

    ※メソッドの数
    １を　バイト２書き込みし、
        
        ※一関数始まり
        「Ｐｕｂｌｉｃ」と　「Ｓｔａｔｉｃ」の　２個　個数指定でアクセス修飾子のデータを書き込み、
        メソッド名ランタイム定数フィールドインデックスを　バイト２書き込みし、
        メソッド型ランタイム定数フィールドインデックスを　バイト２書き込みし、
        ※属性数
        １を　バイト２書き込みし
        ※「Ｃｏｄｅ」
        Ｃｏｄｅランタイム定数フィールドインデックスを　バイト２書き込みし
        ※コード属性バイト数
        メソッドオペコードの　バイト数に　１２を　加えたものを　バイト４書き込みし、
        ※スタック量最大値
        ２５６を　バイト２書き込みし、
        ※ローカル変数個数（引数含む）
        メソッドローカル変数個数を　バイト２書き込みし、
        ※オペコードのバイト数
        メソッドオペコードの　バイト数を　バイト４書き込みし、
        メソッドオペコードを　ファイル書き込みし
        ※例外
        ０を　バイト２書き込みし、
        ※その他属性
        ０を　バイト２書き込みし、
        ※一関数終わり

    ※クラス情報
    ０を　バイト２書き込みし
    出力先を　クローズし、
    ソースコードを　クローズし、
    「終了時」で　このメッセージでスタック検査すること。
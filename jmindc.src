「uniencode.src」を　コンパイル。
「unidecode.src」を　コンパイル。
「uopecode.src」を　コンパイル。
「ucompiler.src」を　コンパイル。

出力先は　ファイル。
ソースコードは　ファイル。

（・－＞・）
エラー処理とは
    エラー？　ならば
        エラー文字列を　一行表示し、
        出力先を　クローズして、
        ソースコードを　クローズして、
        重大エラーにする
    つぎに。

（繰り返し数・バイト数　－＞　・）
バイト数指定で書き込みとは
    受け取り数は　変数
    繰り返し数は　変数
    操作桁数は　変数
    マスク値は　変数

    繰り返し数に　入れ
    受け取り数に　入れ、
    繰り返し数を　回数指定して
        回数を　繰り返し数から　引いて、８ビットを　掛けて、　操作桁数に　入れ、
    
        操作桁数ぶんだけ、１を　左シフトしたものを　マスク値に　入れ、

        ７を　回数指定して
            マスク値を　１つだけ　左シフトしたものと、マスク値の　ＯＲを　マスク値に　入れることを
        繰り返す

        マスク値と　受け取り数の　ＡＮＤを　操作桁数だけ　右シフトし　出力先に　一文字書き込みして、
    繰り返し、
    エラー処理すること。

（情報　－＞　・）
バイト１書き込みとは
    １バイトで、バイト数指定で書き込みすること。

（情報　－＞　・）
バイト２書き込みとは
    ２バイトで、バイト数指定で書き込みすること。

（情報　－＞　・）
バイト４書き込みとは
    ４バイトで、バイト数指定で書き込みすること。

（文字列　－＞　・）
ファイル書き込みとは
    出力先に　書き込み、エラー処理すること。

（文字列・文字列・文字列...・文字列個数 -＞　・）
個数指定でアクセス修飾子のデータを書き込むとは
    カウンタは　変数
    カウンタを　クリアし
    回数指定し
        文字列事例をとる
            「Ｐｕｂｌｉｃ」なら　０１Ｈだけ
            「Ｐｒｉｖａｔｅ」なら　０２Ｈだけ
            「Ｐｒｏｔｅｃｔｅｄ」なら　０４Ｈだけ
            「Ｓｔａｔｉｃ」なら　０８Ｈだけ
            「Ｆｉｎａｌ」なら　１０Ｈだけ 
            「Ｓｙｎｃｒｏｎｉｚｅｄ」なら　０２０Ｈだけ
            「Ｖｏｒａｔｉｌｅ」なら　０４０Ｈだけ
            「Ｂｒｉｄｇｅ」なら　０４０Ｈだけ
            「Ｔｒａｎｓｉｅｎｔ」なら　０８０Ｈだけ
            「Ｖａｒａｒｇｓ」なら　０８０Ｈだけ
            「Ｎａｔｉｖｅ」なら　０１００Ｈだけ
            「Ａｂｓｔｒｕｃｔ」なら　０４００Ｈだけ
            「Ｓｔｒｉｃｔ」なら　０８００Ｈだけ
            「Ｓｙｎｔｈｅｔｉｃ」なら　０１０００Ｈだけ
            「Ｅｎｕｍ」なら　０４０００Ｈだけ
            例外なら　００Ｈだけ
        事例終わり、
        カウンタを　増加させ、
    繰り返し
    カウンタを　バイト２書き込みすること。

（文字列　－＞　・）
文字列とバイト数をＵＴＦ８で書き込むとは
    ＳＪＩＳ→ＵＴＦ８変換して
    複写し、　バイト数を　バイト２書き込みし、
    ファイル書き込みすること。

メインとは
    ソースコード名は　文字列実体　長さ　１００桁
    関数定義文字列は　文字列実体　長さ　６００桁

    読み出し文字列ＵＴＦ８を得るとは
        読み出し文字列を　ＵＴＦ８→ＳＪＩＳ変換

    本体とは
    ソースコード名を　クリアし
    カレントディレクトリと　起動引数（１個目）で　絶対パスと相対パスをマージし　複写して　一行表示したのち　ソースコード名に　追加し
    関数定義文字列を　クリアし

    動的単語情報を初期化し、

　　Unicodeエンコードテーブルを読み出しし、　偽？
　　　　ならば　重大エラー
    つぎに

　　Unicodeデコードテーブルを読み出しし、　偽？
　　　　ならば　重大エラー
    つぎに

    起動引数個数が　０に　等しい　ならば
        「起動引数を与えて下さい」を　一行表示し、
        実行終わり、
    つぎに

    ソースコード名で　ソースコードを　オープンし、
    エラー処理し、

    ソースコード名の　主ファイル名を得て、
    「.class」を　合成したもので　出力先を　新規オープンし、
    エラー処理し、
    
    「ソースコード読み出し前」で　このメッセージでスタック検査し
    ここから 
        ソースコードから 一行読み出し、捨て
        データ終り？ ならば
            打ち切り 
        つぎに 
        関数定義文字列が　空列？　でなければ
            「　」を　関数定義文字列に　追加し　読み出し文字列ＵＴＦ８を得て　関数定義文字列に　追加し、
            読み出し文字列ＵＴＦ８を得て　右端文字が　’。’に　等しい　ならば
                関数定義文字列をつかい　関数認識し、
                関数定義文字列を　クリアし
            つぎに
        つぎに
        読み出し文字列ＵＴＦ８を得て　右端文字が　’は’に　等しい　ならば
            読み出し文字列ＵＴＦ８を得て　関数定義文字列に　追加し、
        つぎに
    繰り返し

    出力先を　クローズし、
    ソースコードを　クローズし、
    「終了時」で　このメッセージでスタック検査すること。
※「utility\ubytecomposition.src」を　コンパイル。

※何もしない。
※JVM(・－＞・)
※Mind(・－＞情報数値・バイト数)
nopのデータを得るとは、
    ００Ｈと　１バイトを　返すこと。

※nullをスタックに積む。
※JVM(・ー＞null)
※Mind(・－＞情報数値・バイト数)
aconst_nullのデータを得るとは、
    ０１Ｈと　１バイトを　返すこと。

※(-1～5)(端を含むint)のいずれかをスタックに積む。
※JVM(・ー＞(1,0,1,2,3,4,5))
※Mind((－１ ～　５)－＞情報数値・バイト数)
iconst_iのデータを得るとは、
    ００３Ｈと　加えたものと、１バイトを　返すこと。

※(0, 1)(long)のいずれかをスタックに積む。
※JVM(・ー＞(0, 1))
※Mind((０ or １)－＞情報数値・バイト数)
lconst_lのデータを得るとは、
    ００９Ｈと　加えたものと、１バイトを　返すこと。

※(0.0F, 1.0F, 2.0F)(float型)のいずれかをスタックに積む。
※JVM(・ー＞(0.0F, 1.0F, 2.0F))
※Mind((０ or １ or ２)－＞情報数値・バイト数)
fconst_fのデータを得るとは、
    ００ＢＨと　加えたものと、１バイトを　返すこと。

※(0.0, 1.0)(double)のいずれかをスタックに積む。
※JVM(・ー＞(0.0, 1.0))
※Mind((０ or １)－＞情報数値・バイト数)
dconst_dのデータを得るとは、
    ００ＥＨと　加えたものと、１バイトを　返すこと。

※１バイト、スタックに積む
※JVM(・ー＞データ（１バイト）)
※Mind(積むバイト－＞情報数値・バイト数)
bipushのデータを得るとは、
    情報は　変数
    情報に　入れて、
    １０Ｈと　情報を　一バイト合成したものと
    ２バイトを　返すこと。

※shortの数値を一つ、スタックに積む
※JVM(・ー＞データ（２バイト）)
※Mind(積むバイト－＞情報数値・バイト数)
sipushのデータを得るとは、
    情報は　変数
    情報に　入れて、
    １１Ｈと　情報を　二バイト合成したものと
    ３バイトを　返すこと。

※ランタイム定数フィールドから一つスタックに置く。
※JVM(・－＞指定された値)
※Mind(ランタイム定数フィールドのインデックス（１バイト）－＞情報数値・バイト数)
ldcのデータを得るとは、
    情報は　変数
    情報に　入れて、
    １２Ｈと　情報を　一バイト合成したものと
    ２バイトを　返すこと。

※ランタイム定数フィールドから一つスタックに置く。(インデックス２バイト)
※JVM(・－＞指定された値)
※Mind(ランタイム定数フィールドのインデックス（２バイト）－＞情報数値・バイト数)
ldc_wのデータを得るとは、
    情報は　変数
    情報に　入れて、
    １３Ｈと　情報を　二バイト合成したものと
    ３バイトを　返すこと。

※ランタイム定数フィールドから一つ(longかdouble)スタックに置く。(インデックス２バイト)
※JVM(・－＞指定された値)
※Mind(ランタイム定数フィールドのインデックス（２バイト）－＞情報数値・バイト数)
ldc2_wのデータを得るとは、
    情報は　変数
    情報に　入れて、
    １４Ｈと　情報を　二バイト合成したものと
    ３バイトを　返すこと。

※ローカル変数の中身（int）をスタックに積む。
※JVM(・－＞そのローカル変数の参照)
※Mind(ローカル変数の番号（１バイト）－＞情報数値・バイト数)
iloadのデータを得るとは、
    情報は　変数
    情報に　入れて、
    １５Ｈと　情報を　一バイト合成したものと
    ２バイトを　返すこと。

※ローカル変数の中身（long型）をスタックに積む。
※JVM(・－＞そのローカル変数の参照)
※Mind(ローカル変数の番号（１バイト）－＞情報数値・バイト数)
lloadのデータを得るとは、
    情報は　変数
    情報に　入れて、
    １６Ｈと　情報を　一バイト合成したものと
    ２バイトを　返すこと。

※ローカル変数の中身（float型）をスタックに積む。
※JVM(・－＞そのローカル変数の参照)
※Mind(ローカル変数の番号（１バイト）－＞情報数値・バイト数)
floadのデータを得るとは、
    情報は　変数
    情報に　入れて、
    １７Ｈと　情報を　一バイト合成したものと
    ２バイトを　返すこと。

※ローカル変数の中身（ダブル型）をスタックに積む。
※JVM(・－＞そのローカル変数の参照)
※Mind(ローカル変数の番号（１バイト）－＞情報数値・バイト数)
dloadのデータを得るとは、
    情報は　変数
    情報に　入れて、
    １８Ｈと　情報を　一バイト合成したものと
    ２バイトを　返すこと。

※ローカル変数の中身（参照型）をスタックに積む。
※JVM(・－＞そのローカル変数の参照)
※Mind(ローカル変数の番号（１バイト）－＞情報数値・バイト数)
aloadのデータを得るとは、
    情報は　変数
    情報に　入れて、
    １９Ｈと　情報を　一バイト合成したものと
    ２バイトを　返すこと。

※ローカル変数の中身（int）をスタックに積む。(iloadと同じ)
※JVM(・－＞そのローカル変数の参照)
※Mind(ローカル変数の番号（１バイト）－＞情報数値・バイト数)
iload_nのデータを得るとは、
    １ＡＨと　加えたものと
    １バイトを　返すこと。

※ローカル変数の中身（long型）をスタックに積む。(lloadと同じ)
※JVM(・－＞そのローカル変数の参照)
※Mind(ローカル変数の番号（１バイト）－＞情報数値・バイト数)
lload_nのデータを得るとは、
    １ＥＨと　加えたものと
    １バイトを　返すこと。

※ローカル変数の中身（float型）をスタックに積む。(floadと同じ)
※JVM(・－＞そのローカル変数の参照)
※Mind(ローカル変数の番号（１バイト）－＞情報数値・バイト数)
fload_nのデータを得るとは、
    ２２Ｈと　加えたものと
    １バイトを　返すこと。

※ローカル変数の中身（ダブル型）をスタックに積む。(aloadと同じ)
※JVM(・－＞そのローカル変数の参照)
※Mind(ローカル変数の番号（１バイト）－＞情報数値・バイト数)
dload_nのデータを得るとは、
    ２６Ｈと　加えたものと
    １バイトを　返すこと。

※ローカル変数の中身（参照型）をスタックに積む。(aloadと同じ)
※JVM(・－＞そのローカル変数の参照)
※Mind(ローカル変数の番号（１バイト）－＞情報数値・バイト数)
aload_nのデータを得るとは、
    ２ＡＨと　加えたものと
    １バイトを　返すこと。

※与えられた配列とインデックスからその中のデータ（int）を得る。
※JVM(配列参照・インデックスー＞その中のデータ)
※Mind(・－＞情報数値・バイト数)
ialoadのデータを得るとは、
    ２ＥＨと　１バイトを　返すこと。

※与えられた配列とインデックスからその中のデータ（long）を得る。
※JVM(配列参照・インデックスー＞その中のデータ)
※Mind(・－＞情報数値・バイト数)
laloadのデータを得るとは、
    ２ＦＨと　１バイトを　返すこと。

※与えられた配列とインデックスからその中のデータ（float型）を得る。
※JVM(配列参照・インデックスー＞その中のデータ)
※Mind(・－＞情報数値・バイト数)
faloadのデータを得るとは、
    ３０Ｈと　１バイトを　返すこと。

※与えられた配列とインデックスからその中のデータ（ダブル型）を得る。
※JVM(配列参照・インデックスー＞その中のデータ)
※Mind(・－＞情報数値・バイト数)
daloadのデータを得るとは、
    ３１Ｈと　１バイトを　返すこと。

※与えられた配列とインデックスからその中のデータ（参照型）を得る。
※JVM(配列参照・インデックスー＞その中のデータ)
※Mind(・－＞情報数値・バイト数)
aaloadのデータを得るとは、
    ３２Ｈと　１バイトを　返すこと。

※与えられた配列とインデックスからその中のデータ（バイト型・真偽値）を得る。
※JVM(配列参照・インデックスー＞その中のデータ)
※Mind(・－＞情報数値・バイト数)
baloadのデータを得るとは、
    ３３Ｈと　１バイトを　返すこと。

※与えられた配列とインデックスからその中のデータ（文字型）を得る。
※JVM(配列参照・インデックスー＞その中のデータ)
※Mind(・－＞情報数値・バイト数)
caloadのデータを得るとは、
    ３４Ｈと　１バイトを　返すこと。

※与えられた配列とインデックスからその中のデータ（short）を得る。
※JVM(配列参照・インデックスー＞その中のデータ)
※Mind(・－＞情報数値・バイト数)
saloadのデータを得るとは、
    ３５Ｈと　１バイトを　返すこと。

※ローカル変数にデータ（int）を代入する。
※JVM(データ参照－＞・)
※Mind(ローカル変数のインデックス－＞情報数値・バイト数)
istoreのデータを得るとは
    情報は　変数
    情報に　入れて、
    ３６Ｈと　情報を　一バイト合成したものと
    ２バイトを　返すこと。

※ローカル変数にデータ（long）を代入する。
※JVM(データ参照－＞・)
※Mind(ローカル変数のインデックス－＞情報数値・バイト数)
lstoreのデータを得るとは
    情報は　変数
    情報に　入れて、
    ３７Ｈと　情報を　一バイト合成したものと
    ２バイトを　返すこと。

※ローカル変数にデータ（float型）を代入する。
※JVM(データ(float)－＞・)
※Mind(ローカル変数のインデックス－＞情報数値・バイト数)
fstoreのデータを得るとは
    情報は　変数
    情報に　入れて、
    ３８Ｈと　情報を　一バイト合成したものと
    ２バイトを　返すこと。

※ローカル変数にデータ（ダブル型）を代入する。
※JVM(データ(ダブル)－＞・)
※Mind(ローカル変数のインデックス－＞情報数値・バイト数)
dstoreのデータを得るとは
    情報は　変数
    情報に　入れて、
    ３９Ｈと　情報を　一バイト合成したものと
    ２バイトを　返すこと。

※ローカル変数にデータ（参照型）を代入する。
※JVM(データ参照－＞・)
※Mind(ローカル変数のインデックス－＞情報数値・バイト数)
astoreのデータを得るとは
    情報は　変数
    情報に　入れて、
    ３ＡＨと　情報を　一バイト合成したものと
    ２バイトを　返すこと。

※ローカル変数にデータ（int）を代入する。(istoreと同じだが、0-3の範囲でしか使用できない)
※JVM(データ参照ー＞・)
※Mind(ローカル変数のインデックス－＞情報数値・バイト数)
istore_nのデータを得るとは、
    ３ＢＨと　加えたものと
    １バイトを　返すこと。

※ローカル変数にデータ（long）を代入する。(lstoreと同じだが、0-3の範囲でしか使用できない)
※JVM(データ参照ー＞・)
※Mind(ローカル変数のインデックス－＞情報数値・バイト数)
lstore_nのデータを得るとは、
    ３ＦＨと　加えたものと
    １バイトを　返すこと。

※ローカル変数にデータ（float型）を代入する。fstoreと同じだが、0-3の範囲でしか使用できない)
※JVM(データ(ダブル型)ー＞・)
※Mind(ローカル変数のインデックス－＞情報数値・バイト数)
fstore_nのデータを得るとは、
    ４３Ｈと　加えたものと
    １バイトを　返すこと。

※ローカル変数にデータ（ダブル型）を代入する。(dstoreと同じだが、0-3の範囲でしか使用できない)
※JVM(データ(ダブル型)ー＞・)
※Mind(ローカル変数のインデックス－＞情報数値・バイト数)
dstore_nのデータを得るとは、
    ４７Ｈと　加えたものと
    １バイトを　返すこと。

※ローカル変数にデータ（参照型）を代入する。(astoreと同じだが、0-3の範囲でしか使用できない)
※JVM(データ参照ー＞・)
※Mind(ローカル変数のインデックス－＞情報数値・バイト数)
astore_nのデータを得るとは、
    ４ＢＨと　加えたものと
    １バイトを　返すこと。

※与えられたデータ（int）を、与えられた配列とインデックスの場所に入れる。
※JVM(配列参照・インデックス・データー＞・)
※Mind(・－＞情報数値・バイト数)
iastoreのデータを得るとは、
    ４ＦＨと　１バイトを　返すこと。

※与えられたデータ（long）を、与えられた配列とインデックスの場所に入れる。
※JVM(配列参照・インデックス・データー＞・)
※Mind(・－＞情報数値・バイト数)
lastoreのデータを得るとは、
    ５０Ｈと　１バイトを　返すこと。
    
※与えられたデータ（float型）を、与えられた配列とインデックスの場所に入れる。
※JVM(配列参照・インデックス・データー＞・)
※Mind(・－＞情報数値・バイト数)
fastoreのデータを得るとは、
    ５１Ｈと　１バイトを　返すこと。

※与えられたデータ（ダブル型）を、与えられた配列とインデックスの場所に入れる。
※JVM(配列参照・インデックス・データー＞・)
※Mind(・－＞情報数値・バイト数)
dastoreのデータを得るとは、
    ５２Ｈと　１バイトを　返すこと。

※与えられたデータ（参照型）を、与えられた配列とインデックスの場所に入れる。
※JVM(配列参照・インデックス・データー＞・)
※Mind(・－＞情報数値・バイト数)
aastoreのデータを得るとは、
    ５３Ｈと　１バイトを　返すこと。

※与えられたデータ（バイト型・真偽値）を、与えられた配列とインデックスの場所に入れる。
※JVM(配列参照・インデックス・データー＞・)
※Mind(・－＞情報数値・バイト数)
bastoreのデータを得るとは、
    ５４Ｈと　１バイトを　返すこと。

※与えられたデータ（文字型）を、与えられた配列とインデックスの場所に入れる。
※JVM(配列参照・インデックス・データー＞・)
※Mind(・－＞情報数値・バイト数)
castoreのデータを得るとは、
    ５５Ｈと　１バイトを　返すこと。

※与えられたデータ（short）を、与えられた配列とインデックスの場所に入れる。
※JVM(配列参照・インデックス・データー＞・)
※Mind(・－＞情報数値・バイト数)
sastoreのデータを得るとは、
    ５６Ｈと　１バイトを　返すこと。

※スタックを一つ取り出して...捨てる？
※JVM(データ－＞・)
※Mind(・－＞情報数値・バイト数)
popのデータを得るとは、
    ５７Ｈと　１バイトを　返すこと。
    
※スタックを二つ取り出して...捨てる？
※JVM(データ２・データ１－＞・)
※Mind(・－＞情報数値・バイト数)
pop2のデータを得るとは、
    ５８Ｈと　１バイトを　返すこと。

※スタックの、一番上のデータを複製し、スタックに積む。
※JVM(データ１ー＞データ１・データ１)
※Mind(・－＞情報数値・バイト数)
dupのデータを得るとは、
    ５９Ｈと　１バイトを　返すこと。

※スタックの、一番上のデータを複製し、スタックに積む。（一つ下に積まれる）
※JVM(データ２・データ１ー＞データ１・データ２・データ１)
※Mind(・－＞情報数値・バイト数)
dup_x1のデータを得るとは、
    ５ＡＨと　１バイトを　返すこと。

※スタックの、一番上のデータを複製し、スタックに積む。（二つ下に積まれる）
※JVM(データ３・データ２・データ１ー＞データ１・データ３・データ２・データ１)
※Mind(・－＞情報数値・バイト数)
dup_x2のデータを得るとは、
    ５ＢＨと　１バイトを　返すこと。

※スタックの、一番上の二つのデータを複製し、その順でスタックに積む。
※JVM(データ２・データ１ー＞データ２・データ１・データ２・データ１)
※Mind(・－＞情報数値・バイト数)
dup2のデータを得るとは、
    ５ＣＨと　１バイトを　返すこと。

※スタックの、一番上の二つのデータを複製し、スタックに積む。（一つ下に積まれる）
※JVM(データ３・データ２・データ１ー＞
※　データ２・データ１・データ３・データ２・データ１)
※Mind(・－＞情報数値・バイト数)
dup2_x1のデータを得るとは、
    ５ＤＨと　１バイトを　返すこと。

※スタックの、一番上の二つのデータを複製し、スタックに積む。（二つ下に積まれる）
※JVM(データ４・データ３・データ２・データ１ー＞
※　データ２・データ１・データ４・データ３・データ２・データ１)
※Mind(・－＞情報数値・バイト数)
dup2_x2のデータを得るとは、
    ５ＥＨと　１バイトを　返すこと。
    
※スタックの一番上のデータ２つをスワップする。
※JVM(データ２・データ１ー＞データ１・データ２)
※Mind(・－＞情報数値・バイト数)
swapのデータを得るとは、
    ５ＦＨと　１バイトを　返すこと。

※int同士を加算する。
※JVM(データ１・データ２ー＞データ)
※Mind(・－＞情報数値・バイト数)
iaddのデータを得るとは、
    ６０Ｈと、１バイトを　返すこと。

※long同士を加算する。
※JVM(データ１・データ２ー＞(データ１+データ２))
※Mind(・－＞情報数値・バイト数)
laddのデータを得るとは、
    ６１Ｈと、１バイトを　返すこと。

※float同士を加算する。
※JVM(データ１・データ２ー＞加算された数値)
※Mind(・－＞情報数値・バイト数)
faddのデータを得るとは、
    ６２Ｈと、１バイトを　返すこと。

※double同士を加算する。
※JVM(データ１・データ２ー＞データ)
※Mind(・－＞情報数値・バイト数)
daddのデータを得るとは、
    ６３Ｈと、１バイトを　返すこと。

※int型２つをスタックから取り出し、減算したものを、スタックに積む。
※JVM(データ１・データ２ー＞(データ１-データ２))
※Mind(・－＞情報数値・バイト数)
isubのデータを得るとは、
    ６４Ｈと　１バイトを　返すこと。

※long型２つをスタックから取り出し、減算したものを、スタックに積む。
※JVM(データ１・データ２ー＞(データ１-データ２))
※Mind(・－＞情報数値・バイト数)
lsubのデータを得るとは、
    ６７Ｈと　１バイトを　返すこと。

※float型２つをスタックから取り出し、減算したものを、スタックに積む。
※JVM(データ１・データ２ー＞(データ１-データ２))
※Mind(・－＞情報数値・バイト数)
fsubのデータを得るとは、
    ６６Ｈと　１バイトを　返すこと。

※double型２つをスタックから取り出し、減算したものを、スタックに積む。
※JVM(データ１・データ２ー＞(データ１-データ２))
※Mind(・－＞情報数値・バイト数)
dsubのデータを得るとは、
    ６７Ｈと　１バイトを　返すこと。

※int型２つをスタックから取り出し、乗算したものを、スタックに積む。
※JVM(データ１・データ２ー＞(データ１*データ２))
※Mind(・－＞情報数値・バイト数)
imulのデータを得るとは、
    ６８Ｈと　１バイトを　返すこと。

※long型２つをスタックから取り出し、乗算したものを、スタックに積む。
※JVM(データ１・データ２ー＞(データ１*データ２))
※Mind(・－＞情報数値・バイト数)
lmulのデータを得るとは、
    ６９Ｈと　１バイトを　返すこと。

※float型２つをスタックから取り出し、乗算したものを、スタックに積む。
※JVM(データ１・データ２ー＞(データ１*データ２))
※Mind(・－＞情報数値・バイト数)
fmulのデータを得るとは、
    ６ＡＨと　１バイトを　返すこと。
    
※ダブル型２つをスタックから取り出し、乗算したものを、スタックに積む。
※JVM(データ１・データ２ー＞(データ１*データ２))
※Mind(・－＞情報数値・バイト数)
dmulのデータを得るとは、
    ６ＢＨと　１バイトを　返すこと。

※intのデータ２つをスタックから取り出し、除算したものを、スタックに積む。
※JVM(データ１・データ２ー＞(データ１/データ２))
※Mind(・－＞情報数値・バイト数)
idivのデータを得るとは、
    ６ＣＨと　１バイトを　返すこと。

※long型２つをスタックから取り出し、除算したものを、スタックに積む。
※JVM(データ１・データ２ー＞(データ１/データ２))
※Mind(・－＞情報数値・バイト数)
ldivのデータを得るとは、
    ６ＤＨと　１バイトを　返すこと。

※float型２つをスタックから取り出し、除算したものを、スタックに積む。
※JVM(データ１・データ２ー＞(データ１/データ２))
※Mind(・－＞情報数値・バイト数)
fdivのデータを得るとは、
    ６ＥＨと　１バイトを　返すこと。

※ダブル型２つをスタックから取り出し、除算したものを、スタックに積む。
※JVM(データ１・データ２ー＞(データ１/データ２))
※Mind(・－＞情報数値・バイト数)
ddivのデータを得るとは、
    ６ＦＨと　１バイトを　返すこと。

※int型２つをスタックから取り出し、剰余計算したものを、スタックに積む。
※JVM(データ１・データ２ー＞(データ１%データ２))
※Mind(・－＞情報数値・バイト数)
iremのデータを得るとは、
    ７０Ｈと　１バイトを　返すこと。

※long型２つをスタックから取り出し、剰余計算したものを、スタックに積む。
※JVM(データ１・データ２ー＞(データ１%データ２))
※Mind(・－＞情報数値・バイト数)
lremのデータを得るとは、
    ７１Ｈと　１バイトを　返すこと。
    
※float型２つをスタックから取り出し、剰余計算したものを、スタックに積む。
※JVM(データ１・データ２ー＞(データ１%データ２))
※Mind(・－＞情報数値・バイト数)
fremのデータを得るとは、
    ７２Ｈと　１バイトを　返すこと。

※ダブル型２つをスタックから取り出し、剰余計算したものを、スタックに積む。
※JVM(データ１・データ２ー＞(データ１%データ２))
※Mind(・－＞情報数値・バイト数)
dremのデータを得るとは、
    ７３Ｈと　１バイトを　返すこと。

※int型数値をスタックから取り出し、-1を掛けてスタックに積む。
※JVM(データ１ー＞(-データ１))
※Mind(・－＞情報数値・バイト数)
inegのデータを得るとは、
    ７４Ｈと　１バイトを　返すこと。

※long型数値をスタックから取り出し、-1を掛けてスタックに積む。
※JVM(データ１ー＞(-データ１))
※Mind(・－＞情報数値・バイト数)
lnegのデータを得るとは、
    ７５Ｈと　１バイトを　返すこと。

※float型数値をスタックから取り出し、-1を掛けてスタックに積む。
※JVM(データ１ー＞(-データ１))
※Mind(・－＞情報数値・バイト数)
fnegのデータを得るとは、
    ７６Ｈと　１バイトを　返すこと。

※double型数値をスタックから取り出し、-1を掛けてスタックに積む。
※JVM(データ１ー＞(-データ１))
※Mind(・－＞情報数値・バイト数)
dnegのデータを得るとは、
    ７７Ｈと　１バイトを　返すこと。

※データ(int型)をスタックから取り出し、指定数左シフトし、スタックに積む。
※JVM(データ１・データ２ー＞(データ１<<データ２))
※Mind(・－＞情報数値・バイト数)
ishlのデータを得るとは、
    ７８Ｈと　１バイトを　返すこと。    
        
※データ(long型)をスタックから取り出し、数学的に指定数左シフトし、スタックに積む。
※JVM(データ１・データ２ー＞(データ１<<データ２))
※Mind(・－＞情報数値・バイト数)
lshlのデータを得るとは、
    ７９Ｈと　１バイトを　返すこと。
    
※データ(int型)をスタックから取り出し、数学的に指定数右シフトし、スタックに積む。
※JVM(データ１・データ２ー＞(データ１>>データ２))
※Mind(・－＞情報数値・バイト数)
ishrのデータを得るとは、
    ７ＡＨと　１バイトを　返すこと。

※データ(long型)をスタックから取り出し、数学的に指定数右シフトし、スタックに積む。
※JVM(データ１・データ２ー＞(データ１>>データ２))
※Mind(・－＞情報数値・バイト数)
lshrのデータを得るとは、
    ７ＢＨと　１バイトを　返すこと。

※データ(int型)をスタックから取り出し、指定数右シフトし、スタックに積む。
※JVM(データ１・データ２ー＞(データ１>>データ２))
※Mind(・－＞情報数値・バイト数)
iushrのデータを得るとは、
    ７ＣＨと　１バイトを　返すこと。
    
※データ(long型)をスタックから取り出し、ロジック的に指定数右シフトし、スタックに積む。
※JVM(データ１・データ２ー＞(データ１>>データ２))
※Mind(・－＞情報数値・バイト数)
lushrのデータを得るとは、
    ７ＤＨと　１バイトを　返すこと。
    
※スタック二つ(int)をとり、それらのAND(ビット演算)をスタックに積む。
※JVM(データ１・データ２ー＞(データ１ & データ２))
※Mind(・－＞情報数値・バイト数)
iandのデータを得るとは、
    ７ＥＨと　１バイトを　返すこと。
    
※スタック二つ(long)をとり、それらのAND(ビット演算)をスタックに積む。
※JVM(データ１・データ２ー＞(データ１ & データ２))
※Mind(・－＞情報数値・バイト数)
landのデータを得るとは、
    ７ＦＨと　１バイトを　返すこと。

※スタック二つ(int)をとり、それらのOR(ビット演算)をスタックに積む。
※JVM(データ１・データ２ー＞(データ１ | データ２))
※Mind(・－＞情報数値・バイト数)
iorのデータを得るとは、
    ８０Ｈと　１バイトを　返すこと。

※スタック二つ(long)をとり、それらのOR(ビット演算)をスタックに積む。
※JVM(データ１・データ２ー＞(データ１ | データ２))
※Mind(・－＞情報数値・バイト数)
lorのデータを得るとは、
    ８１Ｈと　１バイトを　返すこと。
    
※スタック二つ(int)をとり、それらのXOR(ビット演算)をスタックに積む。
※JVM(データ１・データ２ー＞(データ１ ^ データ２))
※Mind(・－＞情報数値・バイト数)
ixorのデータを得るとは、
    ８２Ｈと　１バイトを　返すこと。
    
※スタック二つ(long)をとり、それらのXOR(ビット演算)をスタックに積む。
※JVM(データ１・データ２ー＞(データ１ ^ データ２))
※Mind(・－＞情報数値・バイト数)
lxorのデータを得るとは、
    ８３Ｈと　１バイトを　返すこと。

iincデータバイト数は　定数　３。
※指定された変数の中身を指定された数だけ増加させる。
※JVM(・ー＞・)
※Mind(増加させる変数のインデックス・増加させる数－＞情報数値・バイト数)
iincのデータを得るとは、
    情報１は　変数
    情報２は　変数
    情報１と　情報２に　入れて、
    ８４Ｈと　情報１を　一バイト合成し、
    情報２を　一バイト符号付き合成したものと、
    iincデータバイト数を　返すこと。

※intをlongにキャストする。
※JVM(データー＞データ(キャスト済み))
※Mind(・－＞情報数値・バイト数)
i2lのデータを得るとは、
    ８５Ｈと　１バイトを　返すこと。
    
※intをfloatにキャストする。
※JVM(データー＞データ(キャスト済み))
※Mind(・－＞情報数値・バイト数)
i2fのデータを得るとは、
    ８６Ｈと　１バイトを　返すこと。
    
※intをdoubleにキャストする。
※JVM(データー＞データ(キャスト済み))
※Mind(・－＞情報数値・バイト数)
i2dのデータを得るとは、
    ８７Ｈと　１バイトを　返すこと。
    
※longをintにキャストする。
※JVM(データー＞データ(キャスト済み))
※Mind(・－＞情報数値・バイト数)
l2iのデータを得るとは、
    ８８Ｈと　１バイトを　返すこと。
    
※longをfloatにキャストする。
※JVM(データー＞データ(キャスト済み))
※Mind(・－＞情報数値・バイト数)
l2fのデータを得るとは、
    ８９Ｈと　１バイトを　返すこと。

※longをdoubleにキャストする。
※JVM(データー＞データ(キャスト済み))
※Mind(・－＞情報数値・バイト数)
l2dのデータを得るとは、
    ８ＡＨと　１バイトを　返すこと。

※floatをintにキャストする。
※JVM(データー＞データ(キャスト済み))
※Mind(・－＞情報数値・バイト数)
f2iのデータを得るとは、
    ８ＢＨと　１バイトを　返すこと。
    
※floatをlongにキャストする。
※JVM(データー＞データ(キャスト済み))
※Mind(・－＞情報数値・バイト数)
f2lのデータを得るとは、
    ８ＣＨと　１バイトを　返すこと。

※floatをdoubleにキャストする。
※JVM(データー＞データ(キャスト済み))
※Mind(・－＞情報数値・バイト数)
f2dのデータを得るとは、
    ８ＤＨと　１バイトを　返すこと。

※doubleをintにキャストする。
※JVM(データー＞データ(キャスト済み))
※Mind(・－＞情報数値・バイト数)
d2iのデータを得るとは、
    ８ＥＨと、１バイトを　返すこと。

※doubleをlongにキャストする。
※JVM(データー＞データ(キャスト済み))
※Mind(・－＞情報数値・バイト数)
d2lのデータを得るとは、
    ８ＦＨと、１バイトを　返すこと。

※doubleをfloatにキャストする。
※JVM(データー＞データ(キャスト済み))
※Mind(・－＞情報数値・バイト数)
d2fのデータを得るとは、
    ９０Ｈと、１バイトを　返すこと。

※intをbyteにキャストする。
※JVM(データー＞データ(キャスト済み))
※Mind(・－＞情報数値・バイト数)
i2bのデータを得るとは、
    ９１Ｈと　１バイトを　返すこと。

※intをcharにキャストする。
※JVM(データー＞データ(キャスト済み))
※Mind(・－＞情報数値・バイト数)
i2cのデータを得るとは、
    ９２Ｈと　１バイトを　返すこと。
    
※intをshortにキャストする。
※JVM(データー＞データ(キャスト済み))
※Mind(・－＞情報数値・バイト数)
i2sのデータを得るとは、
    ９３Ｈと　１バイトを　返すこと。

※long型を、比較し、(-1,0,1)のいずれかを返す。
※JVM(データ１・データ２ー＞比較結果)
※Mind(・－＞情報数値・バイト数)
lcmpのデータを得るとは、
    ９４Ｈと　１バイトを　返すこと。

※float型を、比較し、(-1,0,1)のいずれかを返す。(どちらかNaNがある場合、-１を返す)
※JVM(データ１・データ２ー＞比較結果)
※Mind(・－＞情報数値・バイト数)
fcmplのデータを得るとは、
    ９５Ｈと　１バイトを　返すこと。

※ダブル型を、比較し、(-1,0,1)のいずれかを返す。(どちらかNaNがある場合、１を返す)
※JVM(データ１・データ２ー＞比較結果)
※Mind(・－＞情報数値・バイト数)
fcmpgのデータを得るとは、
    ９６Ｈと　１バイトを　返すこと。

※ダブル型を、比較し、(-1,0,1)のいずれかを返す。(どちらかNaNがある場合、-１を返す)
※JVM(データ１・データ２ー＞比較結果)
※Mind(・－＞情報数値・バイト数)
dcmplのデータを得るとは、
    ９７Ｈと　１バイトを　返すこと。

※ダブル型を、比較し、(-1,0,1)のいずれかを返す。(どちらかNaNがある場合、１を返す)
※JVM(データ１・データ２ー＞比較結果)
※Mind(・－＞情報数値・バイト数)
dcmpgのデータを得るとは、
    ９８Ｈと　１バイトを　返すこと。
    
※一つのデータ(int)と０が、等値ならアドレスで指定されたオペコードの場所に飛ぶ。
※JVM(データ１ー＞・)
※Mind(跳ぶオペコードのアドレス－＞情報数値・バイト数)
ifeqのデータを得るとは、
    情報は　変数
    情報に　入れて、
    ９９Ｈと　情報を　二バイト合成したものと、
    ３バイトを　返すこと。

※一つのデータ(int)と０が、等値で無いならアドレスで指定されたオペコードの場所に飛ぶ。
※JVM(データ１ー＞・)
※Mind(跳ぶオペコードのアドレス－＞情報数値・バイト数)
ifneのデータを得るとは、
    情報は　変数
    情報に　入れて、
    ９ＡＨと　情報を　二バイト合成したものと、
    ３バイトを　返すこと。
    
※一つのデータ(int)が、０より小さい(データ１ < 0)ならアドレスで指定されたオペコードの場所に飛ぶ。
※JVM(データ１ー＞・)
※Mind(跳ぶオペコードのアドレス－＞情報数値・バイト数)
ifltのデータを得るとは、
    情報は　変数
    情報に　入れて、
    ９ＢＨと　情報を　二バイト合成したものと、
    ３バイトを　返すこと。
    
※一つのデータ(int)が、０より大きいか等しい(データ１ >= 0)ならアドレスで指定されたオペコードの場所に飛ぶ。
※JVM(データ１ー＞・)
※Mind(跳ぶオペコードのアドレス－＞情報数値・バイト数)
ifgeのデータを得るとは、
    情報は　変数
    情報に　入れて、
    ９ＣＨと　情報を　二バイト合成したものと、
    ３バイトを　返すこと。
    
※一つのデータ(int)が、０より大きい(データ１ > 0)ならアドレスで指定されたオペコードの場所に飛ぶ。
※JVM(データ１ー＞0)
※Mind(跳ぶオペコードのアドレス－＞情報数値・バイト数)
ifgtのデータを得るとは、
    情報は　変数
    情報に　入れて、
    ９ＤＨと　情報を　二バイト合成したものと、
    ３バイトを　返すこと。
    
※一つのデータ(int)が、０より小さいか等しい(データ１ <= 0)ならアドレスで指定されたオペコードの場所に飛ぶ。
※JVM(データ１ー＞・)
※Mind(跳ぶオペコードのアドレス－＞情報数値・バイト数)
ifleのデータを得るとは、
    情報は　変数
    情報に　入れて、
    ９ＥＨと　情報を　二バイト合成したものと、
    ３バイトを　返すこと。
    
※二つのデータ(int)を比較し、等値ならアドレスで指定されたオペコードの場所に飛ぶ。
※JVM(データ１・データ２ー＞・)
※Mind(跳ぶオペコードのアドレス－＞情報数値・バイト数)
if_icmpeqのデータを得るとは、
    情報は　変数
    情報に　入れて、
    ９ＦＨと　情報を　二バイト合成したものと、
    ３バイトを　返すこと。

※二つのデータ(int)を比較し、等値で無いならアドレスで指定されたオペコードの場所に飛ぶ。
※JVM(データ１・データ２ー＞・)
※Mind(跳ぶオペコードのアドレス－＞情報数値・バイト数)
if_icmpneのデータを得るとは、
    情報は　変数
    情報に　入れて、
    ０Ａ０Ｈと　情報を　二バイト合成したものと、
    ３バイトを　返すこと。
    
※二つのデータ(int)を比較し、小さい(データ１ < データ２)ならアドレスで指定されたオペコードの場所に飛ぶ。
※JVM(データ１・データ２ー＞・)
※Mind(跳ぶオペコードのアドレス－＞情報数値・バイト数)
if_icmpltのデータを得るとは、
    情報は　変数
    情報に　入れて、
    ０Ａ１Ｈと　情報を　二バイト合成したものと、
    ３バイトを　返すこと。
    
※二つのデータ(int)を比較し、大きいか等しい(データ１ >= データ２)ならアドレスで指定されたオペコードの場所に飛ぶ。
※JVM(データ１・データ２ー＞・)
※Mind(跳ぶオペコードのアドレス－＞情報数値・バイト数)
if_icmpgeのデータを得るとは、
    情報は　変数
    情報に　入れて、
    ０Ａ２Ｈと　情報を　二バイト合成したものと、
    ３バイトを　返すこと。
    
※二つのデータ(int)を比較し、大きい(データ１ > データ２)ならアドレスで指定されたオペコードの場所に飛ぶ。
※JVM(データ１・データ２ー＞・)
※Mind(跳ぶオペコードのアドレス－＞情報数値・バイト数)
if_icmpgtのデータを得るとは、
    情報は　変数
    情報に　入れて、
    ０Ａ３Ｈと　情報を　二バイト合成したものと、
    ３バイトを　返すこと。
    
※二つのデータ(int)を比較し、小さいか等しい(データ１ <= データ２)ならアドレスで指定されたオペコードの場所に飛ぶ。
※JVM(データ１・データ２ー＞・)
※Mind(跳ぶオペコードのアドレス－＞情報数値・バイト数)
if_icmpleのデータを得るとは、
    情報は　変数
    情報に　入れて、
    ０Ａ４Ｈと　情報を　二バイト合成したものと、
    ３バイトを　返すこと。

※二つのデータ(参照型)を比較し、等値ならアドレスで指定されたオペコードの場所に飛ぶ。
※JVM(データ１・データ２ー＞・)
※Mind(跳ぶオペコードのアドレス－＞情報数値・バイト数)
if_acmpeqのデータを得るとは、
    情報は　変数
    情報に　入れて、
    ０Ａ５Ｈと　情報を　二バイト合成したものと、
    ３バイトを　返すこと。

※二つのデータ(参照型)を比較し、等値でないならアドレスで指定されたオペコードの場所に飛ぶ。
※JVM(データ１・データ２ー＞・)
※Mind(跳ぶオペコードのアドレス－＞情報数値・バイト数)
if_acmpneのデータを得るとは、
    情報は　変数
    情報に　入れて、
    ０Ａ６Ｈと　情報を　二バイト合成したものと、
    ３バイトを　返すこと。

gotoデータバイト数は　定数　３。
※あるオペコードに跳ぶ(但し、オペコードの相対アドレス、つまりここからのバイト数の差で指定する)。
※JVM(・－＞・)
※Mind(飛移先オペコードアドレス－＞情報数値・バイト数)
gotoのデータを得るとは、
    情報は　変数
    情報に　入れて、
    ０Ａ７Ｈと　情報を　二バイト符号付き合成したものと、
    gotoデータバイト数を　返すこと。
    
※あるオペコードの2バイトアドレスをスタックに積む？(非推奨)。
※JVM(・ー＞アドレス)
※Mind(オペコードアドレス－＞情報数値・バイト数)
jsrのデータを得るとは、
    情報は　変数
    情報に　入れて、
    ０Ａ８Ｈと　情報を　二バイト合成したものと
    ３バイトを　返すこと。
    
※サブルーチンから帰る...？(非推奨)。
※JVM(・ー＞・)
※Mind(帰る先のアドレス－＞情報数値・バイト数)
retのデータを得るとは、
    情報は　変数
    情報に　入れて、
    ０Ａ９Ｈと　情報を　一バイト合成したものと
    ２バイトを　返すこと。

※使用不可
※インデックスをスタックから取り出し、そのインデックスの
※場所に跳ぶ。(配列のイメージに近い)
※JVM(インデックスー＞・)
※Mind(ジャンプ先アドレス２,ジャンプ先アドレス１...
※       最高のインデックス・最低のインデックス・
※        (実際は最低のインデックスだけ引かれて１足されたものが使用される)
※        デフォルト(範囲外)の時に跳ぶオペコードへの相対アドレス・
※        －＞情報数値・バイト数)
※tableswitchのデータを得るとは、
※  完成品は　変数
※  最低インデックスは　変数
※  最高インデックスは　変数
※  全体の長さは　変数
※  比較数値は　変数
※  ＤＥＦＡＵＬＴの宛先は　変数

※  ＤＥＦＡＵＬＴの宛先に　入れて、
※  最低インデックスに　入れ、
※  最高インデックスに　入れ、
※  最高インデックスから　最低インデックスを　引いて、一つ加えたものを
※  全体の長さに　入れ、

※  ０ＡＡＨと ＤＥＦＡＵＬＴの宛先を　四バイト合成し、
※  最低インデックスを　四バイト合成し、
※  最高インデックスを　四バイト合成し、
※  完成品に　入れ　　　　　　　　　　※一旦
※  全体の長さを　回数指定し
※      完成品と、比較数値を　四バイト合成し、
※      完成品に　入れてゆくことを
※  繰り返し、
※  完成品と、
※  １３バイトに、４バイトと　全体の長さを　掛けたものを
※  加えたものを、返すこと。※データをスタックから取り出し、対応する場所に跳ぶ。(switch文)

tableswitchヘッダのデータを得るとは
    ０ＡＡＨと　１バイトを　返すこと。

※JVM(データ１ー＞・)
※Mind(比較する数値２・その跳ぶオペコードへの相対アドレス２...
※        比較する数値１・その跳ぶオペコードへの相対アドレス１・
※        case文の数(比較する数値の数)・
※        デフォルトの時に跳ぶオペコードへの相対アドレス・
※        －＞情報数値・バイト数)
lookupswitchのデータを得るとは、
    完成品は　変数
    ＣＡＳＥの数は　変数
    ＤＥＦＡＵＬＴの宛先は　変数
    ＣＡＳＥ相対アドレスは　変数
    比較数値は　変数

    ＤＥＦＡＵＬＴの宛先に　入れて、
    ＣＡＳＥの数に　入れ、
    ７５Ｈと ＤＥＦＡＵＬＴの宛先を　四バイト合成し、
    ＣＡＳＥの数を　四バイト合成し、
    完成品に　入れ　　　　　　　　　　※一旦
    ＣＡＳＥの数を　回数指定し
        ＣＡＳＥ相対アドレスに　入れて、
        比較数値に　入れて、
        完成品と、比較数値を　四バイト合成し、
        ＣＡＳＥ相対アドレスを　四バイト合成し、
        完成品に　入れてゆくことを
    繰り返し、
    完成品と、
    ９バイトに、８バイトと　ＣＡＳＥの数を　掛けたものを
    加えたものを、返すこと。

※スタックを一つ(int)使用し、関数の返り値を返す。
※JVM(返り値－＞「全てスタック消去し空っぽ」)
※Mind(・－＞情報数値・バイト数)
ireturnのデータを得るとは
    ０ＡＣＨと　１バイトを　返すこと。
    
※スタックを一つ使用し、関数の返り値を返す。
※JVM(返り値－＞「全てスタック消去し空っぽ」)
※Mind(・－＞情報数値・バイト数)
lreturnのデータを得るとは
    ０ＡＤＨと　１バイトを　返すこと。
    
※スタックを一つ(float型)使用し、関数の返り値を返す。
※JVM(返り値(float型)－＞「全てスタック消去し空っぽ」)
※Mind(・－＞情報数値・バイト数)
freturnのデータを得るとは
    ０ＡＥＨと　１バイトを　返すこと。

※スタックを一つ(ダブル型)使用し、関数の返り値を返す。
※JVM(返り値(ダブル型)－＞「全てスタック消去し空っぽ」)
※Mind(・－＞情報数値・バイト数)
dreturnのデータを得るとは
    ０ＡＦＨと　１バイトを　返すこと。

※スタックを一つ使用し、関数の返り値を返す。
※JVM(返り値－＞「全てスタック消去し空っぽ」)
※Mind(・－＞情報数値・バイト数)
areturnのデータを得るとは
    ０Ｂ０Ｈと　１バイトを　返すこと。

※voidを返しつつメソッドを終わる。
※JVM(・ー＞「すべて消去し空っぽ」)
※Mind(・－＞情報数値・バイト数)
returnのデータを得るとは、
    ０Ｂ１Ｈと　１バイトを　返すこと。

※あるクラスの静的フィールド変数の中身を得る。
※JVM(・－＞フィールド変数の中身)
※Mind(得る静的フィールドの、定数フィールドのインデックス－＞情報数値・バイト数)
getstaticのデータを得るとは、
    情報は　変数
    情報に　入れて、
    ０Ｂ２Ｈと　情報を　二バイト合成したものと、
    ３バイトを　返すこと。
    
※あるクラスの静的フィールドに代入する。
※JVM(データ ー＞・)
※Mind(代入されるフィールドを表す、定数フィールドの番号－＞情報数値・バイト数)
putstaticのデータを得るとは、
    情報は　変数
    情報に　入れて、
    ０Ｂ３Ｈと　情報を　二バイト合成したものと、
    ３バイトを　返すこと。

※スタックのデータ(参照型)のフィールド変数の中身を得る。
※JVM(データ(参照型)－＞フィールド変数の中身)
※Mind(得るフィールドの、定数フィールドのインデックス－＞情報数値・バイト数)
getfieldのデータを得るとは、
    情報は　変数
    情報に　入れて、
    ０Ｂ４Ｈと　情報を　二バイト合成したものと、
    ３バイトを　返すこと。
    
※インスタンスのフィールドに代入する。
※JVM(インスタンスの参照・データ ー＞・)
※Mind(代入されるフィールドを表す、定数フィールドの番号－＞情報数値・バイト数)
putfieldのデータを得るとは、
    情報は　変数
    情報に　入れて、
    ０Ｂ５Ｈと　情報を　二バイト合成したものと、
    ３バイトを　返すこと。

※あるインスタンスのメソッドを呼び出す。
※JVM(インスタンス参照・引数１・引数２...ー＞・)
※Mind(定数フィールドのインデックス－＞情報数値・バイト数)
invokevirtualのデータを得るとは、
    情報は　変数
    情報に　入れて、
    ０Ｂ６Ｈと　情報を　二バイト合成したものと、
    ３バイトを　返すこと。
    
※親関数を呼び出す。
※JVM(インスタンス参照・引数１・引数２...ー＞・)
※Mind(定数フィールドのインデックス－＞情報数値・バイト数)
invokespecialのデータを得るとは、
    情報は　変数
    情報に　入れて、
    ０Ｂ７Ｈと　情報を　二バイト合成したものと、
    ３バイトを　返すこと。

※静的関数を呼び出す。
※JVM(引数１・引数２...ー＞・)
※Mind(定数フィールドのインデックス－＞情報数値・バイト数)
invokestaticのデータを得るとは、
    情報は　変数
    情報に　入れて、
    ０Ｂ８Ｈと　情報を　二バイト合成したものと、
    ３バイトを　返すこと。

※あるインスタンスの、インターフェースで定義された関数を呼び出す。
※JVM(インスタンス参照・引数１・引数２...ー＞・)
※Mind(定数フィールドのインデックス・引数の数－＞情報数値・バイト数)
invokeinterfaceのデータを得るとは、
    ランタイム定数フィールドインデックスは　変数
    引数の数は　変数
    引数の数に　入れて、
    ランタイム定数フィールドインデックスに　入れて、
    ０Ｂ９Ｈと　ランタイム定数フィールドインデックスを　二バイト合成し、
    引数の数を　一バイト合成し、
    ０を　一バイト合成したものと、
    ５バイトを　返すこと。

※動的に作成された関数を呼び出す(個人的に非推奨)。
※JVM(引数１・引数２...ー＞・)
※Mind(定数フィールドのインデックス－＞情報数値・バイト数)
invokedynamicのデータを得るとは、
    情報は　変数
    情報に　入れて、
    ０ＢＡＨと　情報を　二バイト合成し、０を　二バイト合成したものと、
    ５バイトを　返すこと。
    
※新しいインスタンスを作成する。
※JVM(・－＞作成されたインスタンスの参照)
※Mind(作成されるインスタンスの型を表す、定数フィールドの番号－＞情報数値・バイト数)
newのデータを得るとは、
    情報は　変数
    情報に　入れて、
    ０ＢＢＨと　情報を　二バイト合成したものと、
    ３バイトを　返すこと。
    
※新しい配列(基本型)を作り、参照をスタックに積む。
※JVM(配列の大きさ－＞作成された配列の参照)
※Mind(配列の型(基本型)に使用される型番号
※        boolean -> 4
※        char    -> 5
※        float   -> 6
※        double  -> 7
※        byte    -> 8
※        short   -> 9
※        int     -> 10
※        long    -> 11
※        －＞情報数値・バイト数)
newarrayのデータを得るとは、
    情報は　変数
    情報に　入れて、
    ０ＢＣＨと　情報を　一バイト合成したものと、
    ２バイトを　返すこと。

※新しい配列を作り、参照をスタックに積む。
※JVM(配列の大きさ－＞作成された配列の参照)
※Mind(配列の型(参照型)に使用される、定数フィールドの番号－＞情報数値・バイト数)
anewarrayのデータを得るとは、
    情報は　変数
    情報に　入れて、
    ０ＢＤＨと　情報を　二バイト合成したものと、
    ３バイトを　返すこと。

※配列の長さを得る。
※JVM(配列の参照－＞配列の長さ)
※Mind(・－＞情報数値・バイト数)
arraylengthのデータを得るとは
    ０ＢＥＨと　１バイトを　返すこと。

※例外を投げる。
※JVM(Throwable継承インスタンス参照ー＞「そのThrowable継承インスタンス参照のみとなる」)
※Mind(・－＞情報数値・バイト数)
athrowのデータを得るとは、
    ０ＢＦＨと　１バイトを　返すこと。

※スタックのデータ（参照型）を、キャストする。
※JVM(データー＞データ(キャスト済み))
※Mind(キャスト先クラスの、定数フィールドのインデックス－＞情報数値・バイト数)
checkcastのデータを得るとは、
    情報は　変数
    情報に　入れて、
    ０Ｃ０Ｈと　情報を　二バイト合成したものと、
    ３バイトを　返すこと。

※データ(参照型)をスタックから取り出し、指定されたクラスを継承しているか判定。
※JVM(データ１ー＞(0,1))
※Mind(比較対象クラスインデックス－＞情報数値・バイト数)
instanceofのデータを得るとは、
    情報は　変数
    情報に　入れて、
    ０Ｃ１Ｈと　情報を　二バイト合成したものと
    ３バイトを　返すこと。
    
※データ(参照型)をスタックから取り出し、モニタする。(個人的に非推奨)
※JVM(データ１ー＞・)
※Mind(・－＞情報数値・バイト数)
monitorenterのデータを得るとは、
    ０Ｃ２Ｈと　１バイトを　返すこと。

※データ(参照型)をスタックから取り出し、モニタを終える。(個人的に非推奨)
※JVM(データ１ー＞・)
※Mind(・－＞情報数値・バイト数)
monitorexitのデータを得るとは、
    ０Ｃ３Ｈと　１バイトを　返すこと。

※他のオペコードの、一緒に書かれるデータを２バイトにできる。
※(nload系、nstore系、ret)
※JVM(<使われるオペコードと同じ>)
※Mind(オペコード情報・渡すインデックス－＞情報数値・バイト数)
wideのデータを得るとは、
    オペコードは　変数
    インデックスは　変数
    インデックスに　入れて、
    オペコードに　入れて、
    ０Ｃ４Ｈと　オペコードを　一バイト合成し、
    インデックスを　二バイト合成したものと
    ４バイトを　返すこと。
    
※他のオペコードの、一緒に書かれるデータを４バイトにできる。
※(iincのみ)
※JVM(<使われるオペコードと同じ>)
※Mind(オペコード情報・渡すインデックス・定数－＞情報数値・バイト数)
wide_iincのデータを得るとは、
    オペコードは　変数
    インデックスは　変数
    増加数は　変数
    増加数に　入れて
    インデックスに　入れて、
    オペコードに　入れて、
    ０Ｃ４Ｈと　オペコードを　一バイト合成し、
    インデックスを　二バイト合成し、
    増加数を　二バイト合成したものと、
    ６バイトを　返すこと。
    
※新しい「多次元」配列を作り、参照をスタックに積む。
※JVM(配列の大きさ１,配列の大きさ２...－＞作成された配列の参照)
※Mind(配列の型(参照型)に使用される、定数フィールドの番号・次元数－＞情報数値・バイト数)
multianewarrayのデータを得るとは、
    ランタイム定数フィールドのインデックスは　変数
    次元数は　変数
    次元数に　入れて、
    ランタイム定数フィールドのインデックスに　入れて、
    ０Ｃ５Ｈと　ランタイム定数フィールドのインデックスを　二バイト合成したものと、
    次元数を　一バイト合成したものと
    ３バイトを　返すこと。

※一つのデータ(参照型)がnullならアドレスで指定されたオペコードの場所に飛ぶ。
※JVM(データ１ー＞・)
※Mind(跳ぶオペコードのアドレス－＞情報数値・バイト数)
ifnullのデータを得るとは、
    情報は　変数
    情報に　入れて、
    ０Ｃ６Ｈと　情報を　二バイト合成したものと、
    ３バイトを　返すこと。
    
※一つのデータ(参照型)がnull「でない」ならアドレスで指定されたオペコードの場所に飛ぶ。
※JVM(データ１ー＞・)
※Mind(跳ぶオペコードのアドレス－＞情報数値・バイト数)
ifnonnullのデータを得るとは、
    情報は　変数
    情報に　入れて、
    ０Ｃ７Ｈと　情報を　二バイト合成したものと、
    ３バイトを　返すこと。
    
※あるオペコードに跳ぶ(但し、オペコードの相対アドレス、つまりここからのバイト数の差で指定する、4バイトで指定できる)。
※JVM(・－＞・)
※Mind(飛移先オペコードアドレス－＞情報数値・バイト数)
goto_wのデータを得るとは、
    情報は　変数
    情報に　入れて、
    ０Ｃ８Ｈと　情報を　四バイト合成したものと、
    ５バイトを　返すこと。
    
※あるオペコードの4バイトアドレスをスタックに積む？(非推奨)。
※JVM(・ー＞アドレス)
※Mind(オペコードアドレス－＞情報数値・バイト数)
jsr_wのデータを得るとは、
    情報は　変数
    情報に　入れて、
    ０Ｃ９Ｈと　情報を　四バイト合成したものと
    ５バイトを　返すこと。

(変数インデックスー＞情報数値・バイト数)
aloadのデータを可能なら短縮して得るとは、
    複写し　３　以下　ならば
        aload_nのデータを得て、
    さもなければ
        aloadのデータを得て、
    つぎに。

(変数インデックスー＞情報数値・バイト数)
astoreのデータを可能なら短縮して得るとは、
    複写し　３　以下　ならば
        astore_nのデータを得て、
    さもなければ
        astoreのデータを得て、
    つぎに。

(変数インデックスー＞情報数値・バイト数)
iloadのデータを可能なら短縮して得るとは、
    複写し　３　以下　ならば
        iload_nのデータを得て、
    さもなければ
        iloadのデータを得て、
    つぎに。

(変数インデックスー＞情報数値・バイト数)
istoreのデータを可能なら短縮して得るとは、
    複写し　３　以下　ならば
        istore_nのデータを得て、
    さもなければ
        istoreのデータを得て、
    つぎに。

（・ー＞データ・バイト数）
Stackaloadのデータを得るとは
    Stack変数インデックスで
    aloadのデータを可能なら短縮して得ること。
「C:\pmind\srclib\uniencode.src」を　コンパイル。

出力先は　ファイル。

（・−＞・）
エラー処理とは
    エラー？　ならば
        出力先を　クローズして、
        エラー文字列で　重大エラー
    つぎに。

（繰り返し数・バイト数　−＞　・）
バイト数指定で書き込みとは
    受け取り数は　変数
    繰り返し数は　変数
    操作桁数は　変数
    マスク値は　変数

    繰り返し数に　入れ
    受け取り数に　入れ、
    繰り返し数を　回数指定して
        回数を　繰り返し数から　引いて、８ビットを　掛けて、　操作桁数に　入れ、
    
        操作桁数ぶんだけ、１を　左シフトしたものを　マスク値に　入れ、

        ７を　回数指定して
            マスク値を　１つだけ　左シフトしたものと、マスク値の　ＯＲを　マスク値に　入れることを
        繰り返す

        マスク値と　受け取り数との　ＡＮＤが　ゼロ？　ならば
            {００}を　出力先に　書き込みし、
        さもなければ
            受け取り数の　出力先に　一文字書き込みして、
            打ち切ることを
        つぎに
    繰り返し、
    エラー処理すること。

（情報　−＞　・）
バイト１書き込みとは
    １バイトで、バイト数指定で書き込みすること。

（情報　−＞　・）
バイト２書き込みとは
    ２バイトで、バイト数指定で書き込みすること。

（情報　−＞　・）
バイト４書き込みとは
    ４バイトで、バイト数指定で書き込みすること。

（文字列　−＞　・）
ファイル書き込みとは
    出力先に　書き込み、エラー処理すること。

（文字列・文字列・文字列...・文字列個数 -＞　・）
個数指定でアクセス修飾子のデータを書き込むとは
    カウンタは　変数
    カウンタを　クリアし
    回数指定し
        文字列事例をとる
            「Ｐｕｂｌｉｃ」なら　０１Ｈだけ
            「Ｓｔａｔｉｃ」なら　０８Ｈだけ
            例外なら　０１Ｈだけ
        事例終わり、
        カウンタを　増加させ、
    繰り返し
    カウンタを　バイト２書き込みすること。

（文字列　−＞　・）
文字列とバイト数をＵＴＦ８で書き込むとは
    ＳＪＩＳ→ＵＴＦ８変換して
    複写し、　バイト数を　バイト２書き込みし、
    ファイル書き込みすること。

メインとは
    出力文字列は　文字列実体　長さ　１００桁

　　Unicodeエンコードテーブルを読み出しし、　偽？
　　　　ならば　重大エラー
    つぎに

    「Hello.class」で　出力先を　新規オープンし、
    エラー処理し、

    ※Magic Number
    ｛ＣＡ　ＦＥ　ＢＡ　ＢＥ｝を　ファイル書き込みし、
    
    ※マイナーバージョン
    ０を　バイト２書き込みし、

    ※メジャーバージョン
    ５２を　バイト２書き込みし、
    
    ※定数フィールドの数
    ２９を　バイト２書き込みし、

        ※MethodRef　１　イニシャライザ
        ｛０Ａ｝を　ファイル書き込みし、
        ※クラス
        ６を　バイト２書き込みし、
        ※引数とか名前
        １５を　バイト２書き込みし、

        ※FieldRef　２　java.lang.System.out
        ｛０９｝を　ファイル書き込みし、
        ※クラス
        １６を　バイト２書き込みし、
        ※名前や型
        １７を　バイト２書き込みし、

        ※String　３ 文字列定数（Hello World）
        ｛０８｝を　ファイル書き込みし、
        １８を　バイト２書き込みし、

        ※Methodref　４ out.println
        ｛０Ａ｝を　ファイル書き込みし、
        ※クラス
        １９を　バイト２書き込みし、
        ※名前や引数
        ２０を　バイト２書き込みし、

        ※Class　５　（これ自身）
        ｛０７｝を　ファイル書き込みし、
        ※ファイル名とか
        ２１を　バイト２書き込みし、

        ※Class　６　（Ｏｂｊｅｃｔ）
        ｛０７｝を　ファイル書き込みし、
        ※ファイル名とか
        ２２を　バイト２書き込みし、

	※Utf8　７
	｛０１｝を　ファイル書き込みし、
	「<init>」で、　文字列とバイト数をＵＴＦ８で書き込み

	※Utf8　８
	｛０１｝を　ファイル書き込みし、
	「()V」を　文字列とバイト数をＵＴＦ８で書き込み

    	※Utf8　９
    	｛０１｝を　ファイル書き込みし、
    	「Code」を　文字列とバイト数をＵＴＦ８で書き込み

	※Utf8　１０
    	｛０１｝を　ファイル書き込みし、
    	「LineNumberTable」を　文字列とバイト数をＵＴＦ８で書き込み

    	※Utf8　１１
    	｛０１｝を　ファイル書き込みし、
    	「main」を　文字列とバイト数をＵＴＦ８で書き込み

    	※Utf8　１２
    	｛０１｝を　ファイル書き込みし、
    	「([Ljava/lang/String;)V」を　文字列とバイト数をＵＴＦ８で書き込み

    	※Utf8　１３
    	｛０１｝を　ファイル書き込みし、
    	「SourseFile」を　文字列とバイト数をＵＴＦ８で書き込み

    	※Utf8　１４
    	｛０１｝を　ファイル書き込みし、
    	「Hello.java」を　文字列とバイト数をＵＴＦ８で書き込み

    	※NameAndType　１５
    	｛０Ｃ｝を　ファイル書き込みし、
    	７を　バイト２書き込みし、
    	８を　バイト２書き込みし、

    	※NameAndType　１６
    	｛０７｝を　ファイル書き込みし、
    	２３を　バイト２書き込みし、
    
    	※NameAndType　１７
    	｛０Ｃ｝を　ファイル書き込みし、
    	２４を　バイト２書き込みし、
    	２５を　バイト２書き込みし、

    	※Utf8　１８
    	｛０１｝を　ファイル書き込みし、
    	「こんにちは、JMind！」を　文字列とバイト数をＵＴＦ８で書き込み

    	※Class　１９
    	｛０７｝を　ファイル書き込みし、
    	２６を　バイト２書き込みし、

    	※NameAndType　２０
    	｛０Ｃ｝を　ファイル書き込みし、
    	２７を　バイト２書き込みし、
    	２８を　バイト２書き込みし、

    	※Utf8　２１
    	｛０１｝を　ファイル書き込みし、
    	「Hello」を　文字列とバイト数をＵＴＦ８で書き込み

    	※Utf8　２２
    	｛０１｝を　ファイル書き込みし、
    	「java/lang/Object」を　文字列とバイト数をＵＴＦ８で書き込み

    	※Utf8　２３
    	｛０１｝を　ファイル書き込みし、
    	「java/lang/System」を　文字列とバイト数をＵＴＦ８で書き込み

    	※Utf8　２４
    	｛０１｝を　ファイル書き込みし、
    	「out」を　文字列とバイト数をＵＴＦ８で書き込み

    	※Utf8　２５
    	｛０１｝を　ファイル書き込みし、
    	「Ljava/io/PrintStream;」を　文字列とバイト数をＵＴＦ８で書き込み
    
    	※Utf8　２６
    	｛０１｝を　ファイル書き込みし、
    	「java/io/PrintStream」を　文字列とバイト数をＵＴＦ８で書き込み

    	※Utf8　２７
    	｛０１｝を　ファイル書き込みし、
    	「println」を　文字列とバイト数をＵＴＦ８で書き込み

    	※Utf8　２８
    	｛０１｝を　ファイル書き込みし、
    	「(Ljava/lang/String;)V」を　文字列とバイト数をＵＴＦ８で書き込み

    ※クラスのアクセス修飾子　（Ｐｕｂｌｉｃ）
    「Ｐｕｂｌｉｃ」を　１個　個数指定でアクセス修飾子のデータを書き込み、

    ※このクラスの情報
    ５を　バイト２書き込みし、

    ※親クラスの情報（Object）
    ６を　バイト２書き込みし、

    ※インターフェース個数
    ０を　バイト２書き込みし、

    ※クラスフィールドの数
    ０を　バイト２書き込みし、

    ※メソッドの数
    ２を　バイト２書き込みし、

        ※イニシャライザ
        ※アクセス修飾子（Ｐｕｂｌｉｃ）
        「Ｐｕｂｌｉｃ」を　１個　個数指定でアクセス修飾子のデータを書き込み、
        ※お名前
        ７を　バイト２書き込みし、
        ※型情報
        ８を　バイト２書き込みし、
        ※属性　（取り敢えずおまじない）
        １を　バイト２書き込みし、
            ※コード情報
            ９を　バイト２書き込みし、
            ※コードの真の長さ
            １７を　バイト４書き込みし、
            ※スタックに積まれる最大値
            １を　バイト２書き込みし、
            ※ローカル変数個数（Ｔｈｉｓ含む）
            １を　バイト２書き込みし、
            ※コードの見かけの長さ
            ５を　バイト４書き込みし、
                ※コード記述
                ※a_load
                ｛２Ａ｝を　ファイル書き込みし、
                ※invokespecial
                ｛Ｂ７｝を　ファイル書き込みし、
                １を　バイト２書き込みし、
                ※return
                ｛Ｂ１｝を　ファイル書き込みし、
        ※例外情報
        ０を　バイト２書き込みし、
        ※属性（取り敢えずおまじない）
        ０を　バイト２書き込みし、
    
    ※メイン
    ※アクセス修飾子（ｐｕｂｌｉｃ　＋　ｓｔａｔｉｃ）
    「Ｐｕｂｌｉｃ」と　「Ｓｔａｔｉｃ」の　２個　個数指定でアクセス修飾子のデータを書き込み、
    ※お名前
    １１を　バイト２書き込みし、
    ※型情報
    １２を　バイト２書き込みし、
    ※属性
    １を　バイト２書き込みし、
        ※コード情報
        ９を　バイト２書き込みし、
        ※コードの真の長さ
        ２１を　バイト４書き込みし、
        ※スタックに積まれる最大値
        ２を　バイト２書き込みし、
        ※ローカル変数個数（引数含む）
        １を　バイト２書き込みし、
            ※コードの見かけの長さ
            ９を　バイト４書き込みし、
                ※コード記述
                ※getstatic
                ｛Ｂ２｝を　ファイル書き込みし、
                ２を　バイト２書き込みし、
                ※ldc
                ｛１２｝を　ファイル書き込みし、
                ３を　バイト１書き込みし、
                ※invokevirtual
                ｛Ｂ６｝を　ファイル書き込みし、
                ４を　バイト２書き込みし、
                ※return
                ｛Ｂ１｝を　ファイル書き込みし、
        ※例外
        ０を　バイト２書き込みし、
        ※属性
        ０を　バイト２書き込みし、
    
    ※クラス属性
    ０を　バイト２書き込みし、
    ※ソースファイル情報
    ※１３を　バイト２書き込みし、
    ※属性長
    ※２を　バイト４書き込みし、
    ※ソースファイル情報
    ※１４を　バイト２書き込みし、

    出力先を　クローズし
    
    「終了時」で　このメッセージでスタック検査。
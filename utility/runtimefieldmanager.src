※   #7 = Class              #8             // java/util/Stack
※   #8 = Utf8               java/util/Stack
※  #12 = Methodref          #7.#13         // java/util/Stack.push:(Ljava/lang/Object;)Ljava/lang/Object;
※  #13 = NameAndType        #14:#15        // push:(Ljava/lang/Object;)Ljava/lang/Object;
※  #14 = Utf8               push
※  #15 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;

※  #22 = Methodref          #7.#23         // java/util/Stack.pop:()Ljava/lang/Object;
※  #23 = NameAndType        #24:#25        // pop:()Ljava/lang/Object;
※  #24 = Utf8               pop
※  #25 = Utf8               ()Ljava/lang/Object;

（文字列ー＞バイナリ）
ＵＴＦ８のランタイム定数フィールドを得るとは
    ランタイム定数フィールドバイナリは　文字列実体　長さ　１００バイト
    検査文字列は　文字列情報
    検査文字列に　入れ
    ０１Ｈと　検査文字列の　バイト数を　二バイト合成したものを ランタイム定数フィールドバイナリに　追加し、
    検査文字列を　ランタイム定数フィールドバイナリに　追加し、
    ランタイム定数フィールドバイナリを　返すこと。

push関数を得るとは
    ３を　返すこと。

pop関数を得るとは
    ７を　返すこと。
    
（・ー＞文字列・定数フィールド数）
デフォルトのランタイム定数フィールドを得るとは
    ランタイム定数フィールドバイナリは　文字列実体　長さ　２００バイト
    
    ０７Ｈと　２を　二バイト合成したものを　ランタイム定数フィールドバイナリに　追加し、
    「java/util/Stack」で　ＵＴＦ８のランタイム定数フィールドを得て　ランタイム定数フィールドバイナリに　（文字列を）　追加し、
    ０ＡＨと　１を　二バイト合成し　４を　二バイト合成したものを　ランタイム定数フィールドバイナリに　追加し、
    ０ＣＨと　５を　二バイト合成し　６を　二バイト合成したものを　ランタイム定数フィールドバイナリに　追加し、
    「push」で　ＵＴＦ８のランタイム定数フィールドを得て　ランタイム定数フィールドバイナリに　追加し、
    「(Ljava/lang/Object;)Ljava/lang/Object;」で　ＵＴＦ８のランタイム定数フィールドを得て　ランタイム定数フィールドバイナリに　追加し、
    
    ０ＡＨと　１を　二バイト合成し　８を　二バイト合成したものを　ランタイム定数フィールドバイナリに　追加し、
    ０ＣＨと　９を　二バイト合成し　１０を　二バイト合成したものを　ランタイム定数フィールドバイナリに　追加し、
    「pop」で　ＵＴＦ８のランタイム定数フィールドを得て　ランタイム定数フィールドバイナリに　追加し、
    「()Ljava/lang/Object;」で　ＵＴＦ８のランタイム定数フィールドを得て　ランタイム定数フィールドバイナリに　追加し、

    ランタイム定数フィールドバイナリと　１０を　返すこと。

（構造体情報・インデックスー＞追加した定数フィールド）
※注意！「定数フィールドの数」は　増加していません！
動的標準関数の定数フィールドを追加するとは
    関数認識構造体情報は　構造体情報
    インデックスは　変数

    関数認識構造体情報と　インデックスに　入れ
        ※Fieldref #n+1 - #n+2, #n+3
        ０９Ｈと
            関数認識構造体情報の　ランタイム定数フィールド数に　二つ加えたものを
        二バイト合成したものと
            関数認識構造体情報の　ランタイム定数フィールド数に　３つ　加えたものを
        二バイト合成したものを
            関数認識構造体情報の　ランタイム定数フィールドに　追加し、

        ※Class #n+2 - #n+4
        ０７Ｈと
            関数認識構造体情報の　ランタイム定数フィールド数に　４つ　加えたものを
        二バイト合成したものを
        関数認識構造体情報の　ランタイム定数フィールドに　追加し、
        
        ※NameAndType #n+3 - #n+5,#n+6
        ０ＢＨと
            関数認識構造体情報の　ランタイム定数フィールド数に　５つ　加えたものを
        二バイト合成したものを
            関数認識構造体情報の　ランタイム定数フィールド数に　６つ　加えたものを
        二バイト合成したものを
        関数認識構造体情報の　ランタイム定数フィールドに　追加し、
        
        ※UTF8 #n+4
    	動的単語情報型の　動的インスタンス定義フィールドを持つクラス名（インデックス）を
        ＵＴＦ８へ変換し　ＵＴＦ８のランタイム定数フィールドを得て
        関数認識構造体情報の　ランタイム定数フィールドに　追加し、
        
        ※UTF8 #n+5
    	動的単語情報型の　動的関数インスタンス名（インデックス）を
        ＵＴＦ８へ変換し　ＵＴＦ８のランタイム定数フィールドを得て
        関数認識構造体情報の　ランタイム定数フィールドに　追加し、
        
        ※UTF8 #n+6
    	動的単語情報型の　動的関数インスタンス型（インデックス）を
        ＵＴＦ８へ変換し　ＵＴＦ８のランタイム定数フィールドを得て
        関数認識構造体情報の　ランタイム定数フィールドに　追加し、
        
        ※Methodref #n+7 - #n+8, #n+9
        ０ＡＨと
            関数認識構造体情報の　ランタイム定数フィールド数に　８つ　加えたものを
        二バイト合成したものと
            関数認識構造体情報の　ランタイム定数フィールド数に　９つ　加えたものを
        二バイト合成したものを
            関数認識構造体情報の　ランタイム定数フィールドに　追加し、
            
        ※Class #n+8 - #n+10
        ０７Ｈと
            関数認識構造体情報の　ランタイム定数フィールド数に　１０つ　加えたものを
        二バイト合成したものを
        関数認識構造体情報の　ランタイム定数フィールドに　追加し、
    
        ※NameAndType #n+9 - #n+11,#n+12
        ０ＢＨと
            関数認識構造体情報の　ランタイム定数フィールド数に　１１つ　加えたものを
        二バイト合成したものを
            関数認識構造体情報の　ランタイム定数フィールド数に　１２つ　加えたものを
        二バイト合成したものを
        関数認識構造体情報の　ランタイム定数フィールドに　追加し、

        ※UTF8 #n+10
    	動的単語情報型の　動的メソッド定義クラス名（インデックス）を
        ＵＴＦ８へ変換し　ＵＴＦ８のランタイム定数フィールドを得て
        関数認識構造体情報の　ランタイム定数フィールドに　追加し、

        ※UTF8 #n+11
    	動的単語情報型の　動的メソッド名（インデックス）を
        ＵＴＦ８へ変換し　ＵＴＦ８のランタイム定数フィールドを得て
        関数認識構造体情報の　ランタイム定数フィールドに　追加し、

        ※UTF8 #n+12
    	動的単語情報型の　動的メソッド引数型（インデックス）を
        ＵＴＦ８へ変換し　ＵＴＦ８のランタイム定数フィールドを得て
        関数認識構造体情報の　ランタイム定数フィールドに　追加し、

        １２を　返すこと。
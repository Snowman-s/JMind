出力先は　ファイル。
ソースコードは　ファイル。

ランタイム定数フィールド集計ファイルは　ファイル。
ランタイム定数フィールド集計ファイル名は　文字列。

ランタイム定数フィールドメモファイルは　ファイル。
現在使用中のランタイム定数フィールドメモファイル名は　文字列。

関数定義文字列メモファイルは　ファイル。
関数定義文字列メモファイル名は　文字列。

（・－＞・）
エラー処理とは
    エラー？　ならば
        エラー文字列で　重大エラーにし
    つぎに。

（繰り返し数・バイト数　－＞　・）
バイト数指定で書き込みとは
    受け取り数は　変数
    繰り返し数は　変数
    操作桁数は　変数
    マスク値は　変数

    繰り返し数に　入れ
    受け取り数に　入れ、
    繰り返し数を　回数指定して
        回数を　繰り返し数から　引いて、８ビットを　掛けて、　操作桁数に　入れ、

        操作桁数ぶんだけ、１を　左シフトしたものを　マスク値に　入れ、

        ７を　回数指定して
            マスク値を　１つだけ　左シフトしたものと、マスク値の　ＯＲを　マスク値に　入れることを
        繰り返す

        マスク値と　受け取り数の　ＡＮＤを　操作桁数だけ　右シフトし　出力先に　一文字書き込みして、
    繰り返し、
    エラー処理すること。

（情報　－＞　・）
バイト１書き込みとは
    １バイトで、バイト数指定で書き込みすること。

（情報　－＞　・）
バイト２書き込みとは
    ２バイトで、バイト数指定で書き込みすること。

（情報　－＞　・）
バイト４書き込みとは
    ４バイトで、バイト数指定で書き込みすること。

（文字列　－＞　・）
ファイル書き込みとは
    出力先に　書き込み、エラー処理すること。

（・ー＞・）
ファイル後処理とは
    出力先を　クローズし、
    ソースコードを　クローズし
    現在使用中のランタイム定数フィールドメモファイル名が　空列？　でなければ
        ランタイム定数フィールドメモファイルを　クローズし
    つぎに
    関数定義文字列メモファイルを　クローズし
    エラー処理し。

（ファイル名ー＞・）
ファイル操作初期化とは
    ファイル名は　文字列

    私のパス名を　カレントディレクトリ設定し

    ファイル名に　入れ
    ファイル名で　ソースコードを　オープンし、
    エラー処理し、

    ファイル名の　主ファイル名を得て、
    「.class」を　合成したもので　出力先を　新規オープンし、
    エラー処理し
    
    ※ディレクトリ作成
    「.\data」を
    複写し　ディレクトリ有り？　ならば
        捨て
    さもなければ
        ディレクトリ作成し
        エラー処理し
    つぎに
    「.\data\runtimefield.dat」を
    ランタイム定数フィールド集計ファイル名に　入れ
    ランタイム定数フィールド集計ファイル名で
    ランタイム定数フィールド集計ファイルを　新規オープンし

    「.\data\definition_of_function_string.dat」で
    関数定義文字列メモファイル名に　入れ
    関数定義文字列メモファイル名で
    関数定義文字列メモファイルを　新規オープンし
    エラー処理し

    現在使用中のランタイム定数フィールドメモファイル名を　クリアし。

（文字列ー＞・）
ランタイム定数フィールドを保持とは
    ランタイム定数フィールド集計ファイルに　書き込み
    エラー処理し。

（・ー＞・）
保持されたランタイム定数フィールドを出力先に書き込むとは
    ランタイム定数フィールド集計ファイルを　クローズし
    ランタイム定数フィールド集計ファイルを　再オープンし
    ここから
        ランタイム定数フィールド集計ファイルより　一バイト読み出し
        データ終わり？　ならば
            捨て
            打ち切って
        つぎに
        出力先に　一文字書き込み
    繰り返し
    エラー処理し。

（・ー＞文字列）
プログラムを一行ＳＪＩＳで読み出しとは
    ソースコードから　一行読み出し　ＳＪＩＳへ変換し。

(・ー＞・)
関数定義文字列書き込み準備とは
    関数定義文字列メモファイルを　クローズし
    関数定義文字列メモファイル名で
    関数定義文字列メモファイルを　新規オープンし
    エラー処理し。

（・ー＞データ終わり？）
プログラムをＳＪＩＳで関数定義文字列ファイルへ一関数読み出しとは
    検査文字の文字列は　文字列実体　長さ　３バイト
    検査文字は　ワード変数
    括弧フラグは　変数
    改行済みフラグは　変数
    一バイト目は　ワード変数

    （・ー＞文字・偽）
    （・ー＞真）
    一バイト読み出して追加とは
        ソースコードから　一バイト読み出し
        データ終わり？　ならば
            捨て　真
        さもなければ
            複写し
            検査文字の文字列に　一文字追加し　偽
        つぎに

    本体とは
    括弧フラグを　クリアし
    改行済みフラグに　偽を　入れ
    ここから
        検査文字の文字列を　クリアし

        一バイト読み出して追加し　真？　ならば
            真で　終わり
        つぎに

        一バイト目に　入れ
        一バイト目を　７だけ　右シフトし　１と　等しい　ならば
            一バイト読み出して追加し　真？　ならば
                真で　終わり
            つぎに
            捨て

            一バイト目を　４だけ　右シフトし　０ＥＨと　等しい　ならば
                一バイト読み出して追加し　真？　ならば
                    真で　終わり
                つぎに
                捨て
            つぎに
        つぎに

        検査文字の文字列を　UTF8→SJIS変換し、検査文字の文字列に　入れ
        
        検査文字の文字列の　左端文字を　検査文字に　入れ

        ※括弧検査
        括弧フラグが　０と　異なる　ならば
            検査文字で　右括弧データを得て　括弧フラグと　等しい　ならば
                括弧フラグを　クリアし
            つぎに
            検査文字を
            関数定義文字列メモファイルに　一文字書き込み
            もう一度
        さもなければ
            検査文字で　左括弧データを得て　括弧フラグに　入れ
        つぎに

        検査文字が　改行コードに　等しい
            または
        検査文字が　空白？
        ならば
            改行済みフラグが　真？　ならば
                もう一度
            つぎに
            改行済みフラグに　真を　
            入れ
            改行コードを
        さもなければ
            検査文字が　’。’と　等しい　ならば
                改行済みフラグが　偽？　ならば
                    改行コードを　関数定義文字列メモファイルに　一文字書き込んでから
                つぎに
                検査文字を　関数定義文字列メモファイルに　一文字書き込み
                偽で　終わり
            つぎに
            検査文字を
            改行済みフラグに　偽を　入れてから、
        つぎに
        関数定義文字列メモファイルに　一文字書き込み
    繰り返し。

(・ー＞・)
関数定義文字列読み出し準備とは
    関数定義文字列メモファイルを　クローズし
    関数定義文字列メモファイルを　再オープンし
    エラー処理し。

(・ー＞データ終わり？)
一関数定義ファイルへ書き出して読み出し準備するとは
    関数定義文字列書き込み準備し
    プログラムをＳＪＩＳで関数定義文字列ファイルへ一関数読み出し    
    関数定義文字列読み出し準備し。

（・ー＞文字列）
関数定義文字列ファイルより一単語読み出しとは
    関数定義文字列メモファイルより　一行読み出し
    データ終わり？　ならば
        「予期しないファイルの終わりが検出されました。”。”を忘れていませんか？」で
        重大エラー
    つぎに。

（・ー＞・）
ランタイム定数フィールドメモファイル書き込み準備とは
    現在使用中のランタイム定数フィールドメモファイル名が　空列？　ならば
        メソッドランタイム定数フィールドメモファイル名を
        現在使用中のランタイム定数フィールドメモファイル名に　入れ
    さもなければ
        ランタイム定数フィールドメモファイルを　クローズし
    つぎに
    現在使用中のランタイム定数フィールドメモファイル名で
    ランタイム定数フィールドメモファイルを　新規オープンし
    エラー処理し。

（・ー＞・）
ランタイム定数フィールドメモファイル読み出し準備とは
    現在使用中のランタイム定数フィールドメモファイル名が　空列？　ならば
        メソッドランタイム定数フィールドメモファイル名を
            現在使用中のランタイム定数フィールドメモファイル名に　入れ、
        現在使用中のランタイム定数フィールドメモファイル名で
        ランタイム定数フィールドメモファイルを　オープンし
    さもなければ
        ランタイム定数フィールドメモファイルを　クローズし
        ランタイム定数フィールドメモファイルを　再オープンし
    つぎに。

（文字列(バイナリ)ー＞・）
ランタイム定数フィールドをメモファイルに書き込みとは
    ランタイム定数フィールドメモファイルに　書き込み
    エラー処理し。

（・ー＞・）
ランタイム定数フィールドをメモファイルより保持とは
    ここから
        ランタイム定数フィールドメモファイルより　一バイト読み出し、
        データ終わり？　ならば
            捨て　打ち切り
        つぎに
        ランタイム定数フィールド集計ファイルに　一文字書き込み
    繰り返し
    エラー処理し。
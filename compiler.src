※「uopecode.src」を　コンパイル。
※「uutf8rap.src」を　コンパイル。
※「uniencode.src」を　コンパイル。
※「unidecode.src」を　コンパイル。
※「utility\ubytecomposition.src」を　コンパイル。

単語認識アンノウンは　定数　－１。
単語認識文字列は　定数　０。
単語認識標準動的関数は　定数　１。

動的単語情報型は　型紙
        標準動的関数名は　文字列
        動的インスタンス定義フィールドを持つクラス名は　文字列
        動的関数インスタンス名は　文字列
        動的関数インスタンス型は　文字列
        動的メソッド定義クラス名は　文字列
        動的メソッド名は　文字列
        動的メソッド引数型は　文字列

    関数情報は　標準動的関数名と　動的インスタンス定義フィールドを持つクラス名と　
                動的関数インスタンス名と　動的関数インスタンス型と
                動的メソッド定義クラス名と　動的メソッド名と 　動的メソッド引数型
    全体は　２個の　関数情報。

動的単語情報は　暗黙の構造体　動的単語情報型。

※Javaメソッドの仕様　
※  ローカル変数は取り敢えず1つであり、「メイン」ならLinkedList<Object>宣言、そうでなければ引数にListが渡される。
※　取り敢えずスタックは２５６個積めてもいいよね？

関数認識情報は　型紙
        認識された関数名は　文字列
        認識された関数型は　文字列

        ローカル変数数は　変数

        ランタイム定数フィールドは　文字列実体　長さ　２００バイト
        ランタイム定数フィールド数は　変数

        オペコードと引数のデータのバイナリは　文字列実体　長さ　１００バイト

    全体は　認識された関数名と　認識された関数型と　
        ローカル変数数と　ランタイム定数フィールドと
        ランタイム定数フィールド数と　オペコードと引数のデータのバイナリ。

（文字列（もといバイナリ）・構造体情報ー＞・）
関数認識情報のランタイム定数フィールドを追加とは
    操作構造体は　構造体情報
    本体とは
    操作構造体に　入れ
    操作構造体の　ランタイム定数フィールドに　追加すること。

（数値・バイト数・構造体情報ー＞・）
オペコードのバイナリを追加とは
    操作構造体は　構造体情報 
    操作構造体に　入れ、
    バイト数指定で文字列化し、操作構造体の　オペコードと引数のデータのバイナリに　追加すること。

（・ー＞・）
動的単語情報を初期化とは
    動的単語情報の　標準動的関数名（１）に　「表示」を　入れ
    動的単語情報の　動的インスタンス定義フィールドを持つクラス名（１）に　「java/lang/System」を　入れ
    動的単語情報の　動的関数インスタンス名（１）に　「out」を　入れ
    動的単語情報の　動的関数インスタンス型（１）に　「Ljava/io/PrintStream;」を　入れ
    動的単語情報の　動的メソッド定義クラス名（１）に　「java/io/PrintStream」を　入れ
    動的単語情報の　動的メソッド名（１）に　「print」を　入れ
    動的単語情報の　動的メソッド引数型（１）に　「(Ljava/lang/Object;)V」を　入れ、

    動的単語情報の　標準動的関数名（２）に　「一行表示」を　入れ
    動的単語情報の　動的インスタンス定義フィールドを持つクラス名（２）に　「java/lang/System」を　入れ
    動的単語情報の　動的関数インスタンス名（２）に　「out」を　入れ
    動的単語情報の　動的関数インスタンス型（２）に　「Ljava/io/PrintStream;」を　入れ
    動的単語情報の　動的メソッド定義クラス名（２）に　「java/io/PrintStream」を　入れ
    動的単語情報の　動的メソッド名（２）に　「println」を　入れ
    動的単語情報の　動的メソッド引数型（２）に　「(Ljava/lang/Object;)V」を　入れ。

（インデックスー＞標準動的関数名・動的インスタンス定義フィールドを持つクラス名・動的関数インスタンス名・動的関数インスタンス型・動的メソッド定義クラス名・動的メソッド名・動的メソッド引数型）
動的単語情報を得るとは
    インデックスは　変数
    インデックスに　入れ
    動的単語情報の　標準動的関数名（インデックス）
    動的単語情報の　動的インスタンス定義フィールドを持つクラス名（インデックス）
    動的単語情報の　動的関数インスタンス名（インデックス）
    動的単語情報の　動的関数インスタンス型（インデックス）
    動的単語情報の　動的メソッド定義クラス名（インデックス）
    動的単語情報の　動的メソッド名（インデックス）
    動的単語情報の　動的メソッド引数型（インデックス）。 

（注意！動的単語情報を得るに続いて使用してください）
（......ー＞・）
動的単語情報を表示とは
    標準動的関数名コピーは　文字列
    動的インスタンス定義フィールドを持つクラス名コピーは　文字列　
    動的関数インスタンス名コピーは　文字列
    動的関数インスタンス型コピーは　文字列
    動的メソッド定義クラス名コピーは　文字列
    動的メソッド名コピーは　文字列
    動的メソッド引数型コピーは　文字列
    
    標準動的関数名コピーと
    動的インスタンス定義フィールドを持つクラス名コピーと
    動的関数インスタンス名コピーと
    動的関数インスタンス型コピーと
    動的メソッド定義クラス名コピーと
    動的メソッド名コピーと
    動的メソッド引数型コピーに　入れ、

    「標準動的関数名：」を　表示し　標準動的関数名コピーを　一行表示し
    「動的インスタンス定義フィールドを持つクラス名：」を　表示し　動的インスタンス定義フィールドを持つクラス名コピーを　一行表示し
    「動的関数インスタンス型：」を　表示し　動的関数インスタンス型コピーを　一行表示し
    「動的メソッド定義クラス名：」を　表示し　動的メソッド定義クラス名コピーを　一行表示し
    「動的メソッド名：」を　表示し　動的メソッド名コピーを　一行表示し
    「動的メソッド引数型：」を　表示し　動的メソッド引数型コピーを　一行表示し。 

（文字ー＞真偽）
ひらがな？とは
    検査文字は　ワード変数

    検査文字に　入れ
    検査文字が　’ぁ’　以上で、かつ　検査文字が　’ん’　以下かを　返すこと。

（文字ー＞真偽）
カタカナ？とは
    検査文字は　ワード変数

    検査文字に　入れ
    検査文字が　’ア’　以上で、
        かつ　
    検査文字が　’ン’　以下かを　返すこと。

（文字ー＞真偽）
アルファベット？とは
    検査文字は　ワード変数

    検査文字に　入れ
    検査文字が　’Ａ’　以上で、
        かつ　
    検査文字が　’Ｚ’　以下かを　返すこと。

（文字ー＞データ）
左括弧データを得るとは
    検査文字は　ワード変数

    検査文字に　入れ
    検査文字が　’「’に　等しい　ならば　１で　終わり　つぎに　
    検査文字が　’（’に　等しい　ならば　２で　終わり　つぎに
    ０。

（文字ー＞データ）
右括弧データを得るとは
    検査文字は　ワード変数

    検査文字に　入れ
    検査文字が　’」’に　等しい　ならば　１で　終わり　つぎに　
    検査文字が　’）’に　等しい　ならば　２で　終わり　つぎに
    ０。

（文字列ー＞インデックス・真）
（文字列ー＞偽）
定義済み動的関数？とは
    検査文字列は　文字列
    検査文字列に　入れ
    関数情報の　要素数を　回数指定し、
        動的単語情報の　標準動的関数名（回数）と　検査文字列が　等しい文字列　ならば
            回数と　真をつみ　終わり
        つぎに
    繰り返し、
    偽を　返すこと。


（文字列　ー＞　文字列）
識別子を得るとは
    元々は　文字列
    変換先は　文字列実体　長さ　１００桁

    ループ回数は　変数
    状況は　変数
    特殊文字未発見は　定数　０
    特殊文字発見済みは　定数　１
    数値確定は　定数　２

    検査文字は　ワード変数

    括弧中？とは
        ２より　大きいかを　返すこと

    本体とは
    元々に　入れ
    元々の　文字数を　ループ回数に　入れ、
    変換先を　クリアし

    ループ回数が　ゼロ？　ならば　「」で　終わり、つぎに

    状況に　特殊文字未発見を　入れ

    ループ回数を　回数指定し、
        元々より　一文字切り出し、検査文字に　　入れ
        状況が　特殊文字未発見に　等しい　ならば
            変換先に　検査文字を　一文字追加し
            検査文字が　数字？　ならば
                状況に　数値確定を　入れ、
            さもなければ
                検査文字の　左括弧データを得て　ゼロ？　でなければ
                    検査文字の　左括弧データを得て　２つ　加えて　状況に　入れ
                さもなければ
                    検査文字が　ひらがな？　でなければ
                        状況に　特殊文字発見済みを　入れ、
                    つぎに
                つぎに 
            つぎに
        さもなければ
            状況が　特殊文字発見済みに　等しい　ならば、
                検査文字が　ひらがな？　でなければ
                    変換先に　検査文字を　一文字追加し、
                つぎに
            さもなければ
                状況が　括弧中？　ならば、
                    変換先に　検査文字を　一文字追加し、
                    検査文字の　右括弧データを得て　状況から　２を　引いたものに　等しい　ならば
                        打ち切って
                    つぎに
                さもなければ
                    ※数値確定
                    検査文字が　数字？　ならば
                        変換先に　検査文字を　一文字追加し、
                    つぎに
                つぎに
            つぎに
        つぎに
    繰り返したのちに
    変換先を　返すこと。

(文字列　－＞　文字列・文字列・文字列...・個数)
記号と単語を切り分けるとは
    操作行文字列は　文字列
    切り分け文字列は　１００個の　文字列　
    単語は　文字列
    操作文字は　ワード変数
    ループカウンタは　変数
    操作インデックスは　変数
    ループカウンタを　クリアし

    操作行文字列に　入れ、
    ここから
        操作行文字列から　単語切り出し　
        単語に　入れ
　　　　 単語が　空列？  ならば
            打ち切り
        つぎに
        ループカウンタを　一つ増加させ、
        切り分け文字列（ループカウンタ）に　単語を　入れ
    繰り返して、
    ループカウンタを　回数指定し
        ループカウンタから　回数を　引き、一つ加えたものを
        操作インデックスに　入れ
        切り分け文字列（操作インデックス）をつんでいくことを
    繰り返し、
    ループカウンタを　返すこと。

（構造体情報・インデックスー＞追加した定数フィールド数）
※注意！「定数フィールドの数」は　増加していません！
動的標準関数の定数フィールドを追加するとは
    関数認識構造体情報は　構造体情報
    インデックスは　変数

    （文字列・バイトー＞・）
    文字列化して追加とは
        バイト数指定で文字列化したものを、　関数認識構造体情報の　ランタイム定数フィールドに　追加し

    本体とは
    関数認識構造体情報と　インデックスに　入れ
        ※Fieldref #n+1 - #n+2, #n+3
        ０９Ｈを　１バイトで　文字列化して追加し
        関数認識構造体情報の　ランタイム定数フィールド数に　二つ加えたものを　２バイトで　文字列化して追加し
        関数認識構造体情報の　ランタイム定数フィールド数に　３つ　加えたものを　２バイトで　文字列化して追加し

        ※Class #n+2 - #n+4
        ０７Ｈを　１バイトで　文字列化して追加し
        関数認識構造体情報の　ランタイム定数フィールド数に　４つ　加えたものを　２バイトで　文字列化して追加し
        
        ※NameAndType #n+3 - #n+5,#n+6
        ０ＣＨを　１バイトで　文字列化して追加し
        関数認識構造体情報の　ランタイム定数フィールド数に　５つ　加えたものを　２バイトで　文字列化して追加し
        関数認識構造体情報の　ランタイム定数フィールド数に　６つ　加えたものを　２バイトで　文字列化して追加し
        
        ※UTF8 #n+4
    	動的単語情報型の　動的インスタンス定義フィールドを持つクラス名（インデックス）を
        ＵＴＦ８へ変換し　ＵＴＦ８のランタイム定数フィールドを得て
        関数認識構造体情報の　ランタイム定数フィールドに　追加し、
        
        ※UTF8 #n+5
    	動的単語情報型の　動的関数インスタンス名（インデックス）を
        ＵＴＦ８へ変換し　ＵＴＦ８のランタイム定数フィールドを得て
        関数認識構造体情報の　ランタイム定数フィールドに　追加し、
        
        ※UTF8 #n+6
    	動的単語情報型の　動的関数インスタンス型（インデックス）を
        ＵＴＦ８へ変換し　ＵＴＦ８のランタイム定数フィールドを得て
        関数認識構造体情報の　ランタイム定数フィールドに　追加し、
        
        ※Methodref #n+7 - #n+8, #n+9
        ０ＡＨを　１バイトで　文字列化して追加し
        関数認識構造体情報の　ランタイム定数フィールド数に　８つ　加えたものを　２バイトで　文字列化して追加し
        関数認識構造体情報の　ランタイム定数フィールド数に　９つ　加えたものを　２バイトで　文字列化して追加し
            
        ※Class #n+8 - #n+10
        ０７Ｈを　１バイトで　文字列化して追加し
        関数認識構造体情報の　ランタイム定数フィールド数に　１０つ　加えたものを　２バイトで　文字列化して追加し

        ※NameAndType #n+9 - #n+11,#n+12
        ０ＣＨを　１バイトで　文字列化して追加し
        関数認識構造体情報の　ランタイム定数フィールド数に　１１つ　加えたものを　２バイトで　文字列化して追加し
        関数認識構造体情報の　ランタイム定数フィールド数に　１２つ　加えたものを　２バイトで　文字列化して追加し

        ※UTF8 #n+10
    	動的単語情報型の　動的メソッド定義クラス名（インデックス）を
        ＵＴＦ８へ変換し　ＵＴＦ８のランタイム定数フィールドを得て
        関数認識構造体情報の　ランタイム定数フィールドに　追加し、

        ※UTF8 #n+11
    	動的単語情報型の　動的メソッド名（インデックス）を
        ＵＴＦ８へ変換し　ＵＴＦ８のランタイム定数フィールドを得て
        関数認識構造体情報の　ランタイム定数フィールドに　追加し、

        ※UTF8 #n+12
    	動的単語情報型の　動的メソッド引数型（インデックス）を
        ＵＴＦ８へ変換し　ＵＴＦ８のランタイム定数フィールドを得て
        関数認識構造体情報の　ランタイム定数フィールドに　追加し、

        １２を　返すこと。

（文字列ー＞認識した文字列・単語認識文字列）
（文字列ー＞インデックス・単語認識標準動的関数）
単語認識とは
    認識対象の単語は　文字列
    認識対象の単語に　入れ、
    認識対象の単語の　左端文字が　’「’に　等しい　ならば
        認識対象の単語の　右端文字が　’」’と　異なる　ならば
            「括弧の対応がとれていません」で　重大エラー
        つぎに
        認識対象の単語を　一文字切り出し　捨て
        認識対象の単語を　一文字右側切り出し　捨て
        認識対象の単語と　単語認識文字列を　返し、終わる
    さもなければ
        認識対象の単語が　定義済み動的関数？　ならば
            （インデックスと）　単語認識標準動的関数を　返し、終わる
        つぎに
    つぎに
    単語認識アンノウンを　返すこと。

    （構造対情報・文字列ー＞・）
    単語認識文字列時の処理とは
        関数認識構造体情報は　構造体情報
        操作文字列は　文字列

        関数認識構造体情報と　操作文字列に　入れ

        「これは文字列です」を　一行表示し
        操作文字列を　一行表示し
        
        ※String
        ００８Ｈと
        関数認識構造体情報の　ランタイム定数フィールド数に　二つ加えたものを
        二バイト合成し、　３バイトで　バイト数指定で文字列化し　関数認識構造体情報の　ランタイム定数フィールドに　追加し、

        ※UTF8
    	操作文字列を　ＵＴＦ８へ変換し　ＵＴＦ８のランタイム定数フィールドを得て
        関数認識構造体情報の　ランタイム定数フィールドに　追加し、

        ※ここから、オペコード情報
        ※aload_1
        １で　aload_nのデータを得て　関数認識構造体情報の　オペコードのバイナリを追加し

        ※ldc          //String        
        関数認識構造体情報の　ランタイム定数フィールド数に　一つ加えたもので
        ldcのデータを得て　関数認識構造体情報の　オペコードのバイナリを追加し

        ※invokevirtual //Method
        push関数を得て、invokevirtualのデータを得て　関数認識構造体情報の　オペコードのバイナリを追加し

        ※pop
        popのデータを得て　関数認識構造体情報の　オペコードのバイナリを追加し
        関数認識構造体情報の　ランタイム定数フィールド数を　２つ　増加させること。

    （構造対情報・インデックスー＞・）
    ※    15: getstatic     #16                 // Field java/lang/System.out:Ljava/io/PrintStream;
    ※    18: aload_1
    ※    19: invokevirtual #22                 // Method java/util/Stack.pop:()Ljava/lang/Object;
    ※    22: invokevirtual #26                 // Method java/io/PrintStream.println:(Ljava/lang/Object;)V
    単語認識標準動的関数時の処理とは、
        インデックスは　変数
        オフセットは　変数
        関数認識構造体情報は　構造体情報
        
        関数認識構造体情報と　インデックスに　入れ

        オフセットに　関数認識構造体情報の　ランタイム定数フィールド数を　入れ
        「これは標準動的関数です」を　一行表示し、
        関数認識構造体情報に　インデックスをつかい
        動的標準関数の定数フィールドを追加し、
        関数認識構造体情報の　ランタイム定数フィールド数を
        （追加した数だけ）　増加させ

        ※ここから、オペコード情報
        ※getstatic
        オフセットに　一つ加えたもので　getstaticのデータを得て　関数認識構造体情報の　オペコードのバイナリを追加し

        ※aload_1
        １で　aload_nのデータを得て　関数認識構造体情報の　オペコードのバイナリを追加し

        ※invokevirtual //Method
        pop関数を得て、invokevirtualのデータを得て　関数認識構造体情報の　オペコードのバイナリを追加し

        ※invokevirtual //Method
        オフセットに　７つ　加えたもので、
        invokevirtualのデータを得て　関数認識構造体情報の　オペコードのバイナリを追加すること。

（文字列・関数認識構造体情報ー＞関数認識構造体情報）
関数認識とは
    認識単語は　文字列
    認識データは　変数
    関数認識構造体情報は　構造体情報
    ループカウンタＭＡＸは　変数
    ループカウンタは　変数

    （構造対情報ー＞・）
    単語認識アンノウン時の処理とは
        捨て、「これは何か分かりません...」を　一行表示すること

    本体とは
    関数認識構造体情報に　入れ
    記号と単語を切り分け　ループカウンタＭＡＸに　入れ
    ループカウンタを　クリアし

    ここから
        ループカウンタが　ループカウンタＭＡＸに　等しい　ならば
            打ち切り
        つぎに
        ループカウンタを　一つ増加させ
        認識単語に　入れ
        認識単語を　ダブルクォートで囲んで表示し、改行し
        ループカウンタが　１に　等しい　ならば
            認識単語の　右端文字が　’は’に　等しい　ならば
                認識単語の　識別子を得て　「これは関数宣言です」を　一行表示して
                複写して　一行表示し、
                複写し　「メイン」に　等しい文字列　ならば
                    捨て　「main」を　関数認識構造体情報の　認識された関数名に　入れ
                    「([Ljava/lang/String;)V」を
                    関数認識構造体情報の　認識された関数型に　入れ
                    関数認識構造体情報の　ローカル変数数に　２を　入れ
                    
                    ※スタックリスト追加
                    ※0: new          #7　// class java/util/Stack
                    ※3: dup
                    ※4: invokespecial #9 // Method java/util/Stack."<init>":()V
                    ※7: astore_1
                    Stackクラスデータを得て　newのデータを得て　関数認識構造体情報の　オペコードのバイナリを追加し
                    dupのデータを得て　関数認識構造体情報の　オペコードのバイナリを追加し
                    Stackイニシャライザを得て　invokespecialのデータを得て　関数認識構造体情報の　オペコードのバイナリを追加し
                    １で　astore_nのデータを得て　関数認識構造体情報の　オペコードのバイナリを追加し
                さもなければ
                    関数認識構造体情報の　認識された関数名に　入れ
                    「(Ljava/util/Stack;)V」を
                    関数認識構造体情報の　認識された関数型に　入れ
                    関数認識構造体情報の　ローカル変数数に　１を　入れ
                つぎに
            つぎに
        さもなければ
            関数認識構造体情報をつみ
            認識単語の　識別子を得て　単語認識し
            認識データに　入れ
            認識データで　事例をとる
                単語認識文字列なら　単語認識文字列時の処理をし
                単語認識標準動的関数なら　単語認識標準動的関数時の処理をし
                例外なら　単語認識アンノウン時の処理をし
            事例終わり
        つぎに
    繰り返し
    ※return
    returnのデータを得て　関数認識構造体情報の　オペコードのバイナリを追加し
    。

コンパイル抑止。
メインとは
    動的単語情報を初期化し、
    ”メインとは　「こんにちは！世界！」を　一行表示し、　笑うこと”を　関数認識し
    「終了時」で　このメッセージでスタック検査。
コンパイル抑止終わり。
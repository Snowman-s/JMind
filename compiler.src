※「uopecode.src」を　コンパイル。
※「uutf8rap.src」を　コンパイル。
※「uniencode.src」を　コンパイル。
※「unidecode.src」を　コンパイル。
※「utility\ubytecomposition.src」を　コンパイル。

単語認識アンノウンは　定数　－１。
単語認識文字列は　定数　０。
単語認識整数は　定数　１。
単語認識標準動的関数は　定数　２。
単語認識計算単語は　定数　３。
単語認識検査単語は　定数　４。
単語認識for単語は　定数　５。

※Javaメソッドの仕様　
※  ローカル変数は取り敢えず1つであり、「メイン」ならjava.util.Stack<Object>宣言、そうでなければ引数にStackが渡される。
※　取り敢えずJVMスタックは２５６個積めてもいいよね？

（文字列　ー＞　文字列）
識別子を得るとは
    元々は　文字列
    変換先は　文字列実体　長さ　１００桁

    ループ回数は　変数
    状況は　変数
    特殊文字未発見は　定数　０
    特殊文字発見済みは　定数　１
    数値確定は　定数　２

    検査文字は　ワード変数

    括弧中？とは
        ２より　大きいかを　返すこと

    本体とは
    元々に　入れ
    元々の　文字数を　ループ回数に　入れ、
    変換先を　クリアし

    ループ回数が　ゼロ？　ならば　「」で　終わり、つぎに

    状況に　特殊文字未発見を　入れ

    ループ回数を　回数指定し、
        元々より　一文字切り出し、検査文字に　　入れ
        状況が　特殊文字未発見に　等しい　ならば
            変換先に　検査文字を　一文字追加し
            検査文字が　数字？　ならば
                状況に　数値確定を　入れ、
            さもなければ
                検査文字の　左括弧データを得て　ゼロ？　でなければ
                    検査文字の　左括弧データを得て　２つ　加えて　状況に　入れ
                さもなければ
                    検査文字が　ひらがな？　でなければ
                        状況に　特殊文字発見済みを　入れ、
                    つぎに
                つぎに 
            つぎに
        さもなければ
            状況が　特殊文字発見済みに　等しい　ならば、
                検査文字が　ひらがな？　でなければ
                    変換先に　検査文字を　一文字追加し、
                つぎに
            さもなければ
                状況が　括弧中？　ならば、
                    変換先に　検査文字を　一文字追加し、
                    検査文字の　右括弧データを得て　状況から　２を　引いたものに　等しい　ならば
                        打ち切って
                    つぎに
                さもなければ
                    ※数値確定
                    検査文字が　数字？　ならば
                        変換先に　検査文字を　一文字追加し、
                    つぎに
                つぎに
            つぎに
        つぎに
    繰り返したのちに
    変換先を　返すこと。

（文字列ー＞認識した文字列・単語認識文字列）
（文字列ー＞インデックス・単語認識標準動的関数）
（文字列ー＞数値・単語認識整数）
単語認識とは
    認識対象の単語は　文字列
    認識対象の単語に　入れ、
    認識対象の単語の　左端文字が　’「’に　等しい　ならば
        認識対象の単語の　右端文字が　’」’と　異なる　ならば
            「括弧の対応がとれていません」で　重大エラー
        つぎに
        認識対象の単語を　一文字切り出し　捨て
        認識対象の単語を　一文字右側切り出し　捨て
        認識対象の単語と　単語認識文字列を　返し、終わる
    さもなければ
        認識対象の単語が　定義済み動的関数？　ならば
            （インデックスと）　単語認識標準動的関数をつみ、終わる
        さもなければ
            認識対象の単語が　定義済み計算単語？　ならば
                （インデックスと）　単語認識計算単語をつみ　終わる
            さもなければ
                認識対象の単語が　定義済み検査単語？　ならば
                    （インデックスと）　単語認識検査単語をつみ　終わる
                さもなければ
                    認識対象の単語が　定義済みfor単語？　ならば
                        （インデックスと）　単語認識for単語をつみ　終わる
                    さもなければ
                        認識対象の単語を　数値変換し　真？　ならば
                            （数値と）　単語認識整数をつみ、終わる
                        さもなければ
                            捨て
                        つぎに
                    つぎに
                つぎに
            つぎに
        つぎに
    つぎに
    単語認識アンノウンを　返すこと。

（文字列ー＞・）
単語認識文字列時の処理とは
    操作文字列は　文字列

    操作文字列に　入れ

    「これは文字列です」を　文字列をテスト表示し
    操作文字列を　文字列をテスト表示し

    ※String
    ００８Ｈと
    メソッドランタイム定数フィールド数に　二つ加えたものを
    二バイト合成し、　３バイトで　バイト数指定で文字列化し
    ランタイム定数フィールドをメモファイルに書き込み、

    ※UTF8
    操作文字列を　ＵＴＦ８へ変換し　ＵＴＦ８のランタイム定数フィールドを得て
    ランタイム定数フィールドをメモファイルに書き込み、

    ※ここから、オペコード情報
    ※aload_1
    １で　aload_nのデータを得て　オペコードのバイナリを追加し

    ※ldc          //String        
    メソッドランタイム定数フィールド数に　一つ加えたもので
    ldcのデータを得て　オペコードのバイナリを追加し

    ※invokevirtual //Method
    push関数を得て、invokevirtualのデータを得て　
    オペコードのバイナリを追加し

    ※pop
    popのデータを得て　オペコードのバイナリを追加し
    メソッドランタイム定数フィールド数を　２つ　増加させること。

（・ー＞・）
単語認識アンノウン時の処理とは
    「これは何か分かりません...」を　文字列をテスト表示すること。

（読み取るまでの文字列ー＞...）
羅列文字列認識とは　本定義
    読み取り終わり文字列は　文字列
    認識単語は　文字列
    識別子は　文字列

    読み取り終わり文字列に　入れ
    ここから
        関数定義文字列ファイルより一単語読み出し　認識単語に　入れ
        認識単語を　文字列をダブルクォートで囲んでテスト表示し、
        
        認識単語の　識別子を得て　識別子に　入れ
        識別子が　読み取り終わり文字列と　等しい文字列　ならば
            打ち切って
        つぎに
        
        識別子が　定義済み分岐単語？　ならば
            ”ならば：「つぎに」まで読みます”を　文字列をテスト表示し
            単語認識分岐単語時の処理をし
            もう一度
        つぎに
        識別子で　単語認識し
        事例をとる
            単語認識文字列なら　単語認識文字列時の処理をし
            単語認識標準動的関数なら　単語認識標準動的関数時の処理をし
            単語認識整数なら　単語認識整数時の処理をし、
            単語認識計算単語なら　単語認識計算単語時の処理をし、
            単語認識検査単語なら　単語認識検査単語時の処理をし、
            単語認識for単語なら　単語認識for単語時の処理をし、
            例外なら　単語認識アンノウン時の処理をし
        事例終わり
    繰り返し
    「羅列文字列認識ループ終了時」で　このメッセージでスタック検査。

※全て関数認識構造体に書き込まれます
（・ー＞・）
関数認識とは
    認識単語は　文字列
    識別子は　文字列

    本体とは

    関数定義文字列ファイルより一単語読み出し、　認識単語に　入れ、
    認識単語の　右端文字が　’は’に　等しい　ならば
        認識単語の　識別子を得て　識別子に　入れ
        「これは関数宣言です」を　文字列をテスト表示して
        識別子を　文字列をテスト表示し、
        識別子が　「メイン」に　等しい文字列　ならば
            「main」を　メソッド認識された関数名に　入れ
            「([Ljava/lang/String;)V」を
            メソッド認識された関数型に　入れ
            メソッドローカル変数数に　２を　入れ
                    
            ※スタックリスト追加
            ※0: new          #7　// class java/util/Stack
            ※3: dup
            ※4: invokespecial #9 // Method java/util/Stack."<init>":()V
            ※7: astore_1    
            Stackクラスデータを得て　newのデータを得て　オペコードのバイナリを追加し
            dupのデータを得て　オペコードのバイナリを追加し
            Stackイニシャライザを得て　invokespecialのデータを得て　オペコードのバイナリを追加し
            １で　astore_nのデータを得て　オペコードのバイナリを追加し
        さもなければ
            識別子を
            メソッド認識された関数名に　入れ
            「(Ljava/util/Stack;)V」を
            メソッド認識された関数型に　入れ
            メソッドローカル変数数に　１を　入れ
        つぎに
    さもなければ
        認識単語を　表示し　「関数認識：これは関数のはずですが...」で　重大エラー
    つぎに
    「。」までで　羅列文字列認識し
    ※return
    returnのデータを得て　オペコードのバイナリを追加し。

コンパイル抑止。
メインとは
    動的単語情報を初期化し、
    ”メインとは　「こんにちは！世界！」を　一行表示し、　笑うこと”を　関数認識し
    「終了時」で　このメッセージでスタック検査。
コンパイル抑止終わり。
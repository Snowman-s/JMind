単語認識アンノウンは　定数　－１。
単語認識文字列は　定数　０。
単語認識標準動的関数は　定数　１。

動的単語情報型は　型紙
        関数名は　文字列
        インスタンス定義フィールドを持つクラス名は　文字列
        インスタンス名は　文字列
        インスタンス型は　文字列
        メソッド定義クラス名は　文字列
        メソッド名は　文字列
        メソッド引数型は　文字列

    関数情報は　関数名と　インスタンス定義フィールドを持つクラス名と　
                インスタンス名と　インスタンス型と
                メソッド定義クラス名と　メソッド名と 　メソッド引数型
    全体は　２個の　関数情報。

動的単語情報は　構造体　動的単語情報型。

（・ー＞・）
動的単語情報を初期化とは
    動的単語情報の　関数名（１）に　「表示」を　入れ
    動的単語情報の　インスタンス定義フィールドを持つクラス名（１）に　「java/lang/System」を　入れ
    動的単語情報の　インスタンス名（１）に　「out」を　入れ
    動的単語情報の　インスタンス型（１）に　「Ljava/io/PrintStream;」を　入れ
    動的単語情報の　メソッド定義クラス名（１）に　「java/io/PrintStream」を　入れ
    動的単語情報の　メソッド名（１）に　「print」を　入れ
    動的単語情報の　メソッド引数型（１）に　「(Ljava/lang/String;)V」を　入れ、

    動的単語情報の　関数名（２）に　「一行表示」を　入れ
    動的単語情報の　インスタンス定義フィールドを持つクラス名（２）に　「java/lang/System」を　入れ
    動的単語情報の　インスタンス名（２）に　「out」を　入れ
    動的単語情報の　インスタンス型（２）に　「Ljava/io/PrintStream;」を　入れ
    動的単語情報の　メソッド定義クラス名（２）に　「java/io/PrintStream」を　入れ
    動的単語情報の　メソッド名（２）に　「println」を　入れ
    動的単語情報の　メソッド引数型（２）に　「(Ljava/lang/String;)V」を　入れ。

（インデックスー＞関数名・インスタンス定義フィールドを持つクラス名・インスタンス名・インスタンス型・メソッド定義クラス名・メソッド名・メソッド引数型）
動的単語情報を得るとは
    インデックスは　変数
    インデックスに　入れ
    動的単語情報の　関数名（インデックス）
    動的単語情報の　インスタンス定義フィールドを持つクラス名（インデックス）
    動的単語情報の　インスタンス名（インデックス）
    動的単語情報の　インスタンス型（インデックス）
    動的単語情報の　メソッド定義クラス名（インデックス）
    動的単語情報の　メソッド名（インデックス）
    動的単語情報の　メソッド引数型（インデックス）。 

（注意！動的単語情報を得るに続いて使用してください）
（......ー＞・）
動的単語情報を表示とは
    関数名コピーは　文字列
    インスタンス定義フィールドを持つクラス名コピーは　文字列　
    インスタンス名コピーは　文字列
    インスタンス型コピーは　文字列
    メソッド定義クラス名コピーは　文字列
    メソッド名コピーは　文字列
    メソッド引数型コピーは　文字列
    
    関数名コピーと
    インスタンス定義フィールドを持つクラス名コピーと
    インスタンス名コピーと
    インスタンス型コピーと
    メソッド定義クラス名コピーと
    メソッド名コピーと
    メソッド引数型コピーに　入れ、

    「関数名：」を　表示し　関数名コピーを　一行表示し
    「インスタンス定義フィールドを持つクラス名：」を　表示し　インスタンス定義フィールドを持つクラス名コピーを　一行表示し
    「インスタンス型：」を　表示し　インスタンス型コピーを　一行表示し
    「メソッド定義クラス名：」を　表示し　メソッド定義クラス名コピーを　一行表示し
    「メソッド名：」を　表示し　メソッド名コピーを　一行表示し
    「メソッド引数型：」を　表示し　メソッド引数型コピーを　一行表示し。 

（文字ー＞真偽）
ひらがな？とは
    検査文字は　ワード変数

    検査文字に　入れ
    検査文字が　’ぁ’　以上で、かつ　検査文字が　’ん’　以下かを　返すこと。

（文字ー＞真偽）
カタカナ？とは
    検査文字は　ワード変数

    検査文字に　入れ
    検査文字が　’ア’　以上で、
        かつ　
    検査文字が　’ン’　以下かを　返すこと。

（文字ー＞真偽）
アルファベット？とは
    検査文字は　ワード変数

    検査文字に　入れ
    検査文字が　’Ａ’　以上で、
        かつ　
    検査文字が　’Ｚ’　以下かを　返すこと。

（文字ー＞データ）
左括弧データを得るとは
    検査文字は　ワード変数

    検査文字に　入れ
    検査文字が　’「’に　等しい　ならば　１で　終わり　つぎに　
    検査文字が　’（’に　等しい　ならば　２で　終わり　つぎに
    ０。

（文字ー＞データ）
右括弧データを得るとは
    検査文字は　ワード変数

    検査文字に　入れ
    検査文字が　’」’に　等しい　ならば　１で　終わり　つぎに　
    検査文字が　’）’に　等しい　ならば　２で　終わり　つぎに
    ０。

（文字列ー＞インデックス・真）
（文字列ー＞偽）
定義済み動的関数？とは
    検査文字列は　文字列
    検査文字列に　入れ
    関数情報の　要素数を　回数指定し、
        動的単語情報の　関数名（回数）と　検査文字列が　等しい文字列　ならば
            回数と　真をつみ　終わり
        つぎに
    繰り返し、
    偽を　返すこと。


（文字列　ー＞　文字列）
識別子を得るとは
    元々は　文字列
    変換先は　文字列実体　長さ　１００桁

    ループ回数は　変数
    状況は　変数
    特殊文字未発見は　定数　０
    特殊文字発見済みは　定数　１
    数値確定は　定数　２

    検査文字は　ワード変数

    括弧中？とは
        ２より　大きいかを　返すこと

    本体とは
    元々に　入れ
    元々の　文字数を　ループ回数に　入れ、
    変換先を　クリアし

    ループ回数が　ゼロ？　ならば　「」で　終わり、つぎに

    状況に　特殊文字未発見を　入れ

    ループ回数を　回数指定し、
        元々より　一文字切り出し、検査文字に　　入れ
        状況が　特殊文字未発見に　等しい　ならば
            変換先に　検査文字を　一文字追加し
            検査文字が　数字？　ならば
                状況に　数値確定を　入れ、
            さもなければ
                検査文字の　左括弧データを得て　ゼロ？　でなければ
                    検査文字の　左括弧データを得て　２つ　加えて　状況に　入れ
                さもなければ
                    検査文字が　ひらがな？　でなければ
                        状況に　特殊文字発見済みを　入れ、
                    つぎに
                つぎに 
            つぎに
        さもなければ
            状況が　特殊文字発見済みに　等しい　ならば、
                検査文字が　ひらがな？　でなければ
                    変換先に　検査文字を　一文字追加し、
                つぎに
            さもなければ
                状況が　括弧中？　ならば、
                    変換先に　検査文字を　一文字追加し、
                    検査文字の　右括弧データを得て　状況から　２を　引いたものに　等しい　ならば
                        打ち切って
                    つぎに
                さもなければ
                    ※数値確定
                    検査文字が　数字？　ならば
                        変換先に　検査文字を　一文字追加し、
                    つぎに
                つぎに
            つぎに
        つぎに
    繰り返したのちに
    変換先を　返すこと。

(文字列　－＞　文字列・文字列・文字列...・個数)
記号と単語を切り分けるとは
    操作行文字列は　文字列
    切り分け文字列は　１００個の　文字列　
    単語は　文字列
    操作文字は　ワード変数
    ループカウンタは　変数
    操作インデックスは　変数
    ループカウンタを　クリアし

    操作行文字列に　入れ、
    ここから
        操作行文字列から　単語切り出し　単語に　入れ
　　　　 単語が　空列？  ならば
            打ち切り
        つぎに
        ループカウンタを　一つ増加させ、
        切り分け文字列（ループカウンタ）に　単語を　入れ
    繰り返して、
    ループカウンタを　回数指定し
        ループカウンタから　回数を　引き、一つ加えたものを
        操作インデックスに　入れ
        切り分け文字列（操作インデックス）をつんでいくことを
    繰り返し、
    ループカウンタを　返すこと。

（文字列ー＞認識した文字列・単語認識文字列）
（文字列ー＞インデックス・単語認識標準動的関数）
単語認識とは
    認識対象の単語は　文字列
    認識対象の単語に　入れ、
    認識対象の単語の　左端文字が　’「’に　等しい　ならば
        認識対象の単語の　右端文字が　’」’と　異なる　ならば
            「括弧の対応がとれていません」で　重大エラー
        つぎに
        認識対象の単語を　一文字切り出し　捨て
        認識対象の単語を　一文字右側切り出し　捨て
        認識対象の単語と　単語認識文字列を　返し、終わる
    さもなければ
        認識対象の単語が　定義済み動的関数？　ならば
            （インデックスと）　単語認識標準動的関数を　返し、終わる
        つぎに
    つぎに
    単語認識アンノウンを　返すこと。

（文字列？ー＞？）
関数認識とは
    認識単語は　文字列
    認識データは　変数

    単語認識文字列時の処理とは
        「これは文字列です」を　一行表示し
        一行表示すること
    
    単語認識標準動的関数時の処理とは、
        「これは標準動的関数です」を　一行表示し
        動的単語情報を得て　動的単語情報を表示すること
    
    単語認識アンノウン時の処理とは
        「これは何か分かりません...」を　一行表示すること

    本体とは
    記号と単語を切り分け、　回数指定し
        認識単語に　入れ
        認識単語を　ダブルクォートで囲んで表示し、改行し
        回数が　１に　等しい　ならば
            認識単語の　右端文字が　’は’に　等しい　ならば
                認識単語の　識別子を得て　「これは関数宣言です」を　一行表示して
                複写して　一行表示し、
                「メイン」に　等しい文字列　ならば
                    ※スタックリスト追加
                つぎに
            つぎに
        さもなければ
            認識単語の　識別子を得て　単語認識し
            認識データに　入れ
            認識データで　事例をとる
                単語認識文字列なら　単語認識文字列時の処理をし
                単語認識標準動的関数なら　単語認識標準動的関数時の処理をし
                例外なら　単語認識アンノウン時の処理をし
            事例終わり
        つぎに
    繰り返し。

メインとは
    動的単語情報を初期化し、
    ”メインとは　「こんにちは！世界！」を　一行表示し、　笑うこと”を　関数認識し
    「終了時」で　このメッセージでスタック検査。
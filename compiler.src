（文字列　ー＞　文字列）
識別子を得るとは
    元々は　文字列
    変換先は　文字列実体　長さ　識別子許容バイト数

    ループ回数は　変数
    状況は　変数
    特殊文字未発見は　定数　０
    特殊文字発見済みは　定数　１
    数値確定は　定数　２

    検査文字は　ワード変数

    括弧中？とは
        ２より　大きいかを　返すこと

    本体とは
    元々に　入れ
    元々の　文字数を　ループ回数に　入れ、
    変換先を　クリアし

    ループ回数が　ゼロ？　ならば　「」で　終わり、つぎに

    状況に　特殊文字未発見を　入れ

    ループ回数を　回数指定し、
        元々より　一文字切り出し、検査文字に　　入れ
        状況が　特殊文字未発見に　等しい　ならば
            変換先に　検査文字を　一文字追加し
            検査文字が　数字？　ならば
                状況に　数値確定を　入れ、
            さもなければ
                検査文字の　左括弧データを得て　ゼロ？　でなければ
                    検査文字の　左括弧データを得て　２つ　加えて　状況に　入れ
                さもなければ
                    検査文字が　ひらがな？　でなければ
                        状況に　特殊文字発見済みを　入れ、
                    つぎに
                つぎに 
            つぎに
        さもなければ
            状況が　特殊文字発見済みに　等しい　ならば、
                検査文字が　ひらがな？　でなければ
                    変換先に　検査文字を　一文字追加し、
                つぎに
            さもなければ
                状況が　括弧中？　ならば、
                    変換先に　検査文字を　一文字追加し、
                    検査文字の　右括弧データを得て　状況から　２を　引いたものに　等しい　ならば
                        打ち切って
                    つぎに
                さもなければ
                    ※数値確定
                    検査文字が　数字？　ならば
                        変換先に　検査文字を　一文字追加し、
                    つぎに
                つぎに
            つぎに
        つぎに
    繰り返したのちに
    変換先を　返すこと。

※word\cwordcheck内で仮定義
（...読み取るまでの文字列２・読み取るまでの文字列１・）
（文字列数(３まで)ー＞読み取り終わった文字列）
指定数の文字列まで羅列文字列認識とは　本定義
    読み取り終わり文字列は　３個の　文字列
    読み取り終わり文字列数は　変数
    認識単語は　文字列
    識別子は　文字列

    読み取り終わり文字列数に　入れ

    読み取り終わり文字列数が　３より　大きい　ならば
        「指定数の文字列まで羅列文字列認識」続
        「・指定数は３以下でなければなりません」で
        重大エラー
    つぎに

    読み取り終わり文字列数を　回数指定し
        読み取り終わり文字列（回数）に　入れ
    繰り返し
    ここから
        関数定義文字列ファイルより一単語読み出し　認識単語に　入れ
        認識単語を　文字列をダブルクォートで囲んでテスト表示し、

        認識単語の　識別子を得て 識別子を等価単語へ変換し
            識別子に　入れ
        認識単語の　助詞を得て　真？　ならば
            文字列をダブルクォートで囲んでテスト表示し、
        つぎに
        読み取り終わり文字列数を　回数指定し
            識別子が　読み取り終わり文字列（回数）と
                等しい文字列　ならば
                読み取り終わり文字列（回数）をつみ
                終わり
            つぎに
        繰り返し

        識別子で　単語認識し
        認識された単語に相当する処理をし
    繰り返し。

※word\cwordcheck内で仮定義
（読み取るまでの文字列ー＞...）
羅列文字列認識とは　本定義
    １をつみ　指定数の文字列まで羅列文字列認識し
    捨て。

※全て関数認識構造体に書き込まれます
（・ー＞・）
関数認識とは
    認識単語は　文字列
    識別子は　文字列

    本体とは

    関数定義文字列ファイルより一単語読み出し、　認識単語に　入れ、
    認識単語の　右端文字が　’は’に　等しい　ならば
        認識単語の　識別子を得て　識別子に　入れ

        「関数宣言：」で
        識別子を　タグ付きテスト表示し

        識別子が　「メイン」に　等しい文字列　ならば
            「main」を　メソッド認識された関数名に　入れ
            「([Ljava/lang/String;)V」を
            メソッド認識された関数型に　入れ
            ２つ　メソッドローカル変数数を指定数増加し
            Stack変数インデックスに　１を　入れ
            ※スタックリスト追加
            ※0: new          #7　// class java/util/Stack
            ※3: dup
            ※4: invokespecial #9 // Method java/util/Stack."<init>":()V
            ※7: astore_1    
            Stackクラスデータを得て　newのデータを得て　オペコードのバイナリを追加し
            dupのデータを得て　オペコードのバイナリを追加し
            Stackイニシャライザを得て　invokespecialのデータを得て　オペコードのバイナリを追加し
            Stack変数インデックスで　astoreのデータを可能なら短縮して得て
            オペコードのバイナリを追加し

            ※！！！
            （String配列インデックスがつまれた）
            ローカル変数メモファイル書き込み準備し
                String配列クラスデータを得て
                Classのスタックマップテーブルデータを得て
                ローカル変数のバイナリを文字列追加し
                Stackクラスデータを得て
                Classのスタックマップテーブルデータを得て
                ローカル変数のバイナリを文字列追加し
        さもなければ
            識別子を
            メソッド認識された関数名に　入れ
            「(Ljava/util/LinkedList;)V」を
            メソッド認識された関数型に　入れ
            １つ　メソッドローカル変数数を指定数増加し
            Stack変数インデックスに　０を　入れ
            ローカル変数メモファイル書き込み準備し
                Stackクラスデータを得て
                Classのスタックマップテーブルデータを得て
                ローカル変数のバイナリを文字列追加し
        つぎに
    さもなければ
        認識単語を　表示し　
        "関数認識：この単語は「は」で終わらなければなりません"で
        コンパイルエラー
    つぎに
    「。」までで　羅列文字列認識し
    ※return
    returnのデータを得て　オペコードのバイナリを追加し。
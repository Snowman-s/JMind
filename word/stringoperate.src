文字列操作単語情報型は　型紙
        文字列操作単語名は　文字列
        文字列操作使用データ数は　バイト変数
        ※0なら文字列、1なら整数
            文字列操作使用データ型一つは　バイト変数
        文字列操作使用データ型は　２個の　文字列操作使用データ型一つ
        文字列操作でIntegerIntValueを使用するかは　バイト変数
        文字列操作でIntegerValueOfを使用するかは　バイト変数

    文字列操作単語情報は
        文字列操作単語名と
        文字列操作使用データ数と
        文字列操作使用データ型と
        文字列操作でIntegerIntValueを使用するかと
        文字列操作でIntegerValueOfを使用するか
    全体は　６個の　文字列操作単語情報。

文字列操作単語情報集は　構造体　文字列操作単語情報型。

ローカル。
現在定義済み文字列操作単語数は　変数。
（単語名・オペコード１...・オペコード数・使用整数数ー＞・）
文字列操作単語情報集一単語セットとは
    インデックスは　変数

    現在定義済み文字列操作単語数に　一つ加え
    インデックスに　入れ

    文字列操作単語情報集の
    文字列操作でIntegerValueOfを使用するか（インデックス）に　入れ
    
    複写し　５より　大きい　ならば
        ※定義ミス
        「stringoperate:５つ以下の変数しか使用できません」で　重大エラー
    つぎに

    複写し
    文字列操作単語情報集の
    文字列操作使用データ数（インデックス）に　入れ

    回数指定し
        複写し
        文字列操作単語情報集の
        文字列操作使用データ型一つ（インデックス、回数）に　入れ

        文字列操作単語情報集の
        文字列操作でIntegerIntValueを使用するか（インデックス）との　ＯＲを
        文字列操作単語情報集の
        文字列操作でIntegerIntValueを使用するか（インデックス）に　入れ
    繰り返し
    文字列操作単語情報集の　文字列操作単語名（インデックス）に　入れ
    現在定義済み文字列操作単語数を　一つ増加させ。

グローバル。

（・ー＞・）
文字列操作単語情報集を初期化とは
    文字列操作単語情報集を　クリアし
    現在定義済み文字列操作単語数を　クリアし
    ※単語名
    ※使用引数型１
    ※使用引数型２...
    ※仕様引数型数
    ※IntegerValueOfを使用するか

    「文字数」
    ０
    １
    真
    文字列操作単語情報集一単語セットし

    「空列？」
    ０
    １
    真
    文字列操作単語情報集一単語セットし

    「等文字列？」
    ０
    ０
    ２
    真
    文字列操作単語情報集一単語セットし
    
    「一文字検索」
    ０
    １
    ２
    真
    文字列操作単語情報集一単語セットし

    「検索」
    ０
    ０
    ２
    真
    文字列操作単語情報集一単語セットし
    
    「合成」
    ０
    ０
    ２
    偽
    文字列操作単語情報集一単語セットし

    現在定義済み文字列操作単語数が　文字列操作単語情報の　要素数と　異なる　ならば
        「文字列操作単語の初期化に失敗」で　重大エラー
    つぎに。

（文字列ー＞インデックス・真）
（文字列ー＞偽）
定義済み文字列操作単語？とは
    検査文字列は　文字列
    検査文字列に　入れ
    文字列操作単語情報の　要素数を　回数指定し、
        文字列操作単語情報集の　文字列操作単語名（回数）と　検査文字列が　等しい文字列　ならば
            回数と　真をつみ　終わり
        つぎに
    繰り返し、
    偽を　返すこと。

※使用しないはずのインデックスは０となります。

※インデックスー＞
※Stringインデックス
※[Integerインデックス・IntegerIntValueインデックス]
※[IntegerValueOfインデックス]
文字列操作単語の定数フィールドを追加するとは
    インデックスは　変数

    インデックスに　入れ

    ※Class
    メソッドランタイム定数フィールド数と　「java/lang/String」で
    クラスランタイム定数フィールド情報を得て　
    ランタイム定数フィールド取得後処理し
    (Stringインデックスが積まれた)

    文字列操作単語情報集の
    文字列操作でIntegerIntValueを使用するか（インデックス）が　真？　ならば
        ※Class
        メソッドランタイム定数フィールド数と　「java/lang/Integer」で
        クラスランタイム定数フィールド情報を得て　
        ランタイム定数フィールド取得後処理し
        (Integerインデックスが積まれた)

        ※Methodref
        メソッドランタイム定数フィールド数と
        「java/lang/Integer」と　「intValue」と　「()I」で
        Methodランタイム定数フィールド情報を得て　
        ランタイム定数フィールド取得後処理し
        (IntValueインデックスが積まれた)
    さもなければ
        ０と　０をつみ
    つぎに

    文字列操作単語情報集の
    文字列操作でIntegerValueOfを使用するか（インデックス）が　真？　ならば
        ※Methodref
        メソッドランタイム定数フィールド数と
        「java/lang/Integer」と　「valueOf」と　「(I)Ljava/lang/Integer;」で
        Methodランタイム定数フィールド情報を得て　
        ランタイム定数フィールド取得後処理し
        (valueOfインデックスが積まれた)
    さもなければ
        ０をつみ
    つぎに。

単語認識文字数時の処理は　仮定義。
単語認識空列？時の処理は　仮定義。
単語認識等文字列？時の処理は　仮定義。
単語認識一文字検索時の処理は　仮定義。
単語認識検索時の処理は　仮定義。
単語認識合成時の処理は　仮定義。

（インデックスー＞・）
※    aload_<Stack>
※    [データロード]
※    [各々のメソッドの処理]
※    [整数ならIntegerへラップ]
※    addFirst()
単語認識文字列操作単語時の処理とは、
    Stringインデックスは　変数
    Integerインデックスは　変数
    IntegerIntValueインデックスは　変数
    IntegerValueOfインデックスは　変数

    インデックスは　変数

    インデックスに　入れ
    「これは文字列操作単語です」を　文字列をテスト表示し、

    インデックスをつかい
    文字列操作単語の定数フィールドを追加し

    Stringインデックスと
    Integerインデックスと
    IntegerIntValueインデックスと
    IntegerValueOfインデックスに　入れ

    ※aload_<Stack>
    Stackaloadのデータを得て
    オペコードのバイナリを追加し

    文字列操作単語情報集の
    文字列操作使用データ数（インデックス）を　回数指定し
        ※aload_<Stack>
        Stackaloadのデータを得て
        オペコードのバイナリを追加し

        ※invokevirtual //Method
        文字列操作単語情報集の
        文字列操作使用データ数（インデックス）から
        回数を　引き　複写し　ゼロ？　ならば
            （引いたデータを）　捨て
            pop関数を得て、
        さもなければ
            （引いたデータで）
            iconst_iのデータを得て　オペコードのバイナリを追加し
            remove関数を得て、
        つぎに
        invokevirtualのデータを得て　オペコードのバイナリを追加し

        ※checkcast
        文字列操作単語情報集の　文字列操作使用データ型一つ（インデックス、回数）が　ゼロ？　ならば
            ※文字列
            Stringインデックスで　checkcastのデータを得て　オペコードのバイナリを追加し
        さもなければ
            ※整数
            Integerインデックスで　checkcastのデータを得て　オペコードのバイナリを追加し
            IntegerIntValueインデックスで　invokevirtualのデータを得て　オペコードのバイナリを追加し
        つぎに
    繰り返し

    インデックスで
    事例をとる
        １なら　単語認識文字数時の処理をし
        ２なら　単語認識空列？時の処理をし
        ３なら　単語認識等文字列？時の処理をし
        ４なら　単語認識一文字検索時の処理をし
        ５なら　単語認識検索時の処理をし
        ６なら　単語認識合成時の処理をし
        例外なら　無処理
    事例終わり

    IntegerValueOfインデックスが　ゼロ？　でなければ
        IntegerValueOfインデックスで　invokestaticのデータを得て　オペコードのバイナリを追加し
    つぎに

    push関数を得て　invokevirtualのデータを得て　オペコードのバイナリを追加。

単語認識文字数時の処理とは　本定義
    ※Methodref
    メソッドランタイム定数フィールド数と
    「java/lang/String」と　「length」と　「()I」で
    Methodランタイム定数フィールド情報を得て　
    ランタイム定数フィールド取得後処理し

    invokevirtualのデータを得て　オペコードのバイナリを追加し。

単語認識空列？時の処理とは　本定義
    ※Methodref
    メソッドランタイム定数フィールド数と
    「java/lang/String」と　「isEmpty」と　「()Z」で
    Methodランタイム定数フィールド情報を得て　
    ランタイム定数フィールド取得後処理し

    invokevirtualのデータを得て　オペコードのバイナリを追加し。

単語認識等文字列？時の処理とは　本定義
    ※Methodref
    メソッドランタイム定数フィールド数と
    「java/lang/String」と　「equals」と　「(Ljava/lang/Object;)Z」で
    Methodランタイム定数フィールド情報を得て　
    ランタイム定数フィールド取得後処理し

    invokevirtualのデータを得て　オペコードのバイナリを追加し。

単語認識一文字検索時の処理とは　本定義
    ※Methodref
    メソッドランタイム定数フィールド数と
    「java/lang/String」と　「indexOf」と　「(I)I」で
    Methodランタイム定数フィールド情報を得て　
    ランタイム定数フィールド取得後処理し

    invokevirtualのデータを得て　オペコードのバイナリを追加し

    １で　iconst_iのデータを得て　オペコードのバイナリを追加し
    iaddのデータを得て　オペコードのバイナリを追加し。

単語認識検索時の処理とは　本定義
    ※Methodref
    メソッドランタイム定数フィールド数と
    「java/lang/String」と　「indexOf」と　「(Ljava/lang/String;)I」で
    Methodランタイム定数フィールド情報を得て　
    ランタイム定数フィールド取得後処理し

    invokevirtualのデータを得て　オペコードのバイナリを追加し

    １で　iconst_iのデータを得て　オペコードのバイナリを追加し
    iaddのデータを得て　オペコードのバイナリを追加し。

単語認識合成時の処理とは　本定義
    ※Methodref
    メソッドランタイム定数フィールド数と
    「java/lang/String」と　「concat」と　「(Ljava/lang/String;)Ljava/lang/String;」で
    Methodランタイム定数フィールド情報を得て　
    ランタイム定数フィールド取得後処理し

    invokevirtualのデータを得て　オペコードのバイナリを追加し。
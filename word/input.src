入力単語情報型は　型紙
        入力単語名は　文字列
        入力メソッド名は　文字列
        入力メソッド型は　文字列
        入力ラッパークラスは　文字列
        入力ラッパーメソッド型は　文字列

    入力単語情報は
        入力単語名と
        入力メソッド名と　入力メソッド型と
        入力ラッパークラスと　入力ラッパーメソッド型
    全体は　３個の　入力単語情報。

入力単語情報集は　構造体　入力単語情報型。

ローカル。
現在定義済み入力単語数は　変数。
（単語名・メソッド名・メソッド型・ラッパークラス・ラッパーメソッド型ー＞・）
入力単語情報集一単語セットとは
    インデックスは　変数

    現在定義済み入力単語数に　一つ加え
    インデックスに　入れ

    入力単語情報集の　入力ラッパーメソッド型（インデックス）に　入れ
    入力単語情報集の　入力ラッパークラス（インデックス）に　入れ
    入力単語情報集の　入力メソッド型（インデックス）に　入れ
    入力単語情報集の　入力メソッド名（インデックス）に　入れ
    入力単語情報集の　入力単語名（インデックス）に　入れ
    現在定義済み入力単語数を　一つ増加させ。

グローバル。
（・ー＞・）
入力単語情報集を初期化とは
    現在定義済み入力単語数を　クリアし
    入力単語情報集を　クリアし

    ※単語名
    ※メソッド名
    ※メソッド型
    ※ラッパークラス
    ※ラッパーメソッド型

    「一文字列入力」
    「next」
    「()Ljava/lang/String;」
    「」
    「」
    入力単語情報集一単語セットし

    「文字列入力」　
    「nextLine」
    「()Ljava/lang/String;」
    「」
    「」
    入力単語情報集一単語セットし

    「一数値入力」　
    「nextInt」
    「()I」
    「java/lang/Integer」
    「(I)Ljava/lang/Integer;」
    入力単語情報集一単語セットし

    現在定義済み入力単語数が　入力単語情報の　要素数と　異なる　ならば
        「入力単語の初期化に失敗」で　重大エラー
    つぎに。

（文字列ー＞インデックス・真）
（文字列ー＞偽）
定義済み入力単語？とは
    検査文字列は　文字列
    検査文字列に　入れ
    入力単語情報の　要素数を　回数指定し、
        入力単語情報集の　入力単語名（回数）と　検査文字列が　等しい文字列　ならば
            回数と　真をつみ　終わり
        つぎに
    繰り返し、
    偽を　返すこと。

（インデックスー＞）
（Scannerインデックス・System.inインデックス・<init>インデックス・）
（next*インデックス・[valueOfインデックス(必要ないなら-１)]）
入力単語の定数フィールドを追加するとは
    インデックスは　変数

    インデックスに　入れ

    ※Class
    メソッドランタイム定数フィールド数と
    「java/util/Scanner」で
    クラスランタイム定数フィールド情報を得て
    ランタイム定数フィールド取得後処理し
    (Scannerインデックスがつまれた)

    ※Fieldref
    メソッドランタイム定数フィールド数と
    「java/lang/System」と
    「in」と
    「Ljava/io/InputStream;」で
    Fieldランタイム定数フィールド情報を得て　
    ランタイム定数フィールド取得後処理し
    (System.inインデックスがつまれた)

    ※Methodref
    メソッドランタイム定数フィールド数と
    「java/util/Scanner」と
    「<init>」と
    「(Ljava/io/InputStream;)V」で
    Methodランタイム定数フィールド情報を得て　
    ランタイム定数フィールド取得後処理し　
    (initインデックスがつまれた)

    ※Methodref (next*)
    メソッドランタイム定数フィールド数と
    「java/util/Scanner」と
    入力単語情報集の　入力メソッド名（インデックス）と
    入力単語情報集の　入力メソッド型（インデックス）とで
    Methodランタイム定数フィールド情報を得て
    ランタイム定数フィールド取得後処理し
    (next*インデックスがつまれた)

    ※Methodref (ラッパー)
    入力単語情報集の　入力ラッパークラス（インデックス）が　空列？　ならば
        －１をつみ
    さもなければ
        メソッドランタイム定数フィールド数と
        入力単語情報集の　入力ラッパークラス（インデックス）と
        「valueOf」と
        入力単語情報集の　入力ラッパーメソッド型（インデックス）とで
        Methodランタイム定数フィールド情報を得て　　
        ランタイム定数フィールド取得後処理し
    つぎに
    (ラッパーメソッドのインデックスがつまれた)。

（インデックスー＞・）
※        aload_1
※        new        // class java/util/Scanner
※        dup
※        getstatic     // Field java/lang/System.in:Ljava/io/InputStream;
※        invokespecial // Method java/util/Scanner."<init>":(Ljava/io/InputStream;)V
※        invokevirtual // Method java/util/Scanner.nextInt:()I
※        invokestatic  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
※        invokevirtual // Method java/utilg/Stack.push:(Ljava/lang/Object;)Ljava/lang/Object;
※        pop
単語認識入力単語時の処理とは、
    入力単語インデックスは　変数
    Scannerインデックスは　変数
    inインデックスは　変数
    initインデックスは　変数
    nextインデックスは　変数
    valueOfインデックスは　変数

    入力単語インデックスに　入れ

    入力単語インデックスをつかい
    入力単語の定数フィールドを追加し、

    Scannerインデックスと
    inインデックスと
    initインデックスと
    nextインデックスと
    valueOfインデックスに　入れ

    ※aload_1
    Stackaloadのデータを得て　オペコードのバイナリを追加し

    ※new
    Scannerインデックスで　newのデータを得て
    オペコードのバイナリを追加し

    ※dup
    dupのデータを得て
    オペコードのバイナリを追加し

    ※getstatic
    inインデックスで　getstaticのデータを得て
    オペコードのバイナリを追加し

    ※invokespecial
    initインデックスで　invokespecialのデータを得て
    オペコードのバイナリを追加し

    ※invokevirtual
    nextインデックスで　invokevirtualのデータを得て
    オペコードのバイナリを追加し

    ※invokestatic
    valueOfインデックスが　正の数？　ならば
        valueOfインデックスで invokestaticのデータを得て
        オペコードのバイナリを追加し
    つぎに

    ※invokevirtual
    push関数を得て invokevirtualのデータを得て
    オペコードのバイナリを追加すること。
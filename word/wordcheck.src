単語構造体初期化とは
    分岐単語情報集を初期化し
    ループ単語情報集を初期化し
    入力単語情報集を初期化し
    表示単語情報を初期化し、
    計算単語情報集を初期化し、
    検査単語情報集を初期化し
    スタック操作単語情報集を初期化し
    文字列操作単語情報集を初期化し。

※助詞の優先度によって以下のようになるように、swapを書き込む。
※Mind（・－＞・）
※JVM（数値１・数値２ー＞数値１・数値２）
※JVM（数値１・数値２ー＞数値２・数値１）
助詞優先度によるスワップとは　本定義
    助詞１優先度は　変数
    助詞２優先度は　変数

    助詞２の　助詞の優先度を得て　助詞２優先度に　入れ
    助詞１の　助詞の優先度を得て　助詞１優先度に　入れ

    助詞２優先度が　正？
        かつ
    助詞１優先度が　正？　ならば
        助詞２優先度が　助詞１優先度よりも　大きい　ならば
            「助詞優先度の関係により数値がスワップされます」を　文字列をテスト表示し
            swapのデータを得て　オペコードのバイナリを追加し
        つぎに
    つぎに。

（文字列ー＞認識した文字列・単語認識文字列）
（文字列ー＞インデックス・単語認識標準動的関数）
（文字列ー＞数値・単語認識整数）
（以下、続いてゆく。この単語から戻ってきたスタック状態から一つ使用し、「～時の処理」系単語呼び出し）
単語認識とは　本定義
    認識対象の単語は　文字列

    （文字列ー＞・）
    これは何か表示とは　
        「この単語は」を　第一合成文字列設定し
        さらに合成し　捨て
        「です」を　さらに合成し
        文字列をテスト表示

    本体とは
    識別子を得て 識別子を等価単語へ変換し
    認識対象の単語に　入れ、

    認識対象の単語が　文字単語？　ならば
        （文字と）　単語認識文字をつみ、
        「文字定数」で　これは何か表示し
        複写し　文字をテスト表示し
        終わる
    つぎに

    認識対象の単語が　文字列単語？　ならば
        （文字列と）　単語認識文字列をつみ、
        「文字列定数」で　これは何か表示し
        複写し　文字列をテスト表示し
        終わる
    つぎに

    認識対象の単語が　定義済み表示関数？　ならば
        （インデックスと）　単語認識表示単語をつみ、
        「表示単語」で　これは何か表示し
        終わる
    つぎに

    認識対象の単語が　定義済み計算単語？　ならば
        （インデックスと）　単語認識計算単語をつみ
        「計算単語」で　これは何か表示し
        終わる
    つぎに

    認識対象の単語が　定義済み検査単語？　ならば
        （インデックスと）　単語認識検査単語をつみ
        「検査単語」で　これは何か表示し
        終わる
    つぎに
    
    認識対象の単語が　定義済みループ単語？　ならば
        （インデックスと）　単語認識ループ単語をつみ
        「ループ単語」で　これは何か表示し、
        終わる
    つぎに

    認識対象の単語が　定義済み回数単語？　ならば
        単語認識回数単語をつみ
        「『回数』」で　これは何か表示し、
        終わる
    つぎに

    認識対象の単語が　定義済み分岐単語？　ならば
        （インデックスと）　単語認識分岐単語をつみ　
        「分岐単語」で　これは何か表示し、
        終わる
    つぎに
    
    認識対象の単語が　定義済み選択単語？　ならば
        （インデックスと）　単語認識選択をつみ　
        "「選択」"で　これは何か表示し、
        終わる
    つぎに

    認識対象の単語が　定義済み入力単語？　ならば
        （インデックスと）　単語認識入力単語をつみ
        「入力単語」で　これは何か表示し、
        終わる
    つぎに

    認識対象の単語が　定義済みスタック操作単語？　ならば
        （インデックスと）　単語認識スタック操作単語をつみ
        「スタック操作単語」で　これは何か表示し、
        終わる
    つぎに

    認識対象の単語が　定義済み文字列操作単語？　ならば
        （インデックスと）　単語認識文字列操作単語をつみ
        「文字列操作単語」で　これは何か表示し、
        終わる
    つぎに

    認識対象の単語が　定義済みループ操作単語？　ならば
        （インデックスと）　単語認識ループ操作単語をつみ
        「ループ操作単語」で　これは何か表示し、
        終わる
    つぎに

    認識対象の単語が　定義済み変数？　ならば
        （インデックスと）　単語認識変数単語をつみ
        「定義済み変数」で　これは何か表示し、
        終わる
    つぎに

    認識対象の単語が　定義済み変数操作単語？　ならば
        （インデックスと）　単語認識変数操作単語をつみ
        「変数操作単語」で　これは何か表示し、
        終わる
    つぎに

    認識対象の単語が　定義済みその他単語？　ならば
        （インデックスと）　単語認識その他単語をつみ
        「その他単語」で　これは何か表示し、
        終わる
    つぎに

    認識対象の単語を　数値変換し　真？　ならば
        単語認識整数をつみ、終わる
    さもなければ
        捨て
    つぎに

    単語認識アンノウンを　返すこと。

（・ー＞・）
単語認識アンノウン時の処理とは
    「定義されてない単語が出現しました」で
    コンパイルエラー。

（データ・単語認識～ー＞・）
認識された単語に相当する処理とは　本定義
    ※変数操作のみ別定義となる。
    複写し　
    単語認識変数操作単語と　異なる
        かつ
    変数インデックス１が　０より　大きい　ならば
        Stackaloadのデータを得て　オペコードのバイナリを追加し
        変数インデックス１で
        iloadのデータを可能なら短縮して得て
        オペコードのバイナリを追加し
        一つ整数をスタックに積むオペコードを追加し
        変数インデックス１を　クリアし
    つぎに
    事例をとる
        単語認識その他単語なら　単語認識その他単語時の処理をし
        単語認識文字なら　単語認識文字時の処理をし
        単語認識文字列なら　単語認識文字列時の処理をし
        単語認識表示単語なら　単語認識表示単語時の処理をし
        単語認識整数なら　単語認識整数時の処理をし、
        単語認識計算単語なら　単語認識計算単語時の処理をし、
        単語認識検査単語なら　単語認識検査単語時の処理をし、
        単語認識分岐単語なら　単語認識分岐単語時の処理をし、
        単語認識ループ単語なら　単語認識ループ単語時の処理をし、
        単語認識回数単語なら　単語認識回数単語時の処理をし、
        単語認識スタック操作単語なら　単語認識スタック操作単語時の処理をし、
        単語認識文字列操作単語なら　単語認識文字列操作単語時の処理をし、
        単語認識入力単語なら　単語認識入力単語時の処理をし、
        単語認識ループ操作単語なら　単語認識ループ操作単語時の処理をし、
        単語認識変数単語なら　単語認識変数時の処理をし、
        単語認識変数操作単語なら　単語認識変数操作単語時の処理をし、
        単語認識選択なら　単語認識選択時の処理をし、
        例外なら　単語認識アンノウン時の処理をし
    事例終わり。
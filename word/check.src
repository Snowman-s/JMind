検査単語情報型は　型紙
        検査単語名は　文字列
        検査オペコードは　文字列実体　長さ　８バイト
        検査使用整数数は　バイト変数

    検査単語情報は
        検査単語名と　検査オペコードと　検査使用整数数　
    全体は　１１つの　検査単語情報。

検査単語情報集は　構造体　検査単語情報型。

ローカル。
現在定義済み検査単語数は　変数。
（単語名・オペコード１...・オペコード数・使用整数数ー＞・）
検査単語情報集一単語セットとは
    インデックスは　変数

    現在定義済み検査単語数に　一つ加え
    インデックスに　入れ
    検査単語情報集の　検査使用整数数（インデックス）に　入れ
    回数指定し
        （バイト数を）　複写し
        検査単語情報集の　検査オペコード（インデックス）を　少し右寄せし
        バイト数指定で文字列化し
        検査単語情報集の　検査オペコード（インデックス）に　左側追加し
    繰り返し
    検査単語情報集の　検査単語名（インデックス）に　入れ
    現在定義済み検査単語数を　一つ増加させ。

グローバル。
（・ー＞・）
検査単語情報集を初期化とは
    検査単語情報集を　クリアし
    現在定義済み検査単語数を　クリアし
    ※単語名
    ※検査オペコード
    ※検査オペコード数
    ※使用整数数

    「等」
    ７で　if_icmpneのデータを得て
    １で　iconst_iのデータを得て
    ４で　gotoのデータを得て
    ０で　iconst_iのデータを得て
    ４
    ２
    検査単語情報集一単語セットし

    「異」
    ７で　if_icmpneのデータを得て
    ０で　iconst_iのデータを得て
    ４で　gotoのデータを得て
    １で　iconst_iのデータを得て
    ４
    ２
    検査単語情報集一単語セットし

    「以上」
    ７で　if_icmpltのデータを得て
    １で　iconst_iのデータを得て
    ４で　gotoのデータを得て
    ０で　iconst_iのデータを得て
    ４
    ２
    検査単語情報集一単語セットし

    「以下」
    ７で　if_icmpgtのデータを得て
    １で　iconst_iのデータを得て
    ４で　gotoのデータを得て
    ０で　iconst_iのデータを得て
    ４
    ２
    検査単語情報集一単語セットし

    「大」
    ７で　if_icmpleのデータを得て
    １で　iconst_iのデータを得て
    ４で　gotoのデータを得て
    ０で　iconst_iのデータを得て
    ４
    ２
    検査単語情報集一単語セットし

    「小」
    ７で　if_icmpgeのデータを得て
    １で　iconst_iのデータを得て
    ４で　gotoのデータを得て
    ０で　iconst_iのデータを得て
    ４
    ２
    検査単語情報集一単語セットし

    「ゼロ？」
    ７で　ifeqのデータを得て
    ０で　iconst_iのデータを得て
    ４で　gotoのデータを得て
    １で　iconst_iのデータを得て
    ４
    １
    検査単語情報集一単語セットし

    「ゼロ以外？」
    ７で　ifeqのデータを得て
    １で　iconst_iのデータを得て
    ４で　gotoのデータを得て
    ０で　iconst_iのデータを得て
    ４
    １
    検査単語情報集一単語セットし

    「正？」
    ７で　ifltのデータを得て
    １で　iconst_iのデータを得て
    ４で　gotoのデータを得て
    ０で　iconst_iのデータを得て
    ４
    １
    検査単語情報集一単語セットし

    「負？」
    ７で　ifltのデータを得て
    ０で　iconst_iのデータを得て
    ４で　gotoのデータを得て
    １で　iconst_iのデータを得て
    ４
    １
    検査単語情報集一単語セットし

    「正数？」
    ７で　ifleのデータを得て
    １で　iconst_iのデータを得て
    ４で　gotoのデータを得て
    ０で　iconst_iのデータを得て
    ４
    １
    検査単語情報集一単語セットし

    現在定義済み検査単語数が　検査単語情報の　要素数と　異なる　ならば
        「検査単語の初期化に失敗」で　重大エラー
    つぎに。

（文字列ー＞インデックス・真）
（文字列ー＞偽）
定義済み検査単語？とは
    検査文字列は　文字列
    検査文字列に　入れ
    検査単語情報の　要素数を　回数指定し、
        検査単語情報集の　検査単語名（回数）と　検査文字列が　等しい文字列　ならば
            回数と　真をつみ　終わり
        つぎに
    繰り返し、
    偽を　返すこと。

（・ー＞Integerインデックス・IntegerIntValueインデックス・IntegerValueOfインデックス）
検査単語の定数フィールドを追加するとは
    ※Class
    メソッドランタイム定数フィールド数と　「java/lang/Integer」で
    クラスランタイム定数フィールド情報を得て
    ランタイム定数フィールド取得後処理し
    （Integerインデックスがつまれた）

    ※Methodref
    メソッドランタイム定数フィールド数と
    「java/lang/Integer」と　「intValue」と　「()I」で
    Methodランタイム定数フィールド情報を得て
    ランタイム定数フィールド取得後処理し
    （IntValueインデックスがつまれた）

    ※Methodref
    メソッドランタイム定数フィールド数と
    「java/lang/Integer」と　「valueOf」と　「(I)Ljava/lang/Integer;」で
    Methodランタイム定数フィールド情報を得て
    ランタイム定数フィールド取得後処理し
    （ValueOfインデックスがつまれた）。

（構造対情報・インデックスー＞・）
※    aload_1
※    aload_1
※    invokevirtual (pop)
※    checkcast (Integer)
※    invokevirtual (intValue)
※    aload_1
※    invokevirtual (pop)
※    checkcast (Integer)
※    invokevirtual (intValue)
※    (操作)
※    invokestatic (valueOf)
※    invokevirtual(push)
※    pop
単語認識検査単語時の処理とは、
    検査単語インデックスは　変数
    
    Integer定義インデックスは　変数
    IntegerIntValue定義インデックスは　変数
    IntegerValueOf定義インデックスは　変数

    本体とは
    検査単語インデックスに　入れ

    検査単語の定数フィールドを追加し、

    Integer定義インデックスと
    IntegerIntValue定義インデックスと
    IntegerValueOf定義インデックスに　入れ

    ※aload_1
    Stackaloadのデータを得て　オペコードのバイナリを追加し

    検査単語情報集の
    検査使用整数数（検査単語インデックス）を　回数指定し
        ※aload_1
        Stackaloadのデータを得て　オペコードのバイナリを追加し

        ※invokevirtual //Method
        検査単語情報集の
        検査使用整数数（検査単語インデックス）から
        回数を　引き　複写し　ゼロ？　ならば
            （引いたデータを）　捨て
            pop関数を得て、
        さもなければ
            （引いたデータで）
            iconst_iのデータを得て　オペコードのバイナリを追加し
            remove関数を得て、
        つぎに
        invokevirtualのデータを得て　オペコードのバイナリを追加し

        ※checkcast #n+1
        Integer定義インデックスで
        checkcastのデータを得て、オペコードのバイナリを追加することを
        ※invokevirtual #n+3
        IntegerIntValue定義インデックスで
        invokevirtualのデータを得て　オペコードのバイナリを追加し
    繰り返し

    検査単語情報集の　検査使用整数数（検査単語インデックス）が　２に　等しい　ならば
        助詞優先度によるスワップし
    つぎに

    検査単語情報集の　検査オペコード（検査単語インデックス）を
    オペコードのバイナリを文字列で追加し

        ０ＦＦＨを
        １バイトで　スタックマップテーブルのバイナリを追加し

        真で　オペコードメモバイト数を
        複写し

        メソッドスタックマップテーブルオフセットを　引き
        一つ引き
        ２バイトで　スタックマップテーブルのバイナリを追加してから

        メソッドスタックマップテーブルオフセットに　入れ

        現在使用中のメソッドローカル変数数を
        ２バイトで　スタックマップテーブルのバイナリを追加し

        ローカル変数メモファイル読み出し準備し
        メモされたローカル変数をスタックマップテーブルメモファイルに書き込み

        １を
        ２バイトで　スタックマップテーブルのバイナリを追加し
        
        ７を
        １バイトで　スタックマップテーブルのバイナリを追加し

        Stackクラスデータを得て
        ２バイトで　スタックマップテーブルのバイナリを追加し
        
        メソッドスタックマップテーブル情報数を　一つ増加し

        ０ＦＦＨを
        １バイトで　スタックマップテーブルのバイナリを追加し

        ０を
        ２バイトで　スタックマップテーブルのバイナリを追加し

        メソッドスタックマップテーブルオフセットを　一つ増加させ

        現在使用中のメソッドローカル変数数を
        ２バイトで　スタックマップテーブルのバイナリを追加し

        ローカル変数メモファイル読み出し準備し
        メモされたローカル変数をスタックマップテーブルメモファイルに書き込み

        ２を
        ２バイトで　スタックマップテーブルのバイナリを追加し
        
        ７を
        １バイトで　スタックマップテーブルのバイナリを追加し

        Stackクラスデータを得て
        ２バイトで　スタックマップテーブルのバイナリを追加し

        １を
        １バイトで　スタックマップテーブルのバイナリを追加し

        メソッドスタックマップテーブル情報数を　一つ増加し

    ※invokestatic
    IntegerValueOf定義インデックスで　invokestaticのデータを得て
    オペコードのバイナリを追加し

    ※invokevirtual
    push関数を得て、invokevirtualのデータを得て
    オペコードのバイナリを追加すること。
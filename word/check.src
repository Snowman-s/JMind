検査単語情報型は　型紙
        検査単語名は　文字列
        検査オペコードは　文字列

    検査単語情報は　検査単語名と　検査オペコード　
    全体は　６個の　検査単語情報。

検査単語情報集は　暗黙の構造体　検査単語情報型。

（・ー＞・）
検査単語情報集を初期化とは
    ※「等しい」
    ※47: if_icmpne     54
    ※50: iconst_1　※！trueを表す
    ※51: goto          55
    ※54: iconst_0　※！falseを表す
    検査単語情報集の　検査単語名（１）に　「等」を　入れ
    ｛Ａ０　００　０７｝Ｃ　
    ｛０４｝Ｃ
    ｛Ａ７　００　０４｝Ｃ
    ｛０３｝を
    検査単語情報集の　検査オペコード（１）に　入れ

    ※「異なる」
    ※47: if_icmpne     54
    ※50: iconst_0
    ※51: goto          55
    ※54: iconst_1
    検査単語情報集の　検査単語名（２）に　「異」を　入れ
    ｛Ａ０　００　０７｝Ｃ　
    ｛０３｝Ｃ
    ｛Ａ７　００　０４｝Ｃ
    ｛０４｝を
    検査単語情報集の　検査オペコード（２）に　入れ
    
    ※「以上」
    ※47: if_icmplt     54
    ※50: iconst_1
    ※51: goto          55
    ※54: iconst_0
    検査単語情報集の　検査単語名（３）に　「以上」を　入れ
    ｛Ａ１　００　０７｝Ｃ　
    ｛０４｝Ｃ
    ｛Ａ７　００　０４｝Ｃ
    ｛０３｝を
    検査単語情報集の　検査オペコード（３）に　入れ
    
    ※「以下」
    ※47: if_icmpgt     54
    ※50: iconst_1
    ※51: goto          55
    ※54: iconst_0
    検査単語情報集の　検査単語名（４）に　「以下」を　入れ
    ｛Ａ３　００　０７｝Ｃ　
    ｛０４｝Ｃ
    ｛Ａ７　００　０４｝Ｃ
    ｛０３｝を
    検査単語情報集の　検査オペコード（４）に　入れ
    
    ※「大きい」
    ※47: if_icmple     54
    ※50: iconst_1
    ※51: goto          55
    ※54: iconst_0
    検査単語情報集の　検査単語名（５）に　「大」を　入れ
    ｛Ａ４　００　０７｝Ｃ　
    ｛０４｝Ｃ
    ｛Ａ７　００　０４｝Ｃ
    ｛０３｝を
    検査単語情報集の　検査オペコード（５）に　入れ
    
    ※「小さい」
    ※47: if_icmpge     54
    ※50: iconst_1
    ※51: goto          55
    ※54: iconst_0
    検査単語情報集の　検査単語名（６）に　「小」を　入れ
    ｛Ａ２　００　０７｝Ｃ　
    ｛０４｝Ｃ
    ｛Ａ７　００　０４｝Ｃ
    ｛０３｝を
    検査単語情報集の　検査オペコード（６）に　入れ。

（文字列ー＞インデックス・真）
（文字列ー＞偽）
定義済み検査単語？とは
    検査文字列は　文字列
    検査文字列に　入れ
    検査単語情報の　要素数を　回数指定し、
        検査単語情報集の　検査単語名（回数）と　検査文字列が　等しい文字列　ならば
            回数と　真をつみ　終わり
        つぎに
    繰り返し、
    偽を　返すこと。

（構造体情報・インデックスー＞）
（Integerインデックス・IntegerIntValueインデックス・IntegerValueOfインデックス・String配列インデックス）
（Stackインデックス・追加した定数フィールド数）
※注意！「定数フィールドの数」は　増加していません！
検査単語の定数フィールドを追加するとは
    関数認識構造体情報は　構造体情報
    インデックスは　変数

    追加数は　変数

    （文字列・バイトー＞・）
    文字列化して追加とは
        バイト数指定で文字列化したものを、　関数認識構造体情報の　ランタイム定数フィールドに　追加し

    本体とは
        関数認識構造体情報と　インデックスに　入れ
        追加数を　クリアし

        関数認識構造体情報の　ランタイム定数フィールド数と　「java/lang/Integer」で
            クラスランタイム定数フィールド情報を得て　偽？　ならば
            関数認識構造体情報の　ランタイム定数フィールドに　追加し
            追加数を　増加させ
        つぎに
        ※！！！
        （Integerインデックスがつまれた）

        ※Methodref
        関数認識構造体情報の　ランタイム定数フィールド数に　追加数を　加え
        「java/lang/Integer」と　「intValue」と　「()I」で
            Methodランタイム定数フィールド情報を得て　偽？　ならば
            関数認識構造体情報の　ランタイム定数フィールドに　追加し
            追加数を　増加させ
        つぎに

            ※！！！
            （IntValueインデックスがつまれた）

        ※Methodref
        関数認識構造体情報の　ランタイム定数フィールド数に　追加数を　加え
        「java/lang/Integer」と　「valueOf」と　「(I)Ljava/lang/Integer;」で
            Methodランタイム定数フィールド情報を得て　偽？　ならば
            関数認識構造体情報の　ランタイム定数フィールドに　追加し
            追加数を　増加させ
        つぎに
            ※！！！
            （ValueOfインデックスがつまれた）

        ※Class
        関数認識構造体情報の　ランタイム定数フィールド数に　追加数を　加え
        「[Ljava/lang/String;」で
            クラスランタイム定数フィールド情報を得て　偽？　ならば
            関数認識構造体情報の　ランタイム定数フィールドに　追加し
            追加数を　増加させ
        つぎに
        ※！！！
        （String配列インデックスがつまれた）

        ※Class
        関数認識構造体情報の　ランタイム定数フィールド数に　追加数を　加え
        「java/util/Stack」で
            クラスランタイム定数フィールド情報を得て　偽？　ならば
            関数認識構造体情報の　ランタイム定数フィールドに　追加し
            追加数を　増加させ
        つぎに
        ※！！！
        （Stackインデックスがつまれた）

        追加数を　返すこと。

（構造対情報・インデックスー＞・）
※    aload_1
※    aload_1
※    invokevirtual (pop)
※    checkcast (Integer)
※    invokevirtual (intValue)
※    aload_1
※    invokevirtual (pop)
※    checkcast (Integer)
※    invokevirtual (intValue)
※    (操作)
※    invokestatic (valueOf)
※    invokevirtual(push)
※    pop
単語認識検査単語時の処理とは、
    インデックスは　変数
    
    Integer定義インデックスは　変数
    IntegerIntValue定義インデックスは　変数
    IntegerValueOf定義インデックスは　変数
    String配列定義インデックスは　変数
    Stack定義インデックスは　変数

    スタックマップテーブル操作インデックスは　変数
    関数認識構造体情報は　構造体情報

    スタックマップテーブル整数追加とは
        バイト数指定で文字列化し
        関数認識構造体情報の
        スタックマップテーブル情報一つ（スタックマップテーブル操作インデックス）に
        追加し

    本体とは
    関数認識構造体情報と　インデックスに　入れ
    
    「これは検査単語です」を　一行表示し、

    関数認識構造体情報と　インデックスをつかい
    検査単語の定数フィールドを追加し、

    関数認識構造体情報の　ランタイム定数フィールド数を
    （追加した数だけ）　増加させ

    Integer定義インデックスと
    IntegerIntValue定義インデックスと
    IntegerValueOf定義インデックスと
    String配列定義インデックスと
    Stack定義インデックスに　入れ

    ※aload_1
    １で　aload_nのデータを得て　関数認識構造体情報の　オペコードのバイナリを追加し

    ２を　回数指定し
        ※aload_1
        １で　aload_nのデータを得て　関数認識構造体情報の　オペコードのバイナリを追加し
        ※invokevirtual //Method
        pop関数を得て、invokevirtualのデータを得て　関数認識構造体情報の　オペコードのバイナリを追加し
        ※checkcast #n+1
        Integer定義インデックスで
        checkcastのデータを得て、関数認識構造体情報の　オペコードのバイナリを追加することを
        ※invokevirtual #n+3
        IntegerIntValue定義インデックスで
        invokevirtualのデータを得て　関数認識構造体情報の　オペコードのバイナリを追加し
    繰り返し
    ※swap
    swapのデータを得て　関数認識構造体情報の　オペコードのバイナリを追加し

    検査単語情報集の　検査オペコード（インデックス）を
    関数認識構造体情報の　オペコードと引数のデータのバイナリに　追加し

        関数認識構造体情報の　スタックマップテーブル情報数に　一つ加え　
        スタックマップテーブル操作インデックスに　入れ

        ０ＦＦＨを
        １バイトで　スタックマップテーブル整数追加し

        関数認識構造体情報の　オペコードと引数のデータのバイナリの
        バイト数から　一つ引き
        ２バイトで　スタックマップテーブル整数追加し
    
        ２を
        ２バイトで　スタックマップテーブル整数追加し

        ７を
        １バイトで　スタックマップテーブル整数追加し

        String配列定義インデックスを
        ２バイトで　スタックマップテーブル整数追加し
        
        ７を
        １バイトで　スタックマップテーブル整数追加し

        Stack定義インデックスを
        ２バイトで　スタックマップテーブル整数追加し
        
        １を
        ２バイトで　スタックマップテーブル整数追加し
        
        ７を
        １バイトで　スタックマップテーブル整数追加し

        Stack定義インデックスを
        ２バイトで　スタックマップテーブル整数追加し
        
        関数認識構造体情報の　スタックマップテーブル情報数を　一つ増加し

        関数認識構造体情報の　スタックマップテーブル情報数に　一つ加え　
        スタックマップテーブル操作インデックスに　入れ

        ０ＦＦＨを
        １バイトで　スタックマップテーブル整数追加し

        ０を
        ２バイトで　スタックマップテーブル整数追加し
    
        ２を
        ２バイトで　スタックマップテーブル整数追加し

        ７を
        １バイトで　スタックマップテーブル整数追加し

        String配列定義インデックスを
        ２バイトで　スタックマップテーブル整数追加し
        
        ７を
        １バイトで　スタックマップテーブル整数追加し

        Stack定義インデックスを
        ２バイトで　スタックマップテーブル整数追加し
        
        ２を
        ２バイトで　スタックマップテーブル整数追加し
        
        ７を
        １バイトで　スタックマップテーブル整数追加し

        Stack定義インデックスを
        ２バイトで　スタックマップテーブル整数追加し

        １を
        １バイトで　スタックマップテーブル整数追加し

        関数認識構造体情報の　スタックマップテーブル情報数を　一つ増加し

    ※invokestatic
    IntegerValueOf定義インデックスで　invokestaticのデータを得て
    関数認識構造体情報の　オペコードのバイナリを追加し

    ※invokevirtual
    push関数を得て、invokevirtualのデータを得て　関数認識構造体情報の　オペコードのバイナリを追加し

    ※pop
    popのデータを得て　関数認識構造体情報の　オペコードのバイナリを追加すること。
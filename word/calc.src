計算単語情報型は　型紙
        計算単語名は　文字列
        計算オペコードは　変数

    計算単語情報は　計算単語名と　計算オペコード　
    全体は　５個の　計算単語情報。

計算単語情報集は　暗黙の構造体　計算単語情報型。

（・ー＞・）
計算単語情報集を初期化とは
    計算単語情報集の　計算単語名（１）に　「加」を　入れ
    iaddのデータを得て　（バイト数を）　捨て
    計算単語情報集の　計算オペコード（１）に　入れ

    計算単語情報集の　計算単語名（２）に　「引」を　入れ
    isubのデータを得て　（バイト数を）　捨て
    計算単語情報集の　計算オペコード（２）に　入れ

    計算単語情報集の　計算単語名（３）に　「掛」を　入れ
    imulのデータを得て　（バイト数を）　捨て
    計算単語情報集の　計算オペコード（３）に　入れ

    計算単語情報集の　計算単語名（４）に　「割」を　入れ
    idivのデータを得て　（バイト数を）　捨て
    計算単語情報集の　計算オペコード（４）に　入れ

    計算単語情報集の　計算単語名（５）に　「割余」を　入れ
    iremのデータを得て　（バイト数を）　捨て
    計算単語情報集の　計算オペコード（５）に　入れ。

（文字列ー＞インデックス・真）
（文字列ー＞偽）
定義済み計算単語？とは
    検査文字列は　文字列
    検査文字列に　入れ
    計算単語情報の　要素数を　回数指定し、
        計算単語情報集の　計算単語名（回数）と　検査文字列が　等しい文字列　ならば
            回数と　真をつみ　終わり
        つぎに
    繰り返し、
    偽を　返すこと。

（構造体情報・インデックスー＞）
（Integerインデックス・IntegerIntValueインデックス・IntegerValueOfインデックス・追加した定数フィールド数）
※注意！「定数フィールドの数」は　増加していません！
計算単語の定数フィールドを追加するとは
    関数認識構造体情報は　構造体情報
    インデックスは　変数
    Integerインデックスは　変数
    追加数は　変数

    （文字列・バイトー＞・）
    文字列化して追加とは
        バイト数指定で文字列化したものを、　関数認識構造体情報の　ランタイム定数フィールドに　追加し

    本体とは
        関数認識構造体情報と　インデックスに　入れ
        追加数を　クリアし

        関数認識構造体情報の　ランタイム定数フィールド数と　「java/lang/Integer」で
            クラスランタイム定数フィールド情報を得て　真？　ならば
            Integerインデックスに　入れ
        さもなければ
            関数認識構造体情報の　ランタイム定数フィールドに　追加し
            追加数を　増加させ
            Integerインデックスに　入れ
        つぎに

        ※！！！
        Integerインデックスをつみ

        ※Methodref #n+3 - #n+1,#n+4
        ０ＡＨを　１バイトで　文字列化して追加し
        Integerインデックスを　２バイトで　文字列化して追加し
        関数認識構造体情報の　ランタイム定数フィールド数に
        追加数に　２つ　加えたものを　加え　２バイトで　文字列化して追加し
        
            ※！！！
            関数認識構造体情報の　ランタイム定数フィールド数に
            追加数に　一つ加えたものを　加えてつみ

        追加数を　一つ増加させ

        ※NameAndType #n+4 - #n+5,#n+6
        ０ＣＨを　１バイトで　文字列化して追加し
        関数認識構造体情報の　ランタイム定数フィールド数に
        追加数に　２つ　加えたものを　加え　２バイトで　文字列化して追加し
        関数認識構造体情報の　ランタイム定数フィールド数に
        追加数に　３つ　加えたものを　加え　２バイトで　文字列化して追加し

        追加数を　一つ増加させ

        ※UTF8 #n+5
    	「intValue」を
        ＵＴＦ８へ変換し　ＵＴＦ８のランタイム定数フィールドを得て
        関数認識構造体情報の　ランタイム定数フィールドに　追加し、
        
        追加数を　一つ増加させ
        
        ※UTF8 #n+6
    	「()I」を
        ＵＴＦ８へ変換し　ＵＴＦ８のランタイム定数フィールドを得て
        関数認識構造体情報の　ランタイム定数フィールドに　追加し、

        追加数を　一つ増加させ

        ※Methodref #n+7         #n+1.#n+8
        ０ＡＨを　１バイトで　文字列化して追加し
        Integerインデックスを　２バイトで　文字列化して追加し
        関数認識構造体情報の　ランタイム定数フィールド数に
        追加数に　２つ　加えたものを　加え　２バイトで　文字列化して追加し

            ※！！！
            関数認識構造体情報の　ランタイム定数フィールド数に
            追加数に　一つ加えたものを　加えてつみ

        追加数を　一つ増加させ

        ※NameAndType #n+8 - #n+9,#n+10
        ０ＣＨを　１バイトで　文字列化して追加し
        関数認識構造体情報の　ランタイム定数フィールド数に
        追加数に　２つ　加えたものを　加え　２バイトで　文字列化して追加し
        関数認識構造体情報の　ランタイム定数フィールド数に
        追加数に　３つ　加えたものを　加え　２バイトで　文字列化して追加し

        追加数を　一つ増加させ

        ※UTF8 #n+9 valueOf
    	「valueOf」を
        ＵＴＦ８へ変換し　ＵＴＦ８のランタイム定数フィールドを得て
        関数認識構造体情報の　ランタイム定数フィールドに　追加し、

        追加数を　一つ増加させ
        
        ※UTF8 #n+10 (I)Ljava/lang/Integer; 
    	「(I)Ljava/lang/Integer;」を
        ＵＴＦ８へ変換し　ＵＴＦ８のランタイム定数フィールドを得て
        関数認識構造体情報の　ランタイム定数フィールドに　追加し、
        
        追加数を　一つ増加させ

        追加数を　返すこと。

（構造対情報・インデックスー＞・）
※    aload_1
※    aload_1
※    invokevirtual (pop)
※    checkcast (Integer)
※    invokevirtual (intValue)
※    aload_1
※    invokevirtual (pop)
※    checkcast (Integer)
※    invokevirtual (intValue)
※    iaddとかその他
※    invokestatic (valueOf)
※    invokevirtual(push)
※    pop
単語認識計算単語時の処理とは、
    インデックスは　変数
    オフセットは　変数
    Integer定義インデックスは　変数
    IntegerIntValue定義インデックスは　変数
    IntegerValueOf定義インデックスは　変数
    関数認識構造体情報は　構造体情報

    関数認識構造体情報と　インデックスに　入れ
    
    オフセットに　関数認識構造体情報の　ランタイム定数フィールド数を　入れ
    「これは計算単語です」を　一行表示し、

    関数認識構造体情報と　インデックスをつかい
    計算単語の定数フィールドを追加し、

    関数認識構造体情報の　ランタイム定数フィールド数を
    （追加した数だけ）　増加させ

    Integer定義インデックスと
    IntegerIntValue定義インデックスと
    IntegerValueOf定義インデックスに　入れ

    ※aload_1
    １で　aload_nのデータを得て　関数認識構造体情報の　オペコードのバイナリを追加し

    ２を　回数指定し
        ※aload_1
        １で　aload_nのデータを得て　関数認識構造体情報の　オペコードのバイナリを追加し
        ※invokevirtual //Method
        pop関数を得て、invokevirtualのデータを得て　関数認識構造体情報の　オペコードのバイナリを追加し
        ※checkcast #n+1
        Integer定義インデックスで
        checkcastのデータを得て、関数認識構造体情報の　オペコードのバイナリを追加することを
        ※invokevirtual #n+3
        IntegerIntValue定義インデックスで
        invokevirtualのデータを得て　関数認識構造体情報の　オペコードのバイナリを追加し
    繰り返し
    ※swap
    swapのデータを得て　関数認識構造体情報の　オペコードのバイナリを追加し

    計算単語情報集の　計算オペコード（インデックス）で
    １バイトで 　関数認識構造体情報の　オペコードのバイナリを追加し 

    ※invokestatic
    IntegerValueOf定義インデックスで　invokestaticのデータを得て
    関数認識構造体情報の　オペコードのバイナリを追加し

    ※invokevirtual
    push関数を得て、invokevirtualのデータを得て　関数認識構造体情報の　オペコードのバイナリを追加し

    ※pop
    popのデータを得て　関数認識構造体情報の　オペコードのバイナリを追加すること。
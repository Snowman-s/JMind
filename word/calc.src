計算単語情報型は　型紙
        計算単語名は　文字列
        計算オペコードは　文字列実体　長さ　２バイト
        計算使用整数数は　バイト変数

    計算単語情報は
        計算単語名と　計算オペコードと　計算使用整数数
    全体は　１２個の　計算単語情報。

計算単語情報集は　暗黙の構造体　計算単語情報型。

ローカル。
（データ・バイト数・インデックス）
計算オペコードセットとは
    インデックスは　変数

    インデックスに　入れ
    バイト数指定で文字列化し、
    計算単語情報集の
    計算オペコード（インデックス）に　入れ。

グローバル。
（・ー＞・）
計算単語情報集を初期化とは
    計算単語情報集の　計算単語名（１）に　「加」を　入れ
    iaddのデータを得て　１で
    計算オペコードセットし
    計算使用整数数（１）に　２を　入れ

    計算単語情報集の　計算単語名（２）に　「引」を　入れ
    isubのデータを得て  ２で
    計算オペコードセットし
    計算使用整数数（２）に　２を　入れ

    計算単語情報集の　計算単語名（３）に　「掛」を　入れ
    imulのデータを得て　３で
    計算オペコードセットし
    計算使用整数数（３）に　２を　入れ

    計算単語情報集の　計算単語名（４）に　「割」を　入れ
    idivのデータを得て　４で
    計算オペコードセットし
    計算使用整数数（４）に　２を　入れ

    計算単語情報集の　計算単語名（５）に　「割余」を　入れ
    iremのデータを得て　５で
    計算オペコードセットし
    計算使用整数数（５）に　２を　入れ

    計算単語情報集の　計算単語名（６）に　「ＡＮＤ」を　入れ
    iandのデータを得て　６で
    計算オペコードセットし
    計算使用整数数（６）に　２を　入れ

    計算単語情報集の　計算単語名（７）に　「ＯＲ」を　入れ
    iorのデータを得て　７で
    計算オペコードセットし
    計算使用整数数（７）に　２を　入れ

    計算単語情報集の　計算単語名（８）に　「ＸＯＲ」を　入れ
    ixorのデータを得て　８で
    計算オペコードセットし
    計算使用整数数（８）に　２を　入れ

    計算単語情報集の　計算単語名（９）に　「左シフト」を　入れ
    ishlのデータを得て　９で
    計算オペコードセットし
    計算使用整数数（９）に　２を　入れ

    計算単語情報集の　計算単語名（１０）に　「右シフト」を　入れ
    iushrのデータを得て　１０で
    計算オペコードセットし
    計算使用整数数（１０）に　２を　入れ

    計算単語情報集の　計算単語名（１１）に　「負数」を　入れ
    inegのデータを得て　１１で
    計算オペコードセットし
    計算使用整数数（１１）に　１を　入れ

    計算単語情報集の　計算単語名（１２）に　「ＮＯＴ」を　入れ
    －１で　iconst_iのデータを得て　バイト数指定で文字列化し
    計算単語情報集の　計算オペコード（１２）に　入れ
    ixorのデータを得て　バイト数指定で文字列化し
    計算単語情報集の　計算オペコード（１２）に　追加し
    計算使用整数数（１２）に　１を　入れ。

（文字列ー＞インデックス・真）
（文字列ー＞偽）
定義済み計算単語？とは
    検査文字列は　文字列
    検査文字列に　入れ
    計算単語情報の　要素数を　回数指定し、
        計算単語情報集の　計算単語名（回数）と　検査文字列が　等しい文字列　ならば
            回数と　真をつみ　終わり
        つぎに
    繰り返し、
    偽を　返すこと。

（インデックスー＞）
（Integerインデックス・IntegerIntValueインデックス・IntegerValueOfインデックス）
計算単語の定数フィールドを追加するとは
    インデックスは　変数
    追加数は　変数

    （文字列・バイトー＞・）
    文字列化して追加とは
        バイト数指定で文字列化したものを、　
        ランタイム定数フィールドをメモファイルに書き込み

    本体とは
        インデックスに　入れ
        追加数を　クリアし

        メソッドランタイム定数フィールド数と　「java/lang/Integer」で
            クラスランタイム定数フィールド情報を得て　偽？　ならば
            ランタイム定数フィールドをメモファイルに書き込み
            追加数を　増加させ
        つぎに
        (Integerインデックスがつまれた)
        
        ※Methodref
        メソッドランタイム定数フィールド数に　追加数を　加え
        「java/lang/Integer」と　「intValue」と　「()I」で
            Methodランタイム定数フィールド情報を得て　偽？　ならば
            ランタイム定数フィールドをメモファイルに書き込み
            追加数を　増加させ
        つぎに
        (IntValueインデックスがつまれた)

        ※Methodref
        メソッドランタイム定数フィールド数に　追加数を　加え
        「java/lang/Integer」と　「valueOf」と　「(I)Ljava/lang/Integer;」で
            Methodランタイム定数フィールド情報を得て　偽？　ならば
            ランタイム定数フィールドをメモファイルに書き込み
            追加数を　増加させ
        つぎに

        (ValueOfインデックスがつまれた)

        メソッドランタイム定数フィールド数を
            追加数だけ　増加させ。

（インデックスー＞・）
※    aload_1
※    aload_1
※    invokevirtual (pop)
※    checkcast (Integer)
※    invokevirtual (intValue)
※    aload_1
※    invokevirtual (pop)
※    checkcast (Integer)
※    invokevirtual (intValue)
※    iaddとかその他
※    invokestatic (valueOf)
※    invokevirtual(push)
※    pop
単語認識計算単語時の処理とは、
    インデックスは　変数
    オフセットは　変数
    Integer定義インデックスは　変数
    IntegerIntValue定義インデックスは　変数
    IntegerValueOf定義インデックスは　変数

    インデックスに　入れ
    
    オフセットに　メソッドランタイム定数フィールド数を　入れ
    「これは計算単語です」を　文字列をテスト表示し、

    インデックスをつかい
    計算単語の定数フィールドを追加し、

    Integer定義インデックスと
    IntegerIntValue定義インデックスと
    IntegerValueOf定義インデックスに　入れ

    ※aload_1
    Stackaloadのデータを得て　オペコードのバイナリを追加し

    計算使用整数数（インデックス）を　回数指定し
        ※aload_1
        Stackaloadのデータを得て　オペコードのバイナリを追加し
        ※invokevirtual //Method
        pop関数を得て、invokevirtualのデータを得て　オペコードのバイナリを追加し
        ※checkcast #n+1
        Integer定義インデックスで
        checkcastのデータを得て、オペコードのバイナリを追加することを
        ※invokevirtual #n+3
        IntegerIntValue定義インデックスで
        invokevirtualのデータを得て　オペコードのバイナリを追加し
    繰り返し
    
    計算使用整数数（インデックス）が　２に　等しい　ならば
        ※swap
        swapのデータを得て　オペコードのバイナリを追加し
    つぎに
    計算単語情報集の　計算オペコード（インデックス）で
    オペコードのバイナリを文字列追加し

    ※invokestatic
    IntegerValueOf定義インデックスで　invokestaticのデータを得て
    オペコードのバイナリを追加し

    ※invokevirtual
    push関数を得て、invokevirtualのデータを得て　
    オペコードのバイナリを追加し

    ※pop
    popのデータを得て　オペコードのバイナリを追加すること。
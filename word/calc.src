計算単語情報型は　型紙
        計算単語名は　文字列
        計算オペコードは　バイト変数

    計算単語情報は　計算単語名と　計算オペコード　
    全体は　１０個の　計算単語情報。

計算単語情報集は　暗黙の構造体　計算単語情報型。

（・ー＞・）
計算単語情報集を初期化とは
    計算単語情報集の　計算単語名（１）に　「加」を　入れ
    iaddのデータを得て　（バイト数を）　捨て
    計算単語情報集の　計算オペコード（１）に　入れ

    計算単語情報集の　計算単語名（２）に　「引」を　入れ
    isubのデータを得て　（バイト数を）　捨て、
    計算単語情報集の　計算オペコード（２）に　入れ

    計算単語情報集の　計算単語名（３）に　「掛」を　入れ
    imulのデータを得て　（バイト数を）　捨て、
    計算単語情報集の　計算オペコード（３）に　入れ

    計算単語情報集の　計算単語名（４）に　「割」を　入れ
    idivのデータを得て　（バイト数を）　捨て、
    計算単語情報集の　計算オペコード（４）に　入れ

    計算単語情報集の　計算単語名（５）に　「割余」を　入れ
    iremのデータを得て　（バイト数を）　捨て、
    計算単語情報集の　計算オペコード（５）に　入れ

    計算単語情報集の　計算単語名（６）に　「ＡＮＤ」を　入れ
    iandのデータを得て　（バイト数を）　捨て、
    計算単語情報集の　計算オペコード（６）に　入れ

    計算単語情報集の　計算単語名（７）に　「ＯＲ」を　入れ
    iorのデータを得て　（バイト数を）　捨て、
    計算単語情報集の　計算オペコード（７）に　入れ

    計算単語情報集の　計算単語名（８）に　「ＸＯＲ」を　入れ
    ixorのデータを得て　（バイト数を）　捨て、
    計算単語情報集の　計算オペコード（８）に　入れ

    計算単語情報集の　計算単語名（９）に　「左シフト」を　入れ
    ishlのデータを得て　（バイト数を）　捨て、
    計算単語情報集の　計算オペコード（９）に　入れ

    計算単語情報集の　計算単語名（１０）に　「右シフト」を　入れ
    iushrのデータを得て　（バイト数を）　捨て、
    計算単語情報集の　計算オペコード（１０）に　入れ。

（文字列ー＞インデックス・真）
（文字列ー＞偽）
定義済み計算単語？とは
    検査文字列は　文字列
    検査文字列に　入れ
    計算単語情報の　要素数を　回数指定し、
        計算単語情報集の　計算単語名（回数）と　検査文字列が　等しい文字列　ならば
            回数と　真をつみ　終わり
        つぎに
    繰り返し、
    偽を　返すこと。

（インデックスー＞）
（Integerインデックス・IntegerIntValueインデックス・IntegerValueOfインデックス）
計算単語の定数フィールドを追加するとは
    インデックスは　変数
    追加数は　変数

    （文字列・バイトー＞・）
    文字列化して追加とは
        バイト数指定で文字列化したものを、　
        ランタイム定数フィールドをメモファイルに書き込み

    本体とは
        インデックスに　入れ
        追加数を　クリアし

        メソッドランタイム定数フィールド数と　「java/lang/Integer」で
            クラスランタイム定数フィールド情報を得て　偽？　ならば
            ランタイム定数フィールドをメモファイルに書き込み
            追加数を　増加させ
        つぎに
        (Integerインデックスがつまれた)
        
        ※Methodref
        メソッドランタイム定数フィールド数に　追加数を　加え
        「java/lang/Integer」と　「intValue」と　「()I」で
            Methodランタイム定数フィールド情報を得て　偽？　ならば
            ランタイム定数フィールドをメモファイルに書き込み
            追加数を　増加させ
        つぎに
        (IntValueインデックスがつまれた)

        ※Methodref
        メソッドランタイム定数フィールド数に　追加数を　加え
        「java/lang/Integer」と　「valueOf」と　「(I)Ljava/lang/Integer;」で
            Methodランタイム定数フィールド情報を得て　偽？　ならば
            ランタイム定数フィールドをメモファイルに書き込み
            追加数を　増加させ
        つぎに

        (ValueOfインデックスがつまれた)

        メソッドランタイム定数フィールド数を
            追加数だけ　増加させ。

（インデックスー＞・）
※    aload_1
※    aload_1
※    invokevirtual (pop)
※    checkcast (Integer)
※    invokevirtual (intValue)
※    aload_1
※    invokevirtual (pop)
※    checkcast (Integer)
※    invokevirtual (intValue)
※    iaddとかその他
※    invokestatic (valueOf)
※    invokevirtual(push)
※    pop
単語認識計算単語時の処理とは、
    インデックスは　変数
    オフセットは　変数
    Integer定義インデックスは　変数
    IntegerIntValue定義インデックスは　変数
    IntegerValueOf定義インデックスは　変数

    インデックスに　入れ
    
    オフセットに　メソッドランタイム定数フィールド数を　入れ
    「これは計算単語です」を　文字列をテスト表示し、

    インデックスをつかい
    計算単語の定数フィールドを追加し、

    Integer定義インデックスと
    IntegerIntValue定義インデックスと
    IntegerValueOf定義インデックスに　入れ

    ※aload_1
    Stackaloadのデータを得て　オペコードのバイナリを追加し

    ２を　回数指定し
        ※aload_1
        Stackaloadのデータを得て　オペコードのバイナリを追加し
        ※invokevirtual //Method
        pop関数を得て、invokevirtualのデータを得て　オペコードのバイナリを追加し
        ※checkcast #n+1
        Integer定義インデックスで
        checkcastのデータを得て、オペコードのバイナリを追加することを
        ※invokevirtual #n+3
        IntegerIntValue定義インデックスで
        invokevirtualのデータを得て　オペコードのバイナリを追加し
    繰り返し
    ※swap
    swapのデータを得て　オペコードのバイナリを追加し

    計算単語情報集の　計算オペコード（インデックス）を
    １バイトで
    オペコードのバイナリを追加し

    ※invokestatic
    IntegerValueOf定義インデックスで　invokestaticのデータを得て
    オペコードのバイナリを追加し

    ※invokevirtual
    push関数を得て、invokevirtualのデータを得て　
    オペコードのバイナリを追加し

    ※pop
    popのデータを得て　オペコードのバイナリを追加すること。
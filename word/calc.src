計算単語情報型は　型紙
        計算単語名は　文字列
        計算オペコードは　文字列実体　長さ　２バイト
        計算使用整数数は　バイト変数

    計算単語情報は
        計算単語名と　計算オペコードと　計算使用整数数
    全体は　１６個の　計算単語情報。

計算単語情報集は　構造体　計算単語情報型。

ローカル。
現在定義済み計算単語数は　変数。
（単語名・オペコード１・(オペコードデータ２)・オペコード数・使用整数数ー＞・）
計算単語情報集一単語セットとは
    インデックスは　変数

    現在定義済み計算単語数に　一つ加え
    インデックスに　入れ
    計算単語情報集の　計算使用整数数（インデックス）に　入れ

    回数指定し
        （バイト数を）　複写し
        計算単語情報集の　計算オペコード（インデックス）を　少し右寄せしてから
        バイト数指定で文字列化したものを
        計算単語情報集の　計算オペコード（インデックス）に　左側追加し
    繰り返して
    計算単語情報集の　計算単語名（インデックス）に　入れ
    現在定義済み計算単語数を　一つ増加させ。

グローバル。
（・ー＞・）
※この順番及びインデックスに依存するコードは書かないでください
※放ってあるデータの数は計算単語情報の要素数と全く同じで無ければなりません
計算単語情報集を初期化とは
    計算単語情報集を　クリア
    現在定義済み計算単語数を　クリア
    ※単語名
    ※計算オペコード
    ※オペコード数
    ※使用整数数

    「加」
    iaddのデータを得て
    １
    ２
    計算単語情報集一単語セットし

    「引」
    isubのデータを得て
    １
    ２
    計算単語情報集一単語セットし

    「掛」
    imulのデータを得て
    １
    ２
    計算単語情報集一単語セットし

    「割」
    idivのデータを得て
    １
    ２
    計算単語情報集一単語セットし

    「割余」
    iremのデータを得て
    １
    ２
    計算単語情報集一単語セットし

    「ＡＮＤ」
    iandのデータを得て
    １
    ２
    計算単語情報集一単語セットし

    「ＯＲ」
    iorのデータを得て
    １
    ２
    計算単語情報集一単語セットし

    「ＸＯＲ」
    ixorのデータを得て
    １
    ２
    計算単語情報集一単語セットし

    「左シフト」
    ishlのデータを得て
    １
    ２
    計算単語情報集一単語セットし

    「右シフト」
    iushrのデータを得て
    １
    ２
    計算単語情報集一単語セットし

    「負数」
    inegのデータを得て
    １
    １
    計算単語情報集一単語セットし

    「ＮＯＴ」
    －１で　iconst_iのデータを得て
    ixorのデータを得て
    ２
    １
    計算単語情報集一単語セットし

    「一加」
    １で　iconst_iのデータを得て
    iaddのデータを得て
    ２
    １
    計算単語情報集一単語セットし

    「二加」
    ２で　iconst_iのデータを得て
    iaddのデータを得て
    ２
    １
    計算単語情報集一単語セットし

    「一引」
    １で　iconst_iのデータを得て
    isubのデータを得て
    ２
    １
    計算単語情報集一単語セットし

    「二引」
    ２で　iconst_iのデータを得て
    isubのデータを得て
    ２
    １
    計算単語情報集一単語セットし

    現在定義済み計算単語数が　計算単語情報の　要素数と　異なる　ならば
        「計算単語の初期化に失敗」で　重大エラー
    つぎに。

（文字列ー＞インデックス・真）
（文字列ー＞偽）
定義済み計算単語？とは
    検査文字列は　文字列
    検査文字列に　入れ
    計算単語情報の　要素数を　回数指定し、
        計算単語情報集の　計算単語名（回数）と　検査文字列が　等しい文字列　ならば
            回数と　真をつみ　終わり
        つぎに
    繰り返し、
    偽を　返すこと。

（・ー＞）
（Integerインデックス・IntegerIntValueインデックス・IntegerValueOfインデックス）
計算単語の定数フィールドを追加するとは
    ※Class
    メソッドランタイム定数フィールド数と　「java/lang/Integer」で
    クラスランタイム定数フィールド情報を得て
    ランタイム定数フィールド取得後処理し
    (Integerインデックスがつまれた)

    ※Methodref
    メソッドランタイム定数フィールド数と
    「java/lang/Integer」と　「intValue」と　「()I」で
    Methodランタイム定数フィールド情報を得て
    ランタイム定数フィールド取得後処理し
    (IntValueインデックスがつまれた)

    ※Methodref
    メソッドランタイム定数フィールド数と
    「java/lang/Integer」と　「valueOf」と　「(I)Ljava/lang/Integer;」で
    Methodランタイム定数フィールド情報を得て
    ランタイム定数フィールド取得後処理し
    (ValueOfインデックスがつまれた)。

（インデックスー＞・）
※    aload_1
※    aload_1
※    invokevirtual (pop)
※    checkcast (Integer)
※    invokevirtual (intValue)
※    aload_1
※    invokevirtual (pop)
※    checkcast (Integer)
※    invokevirtual (intValue)
※    iaddとかその他
※    invokestatic (valueOf)
※    invokevirtual(push)
※    pop
単語認識計算単語時の処理とは、
    計算単語インデックスは　変数
    Integer定義インデックスは　変数
    IntegerIntValue定義インデックスは　変数
    IntegerValueOf定義インデックスは　変数

    計算単語インデックスに　入れ

    「これは計算単語です」を　文字列をテスト表示し、

    計算単語の定数フィールドを追加し、

    Integer定義インデックスと
    IntegerIntValue定義インデックスと
    IntegerValueOf定義インデックスに　入れ

    ※aload_1
    Stackaloadのデータを得て　オペコードのバイナリを追加し

    計算単語情報集の
    計算使用整数数（計算単語インデックス）を　回数指定し
        ※aload_1
        Stackaloadのデータを得て　オペコードのバイナリを追加し
        ※invokevirtual //Method
        pop関数を得て、invokevirtualのデータを得て　オペコードのバイナリを追加し
        ※checkcast #n+1
        Integer定義インデックスで
        checkcastのデータを得て、オペコードのバイナリを追加することを
        ※invokevirtual #n+3
        IntegerIntValue定義インデックスで
        invokevirtualのデータを得て　オペコードのバイナリを追加し
    繰り返し
    
    計算単語情報集の
    計算使用整数数（計算単語インデックス）が　２に　等しい　ならば
        ※swap
        swapのデータを得て　オペコードのバイナリを追加し
    つぎに
    計算単語情報集の　計算オペコード（計算単語インデックス）で
    オペコードのバイナリを文字列追加し

    ※invokestatic
    IntegerValueOf定義インデックスで　invokestaticのデータを得て
    オペコードのバイナリを追加し

    ※invokevirtual
    push関数を得て、invokevirtualのデータを得て　
    オペコードのバイナリを追加すること。
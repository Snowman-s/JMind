ループ単語情報型は　型紙
        ループ単語名は　文字列
        ループカウンタ無視フラグは　バイト変数

        ※！！！以下はfor文の場合
        forループカウンタ増加数は　変数
        for終了判定オペコードは　文字列実体　長さ　３バイト
        ※渡された数値を使用する場所
        ※(0か1であること)
        ※0の時
        ※for(int i = 1;i <= n;i++)
        ※1の時
        ※for(int i = n;i <= 1;i++)
        for譲渡値使用場所は　変数

    ループ単語情報は
        ループ単語名と
        forループカウンタ増加数と
        for終了判定オペコードと
        for譲渡値使用場所と
        ループカウンタ無視フラグ
    全体は　３個の　ループ単語情報。

ループ単語情報集は　構造体　ループ単語情報型。

ローカル。
現在定義済みループ単語数は　変数。
（単語名・ループカウンタ増加数・終了判定オペコード・for譲渡値使用場所・ループカウンタ無視フラグー＞・）
ループ単語情報集一単語セットとは
    インデックスは　変数

    現在定義済みループ単語数に　一つ加え
    インデックスに　入れ

    複写し
    偽？を　ループ単語情報集の　ループカウンタ無視フラグ（インデックス）に　入れてそれが
    真？　ならば
        ループ単語情報集の　for譲渡値使用場所（インデックス）に　入れ
        バイト数指定で文字列化し
        ループ単語情報集の　for終了判定オペコード（インデックス）に　入れ
        ループ単語情報集の　forループカウンタ増加数（インデックス）に　入れ
    つぎに
    ループ単語情報集の　ループ単語名（インデックス）に　入れ
    現在定義済みループ単語数を　一つ増加させ。

グローバル。
（・ー＞・）
ループ単語情報集を初期化とは
    ループ単語情報集を　クリアし
    現在定義済みループ単語数を　クリアし

    ※単語名
    ※(ループカウンタ増加数)
    ※(終了判定オペコード)
    ※(渡された値の使用場所)
    ※この単語はfor？

    「回数指定」
    １
    ０で　if_icmpgtのデータを得て
    ０
    真
    ループ単語情報集一単語セットし

    「逆向回数指定」
    －１
    ０で　if_icmpltのデータを得て
    １
    真
    ループ単語情報集一単語セットし

    「ここから」
    偽
    ループ単語情報集一単語セットし

    現在定義済みループ単語数が　ループ単語情報の　要素数と　異なる　ならば
        「ループ単語の初期化に失敗」で　重大エラー
    つぎに。

（文字列ー＞インデックス・真）
（文字列ー＞偽）
定義済みループ単語？とは
    検査文字列は　文字列
    検査文字列に　入れ
    ループ単語情報の　要素数を　回数指定し、
        ループ単語情報集の　ループ単語名（回数）と　検査文字列が　等しい文字列　ならば
            回数と　真をつみ　終わり
        つぎに
    繰り返し、
    偽を　返すこと。

（・ー＞）
（Integerインデックス・IntegerIntValueインデックス）
ループ単語の定数フィールドを追加するとは
    ※Class
    メソッドランタイム定数フィールド数と　
    「java/lang/Integer」で
    クラスランタイム定数フィールド情報を得て
    ランタイム定数フィールド取得後処理し
    (Integerインデックスが積まれた)

    ※Methodref
    メソッドランタイム定数フィールド数と
    「java/lang/Integer」と　「intValue」と　「()I」で
    Methodランタイム定数フィールド情報を得て
    ランタイム定数フィールド取得後処理し
     (IntValueインデックスが積まれた)。

※        nをこれまでに使用されたローカル変数の数とすると
※        17: aload_1
※        18: invokevirtual #20                 // Method java/util/Stack.pop:()Ljava/lang/Object;
※        21: checkcast     #11                 // class java/lang/Integer
※        24: invokevirtual #24                 // Method java/lang/Integer.intValue:()I
※        27: istore_<n> //ループカウンタ最大値
※        28: iconst_1
※        29: istore_<n+1> //ループカウンタ

※        30: iload_<n+1>
※        31: iload_<n>
※        32: if_icmpgt     58

※        //ループ内処理

※        52: iinc          <n+2>, 1
※        55: goto          30
単語認識ループ単語時の処理とは、
    インデックスは　変数
    Integer定義インデックスは　変数
    IntegerIntValue定義インデックスは　変数
    関数認識構造体情報は　構造体情報
    ループオフセットは　変数

    ループ開始時バイト数は　変数
    書き換え予定ifバイト数は　変数
    ループ終了時バイト数は　変数

    continue飛移先は　変数
    break飛移先は　変数

    ※continue,break処理用
    gotoオペコードバイトは　変数
    continueかbreakかは　変数

    forループカウンタ最大値変数インデックスは　変数
    forループカウンタ変数インデックスは　変数

    回数変数インデックスストックは　変数
    ループ操作単語数ストックは　変数
    ループ中フラグストックは　変数
        for枠取り変数数は　定数　２

    本体とは
    インデックスに　入れ

    「これはループ単語です」を　文字列をテスト表示し、
    
    メソッドループ操作単語数と
    メソッドループ中フラグを
    ループ操作単語数ストックと
    ループ中フラグストックに　入れ

    メソッドループ操作単語数を　クリアし
    メソッドループ中フラグに　真を　入れ

    ループ単語情報集の　ループカウンタ無視フラグ（インデックス）が　真？　ならば
        真で　オペコードメモバイト数を
        ループ開始時バイト数に　入れ
    さもなければ
        ※forのとき
        ※ループカウンタの為の変数
        メソッドローカル変数を一つ枠取り
        forループカウンタ最大値変数インデックスに　入れ

        メソッドローカル変数を一つ枠取り
        forループカウンタ変数インデックスに　入れ

        回数変数インデックスを
        回数変数インデックスストックに　入れ

        forループカウンタ変数インデックスを
        回数変数インデックスに　入れ
        ※！！！変数
        ローカル変数メモファイル追加書き込み準備し、
        for枠取り変数数を　回数指定し
            Integerのスタックマップテーブルデータを得て
            ローカル変数のバイナリを文字列追加することを
        繰り返し、

        ループ単語の定数フィールドを追加し、

        Integer定義インデックスと
        IntegerIntValue定義インデックスに　入れ

        ※aload_1
        Stackaloadのデータを得て　オペコードのバイナリを追加し
        ※invokevirtual //Method
        pop関数を得て、invokevirtualのデータを得て　オペコードのバイナリを追加し
        ※checkcast
        Integer定義インデックスで
        checkcastのデータを得て、オペコードのバイナリを追加し
        ※invokevirtual
        IntegerIntValue定義インデックスで
        invokevirtualのデータを得て　オペコードのバイナリを追加し

        ※istore_<n>
        ループ単語情報集の
        for譲渡値使用場所（インデックス）が　ゼロ？　ならば
            forループカウンタ変数インデックスをつみ
            forループカウンタ最大値変数インデックスをつみ
        さもなければ
            forループカウンタ最大値変数インデックスをつみ
            forループカウンタ変数インデックスをつみ
        つぎに
        istoreのデータを可能なら短縮して得て　オペコードのバイナリを追加し
        ※iconst_1
        １で　iconst_iのデータを得て　オペコードのバイナリを追加し
        ※istore_<n+1>
        istoreのデータを可能なら短縮して得て　オペコードのバイナリを追加し

        真で　オペコードメモバイト数を
        ループ開始時バイト数に　入れ

        ※iload_<n+1>
        forループカウンタ変数インデックスで
        iloadのデータを可能なら短縮して得て　オペコードのバイナリを追加し
        ※iload_<n>
        forループカウンタ最大値変数インデックスで
        iloadのデータを可能なら短縮して得て　オペコードのバイナリを追加し

        真で　オペコードメモバイト数を
        書き換え予定ifバイト数に　入れ

        ※if_<exp>
        ループ単語情報集の
        for終了判定オペコード（インデックス）で
        オペコードのバイナリを文字列追加し
    つぎに

    ループ開始時バイト数で
    スタックマップテーブルFullFrameデータを追加し

    ループ操作単語メモファイル追加書き込み準備し

    「繰返」まで　羅列文字列認識し

    ループ操作単語メモファイル読み出し準備し

    真で　オペコードメモバイト数をえて　複写し
    continue飛移先に　入れ
    スタックマップテーブルSameデータを可能なら短縮して追加

    ループ単語情報集の　ループカウンタ無視フラグ（インデックス）が　偽？　ならば
        ※iinc <n+1>
        forループカウンタ変数インデックスで
        ループ単語情報集の
        forループカウンタ増加数（インデックス）だけ
        iincのデータを得て　オペコードのバイナリを追加し
    つぎに

    ※goto
    ループ開始時バイト数より
    真をつかい　オペコードメモバイト数をえて
    引き
    gotoのデータを得て
    オペコードのバイナリを追加し、

    真で　オペコードメモバイト数をつみ
    複写し
    ループ終了時バイト数と
    break飛移先に　入れ

    ループ単語情報集の　ループカウンタ無視フラグ（インデックス）が　真？　ならば
        ループ終了時バイト数で
        スタックマップテーブルFullFrameデータを追加し
    さもなければ
        ループ終了時バイト数より　書き換え予定ifバイト数を　引き
        ２バイトで　バイト数指定で文字列化したもので、

        書き換え予定ifバイト数に　１つ　加え
        オペコードメモファイルを一部変更し

        回数変数インデックスに
        回数変数インデックスストックを　入れ

        for枠取り変数数に　１バイトを　掛けただけ
        ローカル変数メモファイルを指定バイト削除し
        現在使用中のメソッドローカル変数数を　２つ　減少させ

        ※chop
        ２つと
        ループ終了時バイト数で
        スタックマップテーブルchopデータを追加し
    つぎに
    
    ※continuebreak処理
    メソッドループ操作単語数を　回数指定し
        ループ操作単語メモファイル一つ情報読み出し、

        gotoオペコードバイトと
        continueかbreakかに　入れ

        continueかbreakかが　数値ログ
        ループ操作単語もう一度に　等しい　ならば
            continue飛移先をつみ
        さもなければ
            break飛移先をつみ
        つぎに
        gotoオペコードバイトを　引いてから
        ２バイトで　バイト数指定で文字列化したもので、

        gotoオペコードバイトに　一つ加えたとこで
        オペコードメモファイルを一部変更し
    繰り返し

    メソッドループ操作単語数と　３を　掛けたぶんだけ
    ループ操作単語メモファイルを指定バイト削除し

    ループ操作単語数ストックと
    ループ中フラグストックを
    メソッドループ操作単語数と
    メソッドループ中フラグに　入れ。
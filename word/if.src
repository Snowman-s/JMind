羅列文字列認識は　仮定義。

分岐単語情報型は　型紙
        分岐単語名は　文字列
        分岐オペコードは　変数

    分岐単語情報は　分岐単語名と　分岐オペコード　
    全体は　２個の　分岐単語情報。

分岐単語情報集は　暗黙の構造体　分岐単語情報型。

（・ー＞・）
分岐単語情報集を初期化とは
    分岐単語情報集の　分岐単語名（１）に　「ならば」を　入れ
    ０で　ifeqのデータを得て、　(バイト数を)　捨て、
    分岐単語情報集の　分岐オペコード（１）に　入れ

    分岐単語情報集の　分岐単語名（２）に　「でなければ」を　入れ
    ０で　ifneのデータを得て、　(バイト数を)　捨て、
    分岐単語情報集の　分岐オペコード（２）に　入れ。

（文字列ー＞インデックス・真）
（文字列ー＞偽）
定義済み分岐単語？とは
    検査文字列は　文字列
    検査文字列に　入れ
    分岐単語情報の　要素数を　回数指定し、
        分岐単語情報集の　分岐単語名（回数）と　検査文字列が　等しい文字列　ならば
            回数と　真をつみ　終わり
        つぎに
    繰り返し、
    偽を　返すこと。

（構造体情報・インデックスー＞）
（Integerインデックス・IntegerIntValueインデックス・Stackインデックス・String配列・追加した定数フィールド数）
※注意！「定数フィールドの数」は　増加していません！
分岐単語の定数フィールドを追加するとは
    関数認識構造体情報は　構造体情報
    インデックスは　変数
    追加数は　変数

    （文字列・バイトー＞・）
    文字列化して追加とは
        バイト数指定で文字列化したものを、　関数認識構造体情報をつかい　ランタイム定数フィールドをメモファイルに書き込み

    本体とは
        関数認識構造体情報と　インデックスに　入れ
        追加数を　クリアし

        関数認識構造体情報の　ランタイム定数フィールド数と　「java/lang/Integer」で
            クラスランタイム定数フィールド情報を得て　偽？　ならば
            関数認識構造体情報をつかい　ランタイム定数フィールドをメモファイルに書き込み
            追加数を　増加させ
        つぎに

        ※！！！
        (Integerインデックスが積まれた)
        
        ※Methodref
        関数認識構造体情報の　ランタイム定数フィールド数に　追加数を　加え
        「java/lang/Integer」と　「intValue」と　「()I」で
            Methodランタイム定数フィールド情報を得て　偽？　ならば
            関数認識構造体情報をつかい　ランタイム定数フィールドをメモファイルに書き込み
            追加数を　増加させ
        つぎに

            ※！！！
        (IntValueインデックスが積まれた)

        ※Class
        関数認識構造体情報の　ランタイム定数フィールド数に　追加数を　加え
        「java/util/Stack」で
            クラスランタイム定数フィールド情報を得て　偽？　ならば
            関数認識構造体情報をつかい　ランタイム定数フィールドをメモファイルに書き込み
            追加数を　増加させ
        つぎに
        ※！！！
        （Stackインデックスがつまれた）

        ※Class
        関数認識構造体情報の　ランタイム定数フィールド数に　追加数を　加え
        「[Ljava/lang/String;」で
            クラスランタイム定数フィールド情報を得て　偽？　ならば
            関数認識構造体情報をつかい　ランタイム定数フィールドをメモファイルに書き込み
            追加数を　増加させ
        つぎに
        ※！！！
        （Stackインデックスがつまれた）

        追加数を　返すこと。

（構造対情報・インデックスー＞・）
※    aload_1
※    invokevirtual (pop)
※    checkcast (Integer)
※    invokevirtual (intValue)
※    ifなんちゃら
単語認識分岐単語時の処理とは、
    インデックスは　変数
    オフセットは　変数
    Integer定義インデックスは　変数
    IntegerIntValue定義インデックスは　変数
    Stack定義インデックスは　変数
    String配列定義インデックスは　変数
    関数認識構造体情報は　構造体情報
    ifオフセットは　変数

    分岐開始時バイト数は　変数
    分岐終了時バイト数は　変数
    分岐内バイナリは　文字列実体　長さ　１６０桁

    スタックマップテーブル操作インデックスは　変数
    スタックマップテーブル整数追加とは
        バイト数指定で文字列化し
        関数認識構造体情報の
        スタックマップテーブル情報一つ（スタックマップテーブル操作インデックス）に
        追加し

    本体とは
    関数認識構造体情報と　インデックスに　入れ

    オフセットに　関数認識構造体情報の　ランタイム定数フィールド数を　入れ
    「これは分岐単語です」を　一行表示し、

    関数認識構造体情報と　インデックスをつかい
    分岐単語の定数フィールドを追加し、

    関数認識構造体情報の　ランタイム定数フィールド数を
    （追加した数だけ）　増加させ

    Integer定義インデックスと
    IntegerIntValue定義インデックスと
    Stack定義インデックスと
    String配列定義インデックスに　入れ

    ※aload_1
    １で　aload_nのデータを得て　関数認識構造体情報の　オペコードのバイナリを追加し
    ※invokevirtual //Method
    pop関数を得て、invokevirtualのデータを得て　関数認識構造体情報の　オペコードのバイナリを追加し
    ※checkcast #n+1
    Integer定義インデックスで
    checkcastのデータを得て、関数認識構造体情報の　オペコードのバイナリを追加することを
    ※invokevirtual #n+3
    IntegerIntValue定義インデックスで
    invokevirtualのデータを得て　関数認識構造体情報の　オペコードのバイナリを追加し

    ※if_<exp>
    分岐単語情報集の　分岐オペコード（インデックス）を
    ３バイトで　関数認識構造体情報の　オペコードのバイナリを追加し

    関数認識構造体情報の
    オペコードと引数のデータのバイナリの　バイト数を
    分岐開始時バイト数に　入れ

    「つぎに」まで　関数認識構造体情報で　羅列文字列認識し

    関数認識構造体情報の
    オペコードと引数のデータのバイナリの　バイト数を
    分岐終了時バイト数に　入れ

    分岐終了時バイト数から　分岐開始時バイト数を　引いたもので
    関数認識構造体情報の　オペコードと引数のデータのバイナリより
    バイト列右側切り出しし　分岐内バイナリに　入れ

    関数認識構造体情報の　オペコードと引数のデータのバイナリを
    ２バイトで　バイト列右側切り出しし、捨て
    分岐終了時バイト数から　分岐開始時バイト数を　引いたものに
    ３つ　加えたものを　２バイトで　バイト数指定で文字列化し、
    関数認識構造体情報の　オペコードと引数のデータのバイナリに　追加し

    (切り出したものを戻す)
    分岐内バイナリを
    関数認識構造体情報の　オペコードと引数のデータのバイナリに　追加し

    ※！！！！スタックマップテーブル
    関数認識構造体情報の　スタックマップテーブル情報数に　一つ加え
        スタックマップテーブル操作インデックスに　入れ

        関数認識構造体情報の　オペコードと引数のデータのバイナリの
        バイト数から
        関数認識構造体情報の　スタックマップテーブルオフセットを　引き
        ifオフセットに　入れ

        ifオフセットが　－１と　異なる　ならば
            ０ＦＦＨを
            １バイトで　スタックマップテーブル整数追加し

            ifオフセットを
            ２バイトで　スタックマップテーブル整数追加し

            関数認識構造体情報の　オペコードと引数のデータのバイナリの
            バイト数に　一つ加え
            関数認識構造体情報の　スタックマップテーブルオフセットに　入れ

            ２を
            ２バイトで　スタックマップテーブル整数追加し

            ７を
            １バイトで　スタックマップテーブル整数追加し

            String配列定義インデックスを
            ２バイトで　スタックマップテーブル整数追加し

            ７を
            １バイトで　スタックマップテーブル整数追加し

            Stack定義インデックスを
            ２バイトで　スタックマップテーブル整数追加し

            ０を
            ２バイトで　スタックマップテーブル整数追加し
            関数認識構造体情報の　スタックマップテーブル情報数を　一つ増加し
        つぎに
    。
羅列文字列認識は　仮定義。

分岐単語情報型は　型紙
        分岐単語名は　文字列
        分岐オペコードは　変数

    分岐単語情報は　分岐単語名と　分岐オペコード　
    全体は　２個の　分岐単語情報。

分岐単語情報集は　暗黙の構造体　分岐単語情報型。

（・ー＞・）
分岐単語情報集を初期化とは
    分岐単語情報集の　分岐単語名（１）に　「ならば」を　入れ
    ０で　ifeqのデータを得て、　(バイト数を)　捨て、
    分岐単語情報集の　分岐オペコード（１）に　入れ

    分岐単語情報集の　分岐単語名（２）に　「でなければ」を　入れ
    ０で　ifneのデータを得て、　(バイト数を)　捨て、
    分岐単語情報集の　分岐オペコード（２）に　入れ。

（文字列ー＞インデックス・真）
（文字列ー＞偽）
定義済み分岐単語？とは
    検査文字列は　文字列
    検査文字列に　入れ
    分岐単語情報の　要素数を　回数指定し、
        分岐単語情報集の　分岐単語名（回数）と　検査文字列が　等しい文字列　ならば
            回数と　真をつみ　終わり
        つぎに
    繰り返し、
    偽を　返すこと。

（インデックスー＞）
（Integerインデックス・IntegerIntValueインデックス・Stackインデックス・）
（String配列・追加した定数フィールド数）
分岐単語の定数フィールドを追加するとは
    インデックスは　変数
    追加数は　変数

    （文字列・バイトー＞・）
    文字列化して追加とは
        バイト数指定で文字列化したものを、
        ランタイム定数フィールドをメモファイルに書き込み

    本体とは
        インデックスに　入れ
        追加数を　クリアし

        メソッドランタイム定数フィールド数と　「java/lang/Integer」で
            クラスランタイム定数フィールド情報を得て　偽？　ならば
            ランタイム定数フィールドをメモファイルに書き込み
            追加数を　増加させ
        つぎに

        ※！！！
        (Integerインデックスが積まれた)
        
        ※Methodref
        メソッドランタイム定数フィールド数に　追加数を　加え
        「java/lang/Integer」と　「intValue」と　「()I」で
            Methodランタイム定数フィールド情報を得て　偽？　ならば
            ランタイム定数フィールドをメモファイルに書き込み
            追加数を　増加させ
        つぎに

            ※！！！
        (IntValueインデックスが積まれた)

        ※Class
        メソッドランタイム定数フィールド数に　追加数を　加え
        「java/util/Stack」で
            クラスランタイム定数フィールド情報を得て　偽？　ならば
            ランタイム定数フィールドをメモファイルに書き込み
            追加数を　増加させ
        つぎに
        ※！！！
        （Stackインデックスがつまれた）

        ※Class
        メソッドランタイム定数フィールド数に　追加数を　加え
        「[Ljava/lang/String;」で
            クラスランタイム定数フィールド情報を得て　偽？　ならば
            ランタイム定数フィールドをメモファイルに書き込み
            追加数を　増加させ
        つぎに
        ※！！！
        （String配列インデックスがつまれた）

        メソッドランタイム定数フィールド数を
        追加数だけ　増加させ。

（インデックスー＞・）
※    aload_1
※    invokevirtual (pop)
※    checkcast (Integer)
※    invokevirtual (intValue)
※    ifなんちゃら
単語認識分岐単語時の処理とは、
    インデックスは　変数
    オフセットは　変数
    Integer定義インデックスは　変数
    IntegerIntValue定義インデックスは　変数
    Stack定義インデックスは　変数
    String配列定義インデックスは　変数
    関数認識構造体情報は　構造体情報
    ifオフセットは　変数

    分岐開始時バイト数は　変数
    分岐終了時バイト数は　変数

    本体とは
    インデックスに　入れ

    オフセットに　メソッドランタイム定数フィールド数を　入れ
    「これは分岐単語です」を　文字列をテスト表示し、

    インデックスをつかい
    分岐単語の定数フィールドを追加し、

    Integer定義インデックスと
    IntegerIntValue定義インデックスと
    Stack定義インデックスと
    String配列定義インデックスに　入れ

    ※aload_1
    １で　aload_nのデータを得て　オペコードのバイナリを追加し
    ※invokevirtual //Method
    pop関数を得て、invokevirtualのデータを得て　オペコードのバイナリを追加し
    ※checkcast #n+1
    Integer定義インデックスで
    checkcastのデータを得て、オペコードのバイナリを追加することを
    ※invokevirtual #n+3
    IntegerIntValue定義インデックスで
    invokevirtualのデータを得て　オペコードのバイナリを追加し

    ※if_<exp>
    分岐単語情報集の　分岐オペコード（インデックス）を
    ３バイトで　オペコードのバイナリを追加し

    真で　オペコードメモバイト数を
    分岐開始時バイト数に　入れ

    「つぎに」まで　羅列文字列認識し

    真で　オペコードメモバイト数を
    分岐終了時バイト数に　入れ

    分岐終了時バイト数から　分岐開始時バイト数を　引いたものに
    ３つ　加えたものを　２バイトで　バイト数指定で文字列化したもので、

    分岐開始時バイト数から　二つ引き
    オペコードメモファイルを一部変更し

    ※！！！！スタックマップテーブル
        真で　オペコードメモバイト数より
        メソッドスタックマップテーブルオフセットを　引き
        ifオフセットに　入れ

        ifオフセットが　－１と　異なる　ならば
            ０ＦＦＨを
            １バイトで　スタックマップテーブルのバイナリを追加し

            ifオフセットを
            ２バイトで　スタックマップテーブルのバイナリを追加し

            真で　オペコードメモバイト数に　一つ加え
            メソッドスタックマップテーブルオフセットに　入れ

            実際のメソッドローカル変数数を
            ２バイトで　スタックマップテーブルのバイナリを追加し

            ローカル変数メモファイル読み出し準備し
            メモされたローカル変数をスタックマップテーブルメモファイルに書き込み

            ０を
            ２バイトで　スタックマップテーブルのバイナリを追加し

            メソッドスタックマップテーブル情報数を　一つ増加し
        つぎに。
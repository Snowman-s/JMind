※forのループカウンタ(「回数」)専用。

回数単語名は　文字列定数　「回数」。

（文字列ー＞真偽）
定義済み回数単語？とは
    回数単語名と　等しい文字列かを　返すこと。

（・ー＞Integer.valueOf()インデックス）
回数単語の定数フィールドを追加するとは
    ※Methodref
    メソッドランタイム定数フィールド数と
    「java/lang/Integer」と　「valueOf」と　「(I)Ljava/lang/Integer;」で
    Methodランタイム定数フィールド情報を得て　
    ランタイム定数フィールド取得後処理し
    （ValueOfインデックスが積まれた）。

（・ー＞・）
単語認識回数単語時の処理とは
    IntegerValueOfインデックスは　変数

    「これは『回数』です」を　文字列をテスト表示し

    回数単語の定数フィールドを追加し
    IntegerValueOfインデックスに　入れ

    ※ここから、オペコード情報
    ※aload_1
    Stackaloadのデータを得て　オペコードのバイナリを追加し

    ※iload_<n> (nは関数認識構造体にある「回数」変数)
    回数変数インデックスが　－１と　異なる　ならば
        回数変数インデックスで
        iloadのデータを可能なら短縮して得て
    さもなければ
        「『回数指定し～』のループ内ではないようです、代わりに1を積みます」を
        文字列をテスト表示し
        １で　iconst_iのデータを得て
    つぎに
    オペコードのバイナリを追加し

    ※invokestatic
    IntegerValueOfインデックスで
    invokestaticのデータを得て　オペコードのバイナリを追加し

    ※invokevirtual
    push関数を得て、invokevirtualのデータを得て　オペコードのバイナリを追加すること。
※forのループカウンタ(「回数」)専用。

回数単語名は　文字列定数　「回数」。

（文字列ー＞真偽）
定義済み回数単語？とは
    回数単語名と　等しい文字列かを　返すこと。

（・ー＞Integer.valueOf()インデックス）
回数単語の定数フィールドを追加するとは
    追加された数は　変数

    （文字列・バイトー＞・）
    文字列化して追加とは
        バイト数指定で文字列化したものを、
        ランタイム定数フィールドをメモファイルに書き込み、

    本体とは
        追加された数を　クリアし

        ※Methodref
        メソッドランタイム定数フィールド数に　追加された数を　加え
        「java/lang/Integer」と　「valueOf」と　「(I)Ljava/lang/Integer;」で
            Methodランタイム定数フィールド情報を得て　偽？　ならば
            ランタイム定数フィールドをメモファイルに書き込み
            追加された数を　増加させ
        つぎに
            （ValueOfインデックスが積まれた）

        メソッドランタイム定数フィールド数を
            追加数だけ　増加させ。

（・ー＞・）
単語認識回数単語時の処理とは
    「これは『回数』です」を　文字列をテスト表示し

    回数単語の定数フィールドを追加し

    ※ここから、オペコード情報
    ※aload_1
    Stackaloadのデータを得て　オペコードのバイナリを追加し

    ※iload_<n> (nは関数認識構造体にある「回数」変数)
    回数変数インデックスが　－１と　異なる　ならば
        回数変数インデックスで
        iloadのデータを可能なら短縮して得て
        オペコードのバイナリを追加し
    さもなければ
        「『回数指定し～』のループ内ではないようです、代わりに1を積みます」を
        文字列をテスト表示し
        １で　iconst_iのデータを得て
        オペコードのバイナリを追加し
    つぎに

    ※invokestatic
    (返り値で)　invokestaticのデータを得て　オペコードのバイナリを追加し

    ※invokevirtual
    push関数を得て、invokevirtualのデータを得て　オペコードのバイナリを追加し

    ※pop
    popのデータを得て　オペコードのバイナリを追加すること。